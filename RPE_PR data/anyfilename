 1/1:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
 1/2:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
 1/3:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
 1/4:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
 1/5:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
 1/6:
print(len(model.reactions))
print(len(model.metabolites))
print(len(model.genes))
 1/7: model
 4/1:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
 4/2:
print(len(model.reactions))
print(len(model.metabolites))
print(len(model.genes))
 4/3:
print(len(model.reactions))
print(len(model.metabolites))
print(len(model.genes))
 4/4: model
 4/5: model.reactions[29]
 4/6: model.metabolites.get_by_id("atp_c")
 4/7: model.reactions.EX_glc__D_e.bounds
 4/8:
pgi = model.reactions.get_by_id("PGI")
pgi
 4/9:
pgi = model.reactions.get_by_id("PGI")
pgi
4/10:
pgi = model.reactions.get_by_id("PGI")
pgi
4/11: model.metabolites.get_by_id("atp_c")
4/12: model.reactions.EX_glc__D_e.bounds
4/13:
pgi = model.reactions.get_by_id("PGI")
pgi
4/14:
print(pgi.name)
print(pgi.reaction)
4/15:
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print(pgi.reversibility)
4/16:
old_bounds = pgi.bounds
pgi.bounds = (0, 1000.0)
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print("Reversibility after modification:", pgi.reversibility)
pgi.bounds = old_bounds
print("Reversibility after resetting:", pgi.reversibility)
4/17:
old_bounds = pgi.bounds
print('Upper bound prior to setting new lower bound:', pgi.upper_bound)
pgi.lower_bound = 1100
print('Upper bound after setting new lower bound:', pgi.upper_bound)
pgi.bounds = old_bounds
4/18: pgi.check_mass_balance()
4/19:
pgi.add_metabolites({model.metabolites.get_by_id("h_c"): -1})
pgi.reaction
4/20: pgi.check_mass_balance()
4/21:
pgi.subtract_metabolites({model.metabolites.get_by_id("h_c"): -1})
print(pgi.reaction)
print(pgi.check_mass_balance())
4/22: pgi.reaction = "g6p_c --> f6p_c + h_c + green_eggs + ham"
4/23: pgi.reaction
4/24: pgi.reaction
4/25: pgi.reaction = "g6p_c --> f6p_c + h_c + green_eggs + ham"
4/26: pgi.reaction = "g6p_c --> f6p_c + h_c + green_eggs + ham"
4/27: pgi.reaction
4/28: pgi.reaction = "g6p_c --> f6p_c + h_c + green_eggs + ham"
 7/1:
import numpy as np
import bokeh.plotting
import bokeh.io

bokeh.io.output_notebook()

# Generate plotting values
t = np.linspace(0, 2 * np.pi, 200)
x = 16 * np.sin(t) ** 3
y = 13 * np.cos(t) - 5 * np.cos(2 * t) - 2 * np.cos(3 * t) - np.cos(4 * t)

p = bokeh.plotting.figure(height=250, width=275)
p.line(x, y, color="red", line_width=3)
text = bokeh.models.Label(x=0, y=0, text="bootcamp", text_align="center")
p.add_layout(text)

bokeh.io.show(p)
 7/2:
Python implementation: CPython
Python version       : 3.9.12
IPython version      : 8.3.0

numpy     : 1.21.5
bokeh     : 2.4.2
jupyterlab: 3.3.2
 7/3:
%load_ext watermark
%watermark -v -p numpy,bokeh,jupyterlab
 7/4:
load_ext watermark
watermark -v -p numpy,bokeh,jupyterlab
 7/5:
%load_ext watermark
%watermark -v -p numpy,bokeh,jupyterlab
 8/1: print('Hello, world.')
 8/2:
# The first few lines from The Zen of Python by Tim Peters
print('Beautiful is better than ugly.')
print('Explicit is better than implicit.')
print('Simple is better than complex.')
print('Complex is better than complicated.')
 8/3: zen.py
 8/4: python zen.py
 8/5: zen.py
 7/6: %run zen.py
 7/7: oh man
 9/1:
# Say hello to the world.
print('hello, world.')
 9/2:
# Would show 9 if this were the last line, but it is not, so shows nothing
4 + 5

# I hope we see 11.
5 + 6
 9/3:
# Variable assignment, so no visible output.
a = 5 + 6
 9/4:
# However, now if we ask for a, its value will be displayed
a
19/1:
%load_ext watermark
%watermark -v -p jupyterlab
19/2: %watermark -m
19/3: %watermark -m jupyterlab
20/1:
%load_ext watermark
%watermark -v -p jupyterlab
20/2: %watermark -m jupyterlab
20/3: %watermark -v -p jupyterlab
20/4: %watermark -v -p -m jupyterlab
20/5: %watermark -m
21/1: pwd
34/1: a=2
34/2: a
34/3: a+2
34/4: a=a+2.1
34/5: a
34/6: print(type(a))
34/7: print(type(a),a)
34/8:
print(type(a), a)

a = a + 4.1

print(type(a), a)
34/9:
a = 2
a += 4.1
a
34/10: print(type(a))
34/11: print(type(a),a)
34/12:
a = 2
a -= 4.1
a
34/13: value('hello world')
34/14: print('hello world')
34/15: a=print('hello world')
34/16: a
34/17: a
34/18: print(a)
34/19: a =  'hello world'
34/20: a
34/21: type(a)
34/22: value(a)
34/23: ord(a)
34/24: ord('a')
34/25: ord('ab')
34/26:
a=1
b=2
a==b
34/27:
a=1
b=2
a is b
34/28: a=5
34/29: b=5
34/30: a == b
34/31: a is b
34/32: type(a)
34/33: type(b)
34/34:
codon = 'AGG'

if codon == 'AUG':
    print('This codon is the start codon.')
34/35:
codon = 'AUG'

if codon == 'AUG':
    print('This codon is the start codon.')
34/36:
my_list_1 = [1, 2, 3, 4]
type(my_list_1)
34/37:
my_list_2 = [1, 2.4, 'a string', ['a string in another list', 5]]
my_list_2
34/38: type(my_list_2)
34/39: my_list_2
34/40: my_list_1
34/41:
my_list_3 = [2+3, 5*3, 4**2]
my_list_3
34/42: type(my_list_3
34/43: type(my_list_3)
34/44:
my_list = [1, 2.4, 'a string', ['a string in another list', 5]]

my_list[1]
34/45: my_list[2]
34/46: my_list[0]
34/47: my_list[3]
34/48: a=my_list[3]
34/49: a[1]
34/50: a=my_list[3[1]]
34/51: a=my_list[3]
34/52: list2 = [1,2,"3",[1,2,"3"]]
34/53: list2[-1]
34/54: 1:3
34/55: [1:3]
34/56: list3=[0,1,2,3,4,5,6,7,8,9,10]
34/57: list3[3]
34/58: list3[3:1000000]
34/59: list3[3:10]
34/60: list3[3:-10]
34/61: list3[3:-1]
34/62: list3[3:-3]
34/63: list3[1::2]
34/64: list3[1::3]
34/65: id(a)
34/66: id(list)
34/67: id(list[1])
34/68: id(list[2])
34/69: id(list[3])
34/70: id(list[0])
34/71: id(list)
34/72: list
34/73: print(list)
34/74: list3
34/75: id(list3)
34/76: id(list3[1])
34/77:
list3
id(list3)
list3=zero
list3
id(list3)
34/78:
list3
id(list3)
list3 = zero
list3
id(list3)
34/79:
list3
id(list3)
list3 = 'zero'
list3
id(list3)
34/80: list3
34/81: id(list3)
34/82:
print(id(my_list))

my_list[0] = 'zero'
print(id(my_list))
34/83:
print(id(my_list))

my_list[0] = 'y10'
print(id(my_list))
34/84:
print(id(my_list))

my_list = 'y10'
print(id(my_list))
34/85:
my_list = [1, 2.4, 'a string', ['a sting in another list', 5]]

my_tuple = tuple(my_list)

my_tuple
34/86:

type(my_tuple), type(not_a_tuple)
34/87:

type(my_tuple)
34/88: my_tuple
34/89:
my_tuple[3][0] = 'a string in a list in a tuple'

my_tuple
34/90:
my_tuple[3][1] = 'a string in a list in a tuple'

my_tuple
34/91:
my_tuple[1][1] = 'a string in a list in a tuple'

my_tuple
34/92: my_tuple[1][1]
34/93: my_tuple[1]
34/94: my_tuple[1]
34/95: my_tuple[2]
34/96: my_tuple[3]
34/97: my_tuple[4]
34/98:
my_list = [1, 2.4, 'a string', ['a sting in another list', 5]]

my_tuple = tuple(my_list)

my_tuple
34/99: my_tuple[1] = 7
34/100: my_tuple[1] = '2'
34/101:
my_tuple = (1, 2, 3)
(a, b, c) = my_tuple

a
34/102: my_tuple
34/103: my_tuple = (1,2,3,4,)
34/104: my_tuple
34/105: my_tuple[1]
34/106: my_tuple[1] =2
34/107: my_tuple[1] = 2
34/108: my_tuple[1] = '2'
34/109: a
34/110: b
34/111: c
34/112: d
34/113: my_tuple = (1,2,3,4,5,6,7)
34/114: (a,b,c,d,e,f) = my_tuple
34/115: (a,b,c,d,e,f,g) = my_tuple
34/116: g
34/117: g=4
34/118: my_tuple
34/119: g
34/120: a
34/121: b
34/122: c
34/123: d
34/124: e
34/125: f
34/126: g
34/127: my_tuple
34/128:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'GCgc':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
35/1:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'GC':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/129:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'gc':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/130:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'gcGC':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/131:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'gcg':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/132:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'GCCC':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/133:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'GCGA':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/134:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'GA':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/135:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'G':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/136:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for base in seq:
    len_seq += 1
    if base in 'GACU':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/137:
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'

# Initialize GC counter
n_gc = 0

# Initialize sequence length
len_seq = 0

# Loop through sequence and count G's and C's
for i in seq:
    len_seq += 1
    if i in 'GCgc':
        n_gc += 1

# Divide to get GC content
n_gc / len_seq
34/138: range(1:10)
34/139: range(1,10)
34/140:
print(range(1,10)
     )
34/141: print(range(1,10))
34/142: print(range(110))
34/143: range(10)
34/144: tuple(range(10))
34/145: list(range(10))
34/146:
my_integers = [1, 2, 3, 4, 5]

# Double each one
for i, _ in enumerate(my_integers):
    my_integers[i] *= 2

# Check out the result
my_integers
34/147: enumerate(my_integers)
34/148: print(enumerate(my_integers))
34/149:
a=
enumerate(my_integers)
34/150: a=enumerate(my_integers)
34/151: a
34/152: len(my_integers)
34/153: for i, base in enumerate(my_integers): print(i,base)
34/154: for i, b in enumerate(my_integers): print(i,b)
34/155: for i, b in enumerate(my_integers): print(i)
34/156: for i, in enumerate(my_integers): print(i)
34/157: for i in enumerate(my_integers): print(i)
34/158: base
34/159:
my_integers = [1, 2, 3, 4, 5]

# Double each one
for i, _ in enumerate(my_integers):
    my_integers[i] *= 2

# Check out the result
my_integers
34/160:
def ratio(x, y):
    """The ratio of `x` to `y`."""
    return x / y
34/161: ratio(2,2)
34/162: ratio(2,3)
34/163: help ratio
34/164: help(ratio)
34/165: ratio?
34/166:
def answer_to_the_ultimate_question_of_life_the_universe_and_everything():
    """Simpler program than Deep Thought's, I bet."""
    return 42
34/167: answer_to_the_ultimate_question_of_life_the_universe_and_everything()
34/168:
def complement_base(base):
    """Returns the Watson-Crick complement of a base."""
    if base in 'Aa':
        return 'T'
    elif base in 'Tt':
        return 'A'
    elif base in 'Gg':
        return 'C'
    else:
        return 'G'


def reverse_complement(seq):
    """Compute reverse complement of a sequence."""
    # Initialize reverse complement
    rev_seq = ''

    # Loop through and populate list with reverse complement
    for base in reversed(seq):
        rev_seq += complement_base(base)

    return rev_seq
34/169: reverse_complement('GCAGTTGCA')
34/170:
def display_complements(seq):
    """Print sequence above its reverse complement."""
    # Compute the reverse complement
    rev_comp = reverse_complement(seq)

    # Print template
    print(seq)

    # Print "base pairs"
    for base in seq:
        print('|', end='')

    # Print final newline character after base pairs
    print()

    # Print reverse complement
    for base in reversed(rev_comp):
        print(base, end='')

    # Print final newline character
    print()
34/171:
seq = 'GCAGTTGCA'
display_complements(seq)
34/172:
my_str = 'The Dude abides.'

print(my_str[5])
print(my_str[:6])
print(my_str[::2])
print(my_str[::-1])
34/173: my_str[2]
34/174: my_str[2:1]
34/175: my_str[2:22]
34/176: my_str[2:22:1]
34/177: my_str[2:22:2]
34/178: my_str.count('e')
34/179: my_str.count('ed')
34/180: my_str
34/181: my_str.count('ab')
34/182: my_str
34/183: my_str.find('ab')
34/184: my_str.find('abbb|b')
34/185: my_str.find('e')
34/186: my_str
34/187: my_str.replace('Dude', 'Prude')
34/188: my_str
34/189: my_str.replace('Dude', 'Kind')
34/190: my_str.replace('Dude', 'King')
34/191: my_str2 = my_str.replace('Dude', 'King')
34/192: my_str2
34/193: joing(my_str,my_str2)
34/194: join(my_str,my_str2)
34/195: ''.join(my_str,my_str2)
34/196: ''.join(my_str)
34/197: tuple
34/198: list
34/199: my_list
34/200: ''.join(my_list)
34/201: my_tuple
34/202: ''.join(my_tuple)
34/203: words_tuple =('hello', 'world')
34/204: join(words_tuple,words_tuple)
34/205: ''.join(words_tuple,words_tuple)
34/206: ''.join(words_tuple)
34/207: '   '.join(words_tuple)
34/208:
words_tuple =('hello', 'world','!!!
              ')
34/209: words_tuple =('hello', 'world','!!!              ')
34/210: '   '.join(words_tuple)
34/211: words_tuple.join(' ')
34/212: words_tuple.join('saf ')
35/2:
my_str = """
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='truculent', plural_noun='haircuts')

print(my_str)
35/3:
my_str = """
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='sageghg', plural_noun='haircuts')

print(my_str)
35/4:
my_str = """
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')

print(my_str)
35/5: mystr
35/6: my_str
35/7: my_str.format()
35/8: my_str.format( )
35/9: my_str=my_str.format( )
35/10: my_str=my_str.format( )
35/11:
"""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')

print(my_str)
35/12:
my_str="""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
"""

my_str.format(adjective='happy', plural_noun='bananas')
35/13:
my_str="""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')
35/14:
my_str="""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')
35/15:
"""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')
35/16:
"""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')

print(my_str)
35/17:
my_str="""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')

print(my_str)
35/18:
my_str="""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')
35/19:
my_str=
"""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')
35/20:
my_str"""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')
35/21:
my_str="""
Let's do a Mad Lib!
During this bootcamp, I feel {adjective}.
The instructors give us {plural_noun}.
""".format(adjective='happy', plural_noun='bananas')
37/1:
print('There are {n:d} states in the US.'.format(n=50))
print('Your file number is {n:d}.'.format(n=23))
print('π is approximately {pi:f}.'.format(pi=3.14))
print('e is approximately {e:.8f}.'.format(e=2.7182818284590451))
print("Avogadro's number is approximately {N_A:e}.".format(N_A=6.022e23))
print('ε₀ is approximately {eps_0:.16e} F/m.'.format(eps_0=8.854187817e-12))
print('That {thing:s} really tied the room together.'.format(thing='rug'))
37/2:
print('There are {n:d} states in the US.'.format(n=50))
print('Your file number is {n:d}.'.format(n=23))
print('π is approximately {pi:f}.'.format(pi=3.14))
print('e is approximately {e:.8f}.'.format(e=2.7182818284590451))
print("Avogadro's number is approximately {N_A:e}.".format(N_A=6.022e23))
print('ε₀ is approximately {eps_0:.16e} F/m.'.format(eps_0=8.854187817e-12))
print('That {thing:s} really tied the room together.'.format(thing='rug'))
37/3: print=('pi is approximately{pi:2f}).format(pi=3.14159265359)
37/4: print=('pi is approximately{pi:2f}).format(pi=3.14159265359))
37/5: print('pi is approximately{pi:2f}).format(pi=3.14159265359)
37/6: print('pi is approximately {pi:2f}).'format(pi=3.14159265359)
37/7: print('pi is approximately {pi:2f}).'format(pi=3.14159265359))
37/8: print('pi is approximately {pi:2f})'.format(pi=3.14159265359)
37/9: print('pi is approximately {pi:2f})'.format(pi=3.14159265359))
37/10: print('π is approximately {pi:f}.'.format(pi=3.14))
37/11: print('pi is approximately {pi:2f})'.format(pi=3.14159265359)
37/12: print('pi is approximately {pi:2f})'.format(pi=3.14159265359))
37/13: print('π is approximately {pi:f}.'.format(pi=3.14)
37/14: print('π is approximately {pi:f}.'.format(pi=3.14))
37/15: print('pi is approximately {pi:f})'.format(pi=3.14159265359))
37/16: print('π is approximately {pi:2f}.'.format(pi=3.14))
37/17: print('π is approximately {pi:.2f}.'.format(pi=3.14))
37/18: print('pi is approximately {pi:f}).'.format(pi=3.14159265359))
37/19: print('pi is approximately {pi:.2f}).'.format(pi=3.14159265359))
37/20: print('pi is approximately {pi:.2f}.'.format(pi=3.14159265359))
37/21: name = ('jeffrey', 'lebowski')
37/22: name[1]
37/23:
my_dict = {'a': 6, 'b': 7, 'c': 27.6}
my_dict
37/24: a
37/25:

my_dict[1]
37/26: my_dict
36/1: dict(a='yes', b='no', c='maybe')
36/2:
my_dict = {
    0: 'zero',
    1.7: [1, 2, 3],
    (5, 6, 'dummy string'): 3.14,
    'strings are immutable': 42
}

my_dict
36/3:
aa_dict = {
    "A": "Ala",
    "R": "Arg",
    "N": "Asn",
    "D": "Asp",
    "C": "Cys",
    "Q": "Gln",
    "E": "Glu",
    "G": "Gly",
    "H": "His",
    "I": "Ile",
    "L": "Leu",
    "K": "Lys",
    "M": "Met",
    "F": "Phe",
    "P": "Pro",
    "S": "Ser",
    "T": "Thr",
    "W": "Trp",
    "Y": "Tyr",
    "V": "Val",
}
36/4: aa_dict
36/5: dict(a=1,b=2,c=3)
36/6: d=dict(a=1,b=2,c=3)
36/7: d[a]
36/8: d['a']
36/9: d['b']
36/10:
# The set of DNA bases
bases = ['T', 'C', 'A', 'G']

# Build list of codons
codon_list = []
for first_base in bases:
    for second_base in bases:
        for third_base in bases:
            codon_list += [first_base + second_base + third_base]

# The amino acids that are coded for (* = STOP codon)
amino_acids = 'FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG'

# Build dictionary from tuple of 2-tuples (technically an iterator, but it works)
codons = dict(zip(codon_list, amino_acids))

# Show that we did it
print(codons)
36/11: codon_list
36/12: amino_acids
36/13: codons
36/14:
# The set of DNA bases
bases = ['T', 'C', 'A', 'G']

# Build list of codons
codon_list = []
for first_base in bases:
    for second_base in bases:
        for third_base in bases:
            codon_list += [first_base + second_base + third_base]
36/15: codon_list
36/16: 2**4
36/17: len(codon_list)
36/18: 4^2
36/19: 4**4
36/20: 4**2
36/21: 4*3*2*1
36/22: 4!
36/23: codon_list
36/24: 4*4*4
36/25: codon_list
36/26: len(amino_acids
36/27: len(amino_acids)
36/28: codons = dict(zip(codon_list, amino_acids))
36/29:

hash('á')
36/30:

hash('á')
36/31:

hash('a')
36/32:
my_dict = dict(a=1, b=2, c=3, d=4)

my_dict.keys()
36/33: sorted(list(my_dict.keys()))
36/34: my_dict.pop('c')
36/35: my_dict.pop(d)
36/36: my_dict
36/37: my_dict.values()
36/38: s=[1,2,3,4,5]
36/39: type(s)
36/40: s[1]
36/41: s.pop(1)
36/42: s
36/43:

s.append(s)
36/44: s
36/45: s[4]
36/46: type(s)
36/47: s[1]
36/48: s[2]
36/49: s[3]
36/50: s[4]
36/51: s[4[4]]
36/52: s[4][1]
36/53: s[4][4]
36/54: s[4][4][4]
36/55: s[4][4][4][4]
36/56: s.pop(4)
36/57: s
36/58:

s.append(s)
36/59: s
36/60: s.revers(s[4][4])
36/61: s.revers([4][4])
36/62: s.revers(4)
36/63: s.reverse(4)
36/64: s.reverse()
36/65: s
36/66: s[0]
40/1: pip install virtualenv
40/2: python3.8 -m venv env
40/3: cd projectA
40/4: mkdir projectA
40/5: cd projectA
40/6: cd..
40/7: cd ..
40/8: python -m venv env
40/9: python3.10 -m venv env
40/10: python -m venv venv
40/11: python -m venv a
40/12: -m venv env
40/13: pip install virtualenv
40/14: virtualenv -p python3 mytest
40/15: virtualenv -p python3.10 mytest
40/16: virtualenv -p python mytest
41/1: source venv/bin/activate
43/1:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
43/2:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
43/3:
print(len(model.reactions))
print(len(model.metabolites))
print(len(model.genes))
43/4: import cobra
43/5:
import cobra
from cobra.io import load_model
43/6: model =load_model("textbook")
44/1:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
45/1: from cobra import Model, Reaction, Metabolite
45/2:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
45/3: from cobra import Model, Reaction, Metabolite
47/1: from cobra import Model, Reaction, Metabolite
47/2:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
47/3:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
47/4:
ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    'M3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
47/5:
ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    'M3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
47/6:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
47/7: from cobra import Model, Reaction, Metabolite
47/8:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
47/9:
ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    'M3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
47/10:
reaction.add_metabolites({
    malACP_c: -1.0,
    h_c: -1.0,
    ddcaACP_c: -1.0,
    co2_c: 1.0,
    ACP_c: 1.0,
    omrsACP_c: 1.0
})

reaction.reaction  # This gives a string representation of the reaction
50/1:
from cobra import Model, Reaction, Metabolite

model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
50/2:


ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    'M3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
50/3:
reaction.add_metabolites({
    malACP_c: -1.0,
    h_c: -1.0,
    ddcaACP_c: -1.0,
    co2_c: 1.0,
    ACP_c: 1.0,
    omrsACP_c: 1.0
})

reaction.reaction  # This gives a string representation of the reaction
52/1: from cobra import Model, Reaction, Metabolite
52/2:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
52/3:
ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    'M3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
52/4:
reaction.add_metabolites({
    malACP_c: -1.0,
    h_c: -1.0,
    ddcaACP_c: -1.0,
    co2_c: 1.0,
    ACP_c: 1.0,
    omrsACP_c: 1.0
})

reaction.reaction  # This gives a string representation of the reaction
52/5:
reaction.gene_reaction_rule = '( STM2378 or STM1197 )'
reaction.genes
52/6:
print(f'{len(model.reactions)} reactions initially')
print(f'{len(model.metabolites)} metabolites initially')
print(f'{len(model.genes)} genes initially')
52/7:
model.add_reactions([reaction])

# The objects have been added to the model
print(f'{len(model.reactions)} reactions')
print(f'{len(model.metabolites)} metabolites')
print(f'{len(model.genes)} genes')
52/8:
# Iterate through the the objects in the model
print("Reactions")
print("---------")
for x in model.reactions:
    print("%s : %s" % (x.id, x.reaction))

print("")
print("Metabolites")
print("-----------")
for x in model.metabolites:
    print('%9s : %s' % (x.id, x.formula))

print("")
print("Genes")
print("-----")
for x in model.genes:
    associated_ids = (i.id for i in x.reactions)
    print("%s is associated with reactions: %s" %
          (x.id, "{" + ", ".join(associated_ids) + "}"))
52/9: model.objective = 'R_3OAS140'
53/1:
from cobra import Model, Reaction, Metabolite

model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
53/2:


ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    'M3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
53/3:
reaction.add_metabolites({
    malACP_c: -1.0,
    h_c: -1.0,
    ddcaACP_c: -1.0,
    co2_c: 1.0,
    ACP_c: 1.0,
    omrsACP_c: 1.0
})

reaction.reaction  # This gives a string representation of the reaction
53/4:
reaction.add_metabolites({
    malACP_c: -1.0,
    h_c: -1.0,
    ddcaACP_c: -1.0,
    co2_c: 1.0,
    ACP_c: 1.0,
    omrsACP_c: 1.0
})

reaction.reaction  # This gives a string representation of the reaction
54/1: model
55/1: from cobra import Model, Reaction, Metabolite
55/2:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
54/2: model
55/3:
ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    'M3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
59/1: from cobra import Model, Reaction, Metabolite
59/2:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
60/1: cobra.io.load_matlab_model('recon3D.mat')
60/2:
mini_mat_path = data_dir / "recon3D.mat"
load_matlab_model(
    str(mini_mat_path.resolve()),
    variable_name="mini_textbook",
)
60/3:
mini_mat_path = data_dir / "recon3D.mat"
load_matlab_model(
    str(mini_mat_path.resolve()),
    variable_name="recon3D",
)
60/4: load_matlab_model('recon3D.mat')
60/5:
load_matlab_model('recon3D.mat')

mini_mat_path = data_dir / "mini.mat"
load_matlab_model(
    str(mini_mat_path.resolve()),
    variable_name="mini_textbook",
)
58/1: mini_mat_path = data_dir / "Recon3DModel_301.mat"
60/6:
from pathlib import Path
from cobra.io import load_json_model_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging
60/7: from pathlib import Path
60/8: from pathlib import Path
60/9: from pathlib import Path
60/10: from cobra.io import load_matlab_model, save_matlab_model
60/11: import logging
60/12: data_dir = Path(".") / ".." / "src" / "cobra" / "data"
60/13: data_dir = data_dir.resolve()
60/14:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
60/15:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging
data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
60/16:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
60/17: print(data_dir)
60/18:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
60/19:
from pathlib import Path
from cobra.io import load_json_model_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
60/20:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
60/21: print(data_dir.glob('mini*.*'))
60/22: .join(str(i) for i in data_dir.glob('mini*.*'))
60/23: print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
60/24: data_dir.glob('mini*.*')
61/1:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
61/2: print(model)
61/3: model
61/4:
pgi = model.reactions.get_by_id("PGI")
pgi
61/5:
print(pgi.name)
print(pgi.reaction)
61/6:
old_bounds = pgi.bounds
pgi.bounds = (0, 1000.0)
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print("Reversibility after modification:", pgi.reversibility)
pgi.bounds = old_bounds
print("Reversibility after resetting:", pgi.reversibility)
61/7:
old_bounds = pgi.bounds
pgi.bounds = (1, 1000.0)
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print("Reversibility after modification:", pgi.reversibility)
pgi.bounds = old_bounds
print("Reversibility after resetting:", pgi.reversibility)
61/8:
old_bounds = pgi.bounds
pgi.bounds = (-1, 1000.0)
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print("Reversibility after modification:", pgi.reversibility)
pgi.bounds = old_bounds
print("Reversibility after resetting:", pgi.reversibility)
61/9:
old_bounds = pgi.bounds
pgi.bounds = (0, 1000.0)
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print("Reversibility after modification:", pgi.reversibility)
pgi.bounds = old_bounds
print("Reversibility after resetting:", pgi.reversibility)
61/10:
old_bounds = pgi.bounds
pgi.bounds = (-.0000000001, 1000.0)
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print("Reversibility after modification:", pgi.reversibility)
pgi.bounds = old_bounds
print("Reversibility after resetting:", pgi.reversibility)
61/11:
old_bounds = pgi.bounds
pgi.bounds = (0, 1000.0)
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print("Reversibility after modification:", pgi.reversibility)
pgi.bounds = old_bounds
print("Reversibility after resetting:", pgi.reversibility)
61/12:
old_bounds = pgi.bounds
print('Upper bound prior to setting new lower bound:', pgi.upper_bound)
pgi.lower_bound = 1100
print('Upper bound after setting new lower bound:', pgi.upper_bound)
pgi.bounds = old_bounds
61/13:
old_bounds = pgi.bounds
print('Upper bound prior to setting new lower bound:', pgi.upper_bound)
pgi.lower_bound = 0
print('Upper bound after setting new lower bound:', pgi.upper_bound)
pgi.bounds = old_bounds
61/14:
old_bounds = pgi.bounds
pgi.bounds = (0, 1000.0)
print(pgi.lower_bound, "< pgi <", pgi.upper_bound)
print("Reversibility after modification:", pgi.reversibility)
pgi.bounds = old_bounds
print("Reversibility after resetting:", pgi.reversibility)
61/15: pgi.check_mass_balance()
61/16:
pgi.add_metabolites({model.metabolites.get_by_id("h_c"): -1})
pgi.reaction
61/17: pgi.check_mass_balance()
61/18:
pgi.subtract_metabolites({model.metabolites.get_by_id("h_c"): -1})
print(pgi.reaction)
print(pgi.check_mass_balance())
61/19:
atp = model.metabolites.get_by_id("atp_c")
atp
60/25:

cobra.io.load_matlab_model('recon3D.mat')
60/26: .cobra.io.load_matlab_model('recon3D.mat')
60/27: load_matlab_model('recon3D.mat')
60/28: load_matlab_model('recon3D.mat')
60/29: load_matlab_model('recon3D.mat')
63/1: load_matlab_model('recon3D.mat')
63/2:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging
data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
63/3:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
63/4: print(data_dir)
63/5:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
63/6: load_matlab_model('recon3D.mat')
63/7: load_matlab_model("C:\Users\prins\git\cobratoolbox\papers\2020_WholeBodyModelling\Data\Recon3D_star\Recon3DModel_301.mat")
63/8: load_matlab_model("C:\Users\prins\git\cobratoolbox\papers\2020_WholeBodyModelling\Data\Recon3D_star\Recon3DModel_301.mat")
66/1:
from pathlib import Path
from cobra.io import load_json_model_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
66/2:
mini_fbc2_path = data_dir / "mini_fbc2.xml"
read_sbml_model(str(mini_fbc2_path.resolve()))
63/9:
from pathlib import Path
from cobra.io import load_json_model_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
63/10:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
63/11:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
63/12:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
63/13:

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
62/1: data_dir
62/2: data_dir = Path(".") / ".." / "src" / "cobra" / "data"
62/3: Path
62/4:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
62/5: print(data_dir)
63/14:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)


print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
62/6: data_dir.glob('mini*.*')
62/7: data_dir.glob()
62/8: data_dir.glob
63/15:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('')))
63/16:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob()))
62/9: join(str(i) for i in data_dir.glob('mini*.*'))
62/10:
myTuple = ("John", "Peter", "Vicky")

x = "#".join(myTuple)

print(x)
62/11: print(data_dir)
62/12: import glob
62/13: join(str(i) for i in data_dir.glob('mini*.*'))
63/17:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
63/18:
textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
63/19: textbook_model = load_model("textbook")
63/20: ecoli_model = load_model("iJO1366")
63/21:
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
63/22:
from pathlib import Path
from cobra.io import load_model  load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)
63/23:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)
63/24:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
63/25: textbook_model = load_model("textbook")
63/26: ecoli_model = load_model("iJO1366")
63/27:
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
63/28:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)
63/29:
print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
63/30: textbook_model = load_model("textbook")
63/31: ecoli_model = load_model("iJO1366")
63/32:
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
63/33:
mini_fbc2_path = data_dir / "mini_fbc2.xml"
read_sbml_model(str(mini_fbc2_path.resolve()))
63/34:
mini_fbc2_path = data_dir / "mini_cobra.xml"
read_sbml_model(str(mini_fbc2_path.resolve()))
63/35:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
63/36:
textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
63/37:
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
63/38:
mini_fbc2_path = data_dir / "mini_cobra.xml"
read_sbml_model(str(mini_fbc2_path.resolve()))
63/39:
mini_fbc2_path = data_dir / "mini_cobra.xml"
read_sbml_model(str(mini_fbc2_path.resolve()))
63/40:
mini_fbc2_path = data_dir / "mini_cobra.xml"
print(mini_fbc2_path)
read_sbml_model(str(mini_fbc2_path.resolve()))
63/41:
mini_fbc2_path = data_dir / "mini_cobra.xml"
print(mini_fbc2_path)
read_sbml_model(str(mini_fbc2_path.resolve()))
load_model(mini_fbc2_path)
63/42:
mini_fbc2_path = data_dir / "mini_cobra.xml"
print(mini_fbc2_path)

load_model(mini_fbc2_path)
69/1:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
69/2:
textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
69/3:
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
69/4:
mini_fbc2_path = data_dir / "mini_cobra.xml"
print(mini_fbc2_path)
read_sbml_model(str(mini_fbc2_path.resolve()))
load
73/1:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
73/2:
textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
73/3:
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
73/4:
mini_fbc2_path = data_dir / "mini_cobra.xml"
print(mini_fbc2_path)
read_sbml_model(str(mini_fbc2_path.resolve()))
load
73/5:
mini_fbc2_path = "C:/Users/prins/git/cobrapy/src/cobra/mini_cobra.xml"
print(mini_fbc2_path)
read_sbml_model(str(mini_fbc2_path.resolve()))
load
73/6:
mini_fbc2_path = "C:/Users/prins/git/cobrapy/src/cobra/mini_cobra.xml"
print(mini_fbc2_path)
read_sbml_model(mini_fbc2_path.resolve())
load
73/7:
mini_fbc2_path = "C:/Users/prins/git/cobrapy/src/cobra/mini_cobra.xml"
print(mini_fbc2_path)
read_sbml_model(mini_fbc2_path)
load
73/8:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "..." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
73/9:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "..." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
71/1:
data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)
71/2: from pathlib import Path
71/3:
data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)
71/4:
data_dir = Path(".") / "..." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)
71/5:
data_dir = Path(".")
data_dir = data_dir.resolve()

print(data_dir)
71/6:
data_dir = Path("..")
data_dir = data_dir.resolve()

print(data_dir)
71/7:
data_dir = Path("...")
data_dir = data_dir.resolve()

print(data_dir)
71/8:
data_dir = Path("....")
data_dir = data_dir.resolve()

print(data_dir)
71/9:
data_dir = Path()
data_dir = data_dir.resolve()

print(data_dir)
71/10:
data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)
73/10:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
73/11:
textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
73/12:
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
73/13:
mini_fbc2_path = "C:/Users/prins/git/cobrapy/src/cobra/mini_cobra.xml"
print(mini_fbc2_path)
read_sbml_model(mini_fbc2_path)
load
73/14:
mini_fbc2_path = data_dir / "mini_fbc2.xml"
read_sbml_model(str(mini_fbc2_path.resolve()))
73/15:
mini_fbc2_path = data_dir / "mini_fbc2.xml"
read_sbml_model(str(mini_fbc2_path.resolve()))
73/16:
mini_fbc2_path = data_dir / "Recon3D.xml"
read_sbml_model(str(mini_fbc2_path.resolve()))
73/17:
mini_fbc2_path = data_dir / "Recon3D.mat"
read_mat_model(str(mini_fbc2_path.resolve()))
73/18:
mini_fbc2_path = data_dir / "Recon3D.mat"
load_matlab_model(str(mini_fbc2_path.resolve()))
73/19:
mini_fbc2_path = data_dir / "Recon3DModel_301.mat"
load_matlab_model(str(mini_fbc2_path.resolve()))
73/20: model
73/21: model
73/22: Recon3DModel_301
73/23:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)
73/24:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")
73/25:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")
print(data_dir)
73/26:
from pathlib import Path
from cobra.io import load_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging
73/27:
model_path = "C:\Users\prins\git\COBRA_project_SP\Recon3D model\Recon3DModel_301.mat"
model = load_matlab_model(model_path)
73/28:
model_path = "C:/Users/prins/git/COBRA_project_SP/Recon3D model/Recon3DModel_301.mat"
model = load_matlab_model(model_path)
76/1: from cobra import Model, Reaction, Metabolite
76/2:
model = Model('example_model')

reaction = Reaction('R_3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
76/3:
ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    'M3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
76/4:
reaction.add_metabolites({
    malACP_c: -1.0,
    h_c: -1.0,
    ddcaACP_c: -1.0,
    co2_c: 1.0,
    ACP_c: 1.0,
    omrsACP_c: 1.0
})

reaction.reaction  # This gives a string representation of the reaction
76/5:
reaction.gene_reaction_rule = '( STM2378 or STM1197 )'
reaction.genes
76/6:
print(f'{len(model.reactions)} reactions initially')
print(f'{len(model.metabolites)} metabolites initially')
print(f'{len(model.genes)} genes initially')
76/7:
model.add_reactions([reaction])

# The objects have been added to the model
print(f'{len(model.reactions)} reactions')
print(f'{len(model.metabolites)} metabolites')
print(f'{len(model.genes)} genes')
76/8:
# Iterate through the the objects in the model
print("Reactions")
print("---------")
for x in model.reactions:
    print("%s : %s" % (x.id, x.reaction))

print("")
print("Metabolites")
print("-----------")
for x in model.metabolites:
    print('%9s : %s' % (x.id, x.formula))

print("")
print("Genes")
print("-----")
for x in model.genes:
    associated_ids = (i.id for i in x.reactions)
    print("%s is associated with reactions: %s" %
          (x.id, "{" + ", ".join(associated_ids) + "}"))
76/9: model.objective = 'R_3OAS140'
76/10:
print(model.objective.expression)
print(model.objective.direction)
76/11:
import tempfile
from pprint import pprint
from cobra.io import write_sbml_model, validate_sbml_model
with tempfile.NamedTemporaryFile(suffix='.xml') as f_sbml:
    write_sbml_model(model, filename=f_sbml.name)
    report = validate_sbml_model(filename=f_sbml.name)

pprint(report)
76/12:
print("exchanges", model.exchanges)
print("demands", model.demands)
print("sinks", model.sinks)
76/13:
model.add_metabolites([
    Metabolite(
    'glycogen_c',
    name='glycogen',
    compartment='c'
    ),
    Metabolite(
    'co2_e',
    name='CO2',
    compartment='e'
    ),
])
76/14:
# create exchange reaction
model.add_boundary(model.metabolites.get_by_id("co2_e"), type="exchange")
76/15:
# create exchange reaction
model.add_boundary(model.metabolites.get_by_id("glycogen_c"), type="sink")
76/16:
# Now we have an additional exchange and sink reaction in the model
print("exchanges", model.exchanges)
print("sinks", model.sinks)
print("demands", model.demands)
76/17:
# boundary reactions
model.boundary
76/18:
# metabolic reactions
set(model.reactions) - set(model.boundary)
80/1: from cobra.io import load_json_model_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
81/1:
from pathlib import Path
from cobra.io import load_json_model_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
81/2:
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
81/3:
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
81/4:
from pathlib import Path
from cobra.io import load_model load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
81/5:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR) # salmonella leads to lots of warnings without this line
salmonella_model = load_model("salmonella")
81/6:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/7:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/8:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path("..") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/9: Path(".")
81/10: print(Path("."))
81/11:
data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)
81/12:
data_dir = Path(".") / "data"
data_dir = data_dir.resolve()

print(data_dir)
81/13:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/14:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/15:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path("/data")
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/16:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(."/data")
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/17:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/18:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")  / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/19:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/20:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "cobra" / "data"
data_dir = data_dir.resolve()
data_dir = Path(".") / "cobra" / "data"
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/21:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/22:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")  / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/23:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")  / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/24:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")  / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/25:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")  / "src" / "cobra" / "data"
data_dir = data_dir.resolve(/ "src" / "cobra" / "data")

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/26:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")  / "src" / "cobra" / "data"
data_dir = data_dir.resolve( "src" / "cobra" / "data")

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/27:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")  / "src" / "cobra" / "data"
data_dir = data_dir.resolve( "src/cobra/data")

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/28:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")/ ..  / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/29:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()


print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/30:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
 p = pathlib.Path('cobra/data')

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/31:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
p = pathlib.Path('cobra/data')

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/32:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

p = Path('cobra/data')

print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/33:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

p = Path('cobra/data')

print(p)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/34:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

p = Path('cobra/data')

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/35:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = "src" / "cobra" / "data"
data_dir = data_dir.resolve()

p = Path('cobra/data')

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/36:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = {"src" / "cobra" / "data"}
data_dir = data_dir.resolve()

p = Path('cobra/data')

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/37:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = ("src" / "cobra" / "data")
data_dir = data_dir.resolve()

p = Path('cobra/data')

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/38: Path(.)
81/39: print(Path("."))
81/40: print(Path(".")/"src")
81/41: print(Path(".")/"src"/"cobra")
81/42: print(Path(".")/"src"/"cobra"/"data")
81/43:
data_dir = Path(".")/"src"/"cobra"/"data"
data_dir = data_dir.resolve()
81/44:
data_dir = Path(".")/"src"/"cobra"/"data"
data_dir = data_dir.resolve()
print(data_dir)
81/45:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path("..")/"src"/"cobra"/"data"
data_dir = data_dir.resolve()

p = Path('cobra/data')

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/46:
data_dir = Path("..")/"src"/"cobra"/"data"
data_dir = data_dir.resolve()
print(data_dir)
81/47:
data_dir = Path("...")/"src"/"cobra"/"data"
data_dir = data_dir.resolve()
print(data_dir)
81/48:
data_dir = Path("src")/"cobra"/"data"
data_dir = data_dir.resolve()
print(data_dir)
81/49:
data_dir = Path("cobra")/"cobra"/"data"
data_dir = data_dir.resolve()
print(data_dir)
81/50:
data_dir = "cobra"/"cobra"/"data"
data_dir = data_dir.resolve()
print(data_dir)
81/51:
data_dir = "src"/"cobra"/"data"
data_dir = data_dir.resolve()
print(data_dir)
81/52:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")/"src"/"cobra"/"data"
print(data_dir)
data_dir = data_dir.resolve()
print(data_dir)
p = Path('cobra/data')

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/53:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path("src"/"cobra"/"data")
print(data_dir)
data_dir = data_dir.resolve()

print(data_dir)

p = Path('cobra/data')

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/54:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")/"src"/"cobra"/"data"
print(data_dir)
data_dir = data_dir.absolute()

print(data_dir)

p = Path('cobra/data')

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/55:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")/"src"/"cobra"/"data"
print(data_dir)
data_dir = data_dir.absolute()
print(data_dir)

p = Path('cobra/data')
pathlib.Path.glob(p) 

print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
81/56:
data_dir = "src"/"cobra"/"data"
data_dir = data_dir.resolve()
print(data_dir)


print(pathlib.Path.glob(p))
81/57:



print(pathlib.Path.glob(p))
81/58:



print(Path.glob(p))
81/59: print(Path.glob('mini.mat'))
81/60: print("cobra/data".resolve())
81/61:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".")/"src"/"cobra"/"data"
print(data_dir)
data_dir = data_dir.absolute()
print(data_dir)


p = Path('cobra/data')


print(p)
print(Path('mini.mat').resolve())

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
82/1:
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)salmonella_model = load_model("salmonella")
82/2:
from pathlib import Path
from cobra.io import load_model load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)salmonella_model = load_model("salmonella")
82/3:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)salmonella_model = load_model("salmonella")
82/4:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)salmonella_model = load_model("salmonella")
82/5:
from pathlib import Path
from cobra.io import load_model, load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
82/6:

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)salmonella_model = load_model("salmonella")
82/7:

textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")
logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)
salmonella_model = load_model("salmonella")
82/8:
textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")

logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)
salmonella_model = load_model("salmonella")
82/9:
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
82/10:
textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")

logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)
salmonella_model = load_model("salmonella")
82/11:
mini_fbc2_path = data_dir / "mini_fbc2.xml" 
read_sbml_model(str(mini_fbc2_path.resolve()))
82/12: write_sbml_model(textbook_model, "test_fbc2.xml")
82/13:
mini_cobra_path = data_dir / "mini_cobra.xml" 
read_sbml_model(str(mini_cobra_path.resolve()))
82/14: write_sbml_model(textbook_model, "test_cobra.xml")
82/15:
mini_json_path = data_dir / "mini.json" 
load_json_model(str(mini_json_path.resolve()))
82/16: save_json_model(textbook_model, "test.json")
82/17:
mini_yml_path = data_dir / "mini.yml"
load_yaml_model(str(mini_yml_path.resolve()))
82/18: save_yaml_model(textbook_model, "test.yml")
82/19:
mini_mat_path = data_dir / "mini.mat"
load_matlab_model(
    str(mini_mat_path.resolve()),
    variable_name="mini_textbook",
)
82/20:
mini_mat_path = data_dir / "mini.mat"
load_matlab_model(str(mini_mat_path.resolve()))
82/21: save_matlab_model(textbook_model, "test.mat")
80/2:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

data_dir = Path(".") / ".." / "Recon3D_model"
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
80/3:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

data_dir = Path(".") / ".." / "Recon3D_model"
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
80/4:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

data_dir = Path(".") / ".." / "Recon3D_model"
filename = Recon3DModel_301.mat
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob(filename)))
80/5:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

data_dir = Path(".") / ".." / "Recon3D_model"
filename = "Recon3DModel_301.mat"
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob(filename)))
80/6:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

model_dir = Path(".") / ".." / "Recon3D_model" / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob(filename)))
80/7:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

model_dir = Path(".") / ".." / "Recon3D_model" / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob(filename)))
80/8:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

model_dir = Path(".") / ".." / "Recon3D_model" / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)
80/9:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

model_dir = Path(".") / ".." / "Recon3D_model" / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)
80/10:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

model_dir = Path(".") / ".." / "Recon3D_model" / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)
80/11:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

model_dir = Path(".") / ".." / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)
80/12:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

model_dir = Path(".") / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)
80/13: print(Path(__file__))
80/14: print(pahtlib.Path(__file__))
80/15: print(pathlib.Path(__file__))
80/16:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging

model_dir = Path(".") / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)
80/17: print(pathlib.Path(__file__))
80/18: print(pathlib.Path(__file__))
80/19:
print(os.getcwd())
print(sys.argv[0])
print(os.path.dirname(os.path.realpath('__file__')))
80/20: print(os.getcwd())
80/21: print(sys.argv[0])
80/22:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging

p = Path('.')
 list(p.glob('**/*.py'))
model_dir = Path(".") / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)
80/23:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging
p = Path('.')
list(p.glob('**/*.py'))
80/24:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging
p = Path('.')
list(p.glob('**/*'))
80/25:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging
p = Path('.')
list(p.glob('**/*'))


list(data_dir.glob('Recon3D*.*')))

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
80/26:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging
p = Path('.')
list(p.glob('**/*'))


list(data_dir.glob('Recon3D*.*'))

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
80/27:
p = Path('.')
 list(p.glob('**/*.py'))
model_dir = Path(".") / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)
80/28:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging
p = Path('.')
list(p.glob('**/*'))


list(data_dir.glob('Recon3D*.*'))
80/29:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging
p = Path('.')
list(p.glob('**/*'))
80/30:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging
p = Path('.')
print(list(p.glob('**/*')))
80/31:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging
p = Path('.')
list(p.glob('**/*'))
80/32: list(p.glob('Recon3D*.*'))
80/33: list(p.glob('Recon3D'))
80/34: list(p.glob('Recon3D**'))
80/35: list(p.glob('Recon3D/**'))
80/36:
q = p / 'Recon3D' 
q
80/37:
q = p / 'Recon3D' 
q.resolve()
80/38:
modelName = 'Recon3DModel_301.mat'

q = p / 'Recon3D' / modelName
q.resolve()
80/39:
modelName = 'Recon3DModel_301.mat'

q = p / modelName
q.resolve()
80/40:
p = Path('.')
 list(p.glob('**/*.py'))
model_dir = Path(".") / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
80/41:
modelName = 'Recon3DModel_301.mat'

q = p / 'Recon3D' / modelName
q.resolve()
80/42:
modelName = 'Recon3DModel_301.mat'

q = p / 'Recon3D_model' / modelName
q.resolve()
80/43:
modelName = 'Recon3DModel_301.mat'
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve()
80/44:
modelName = 'Recon3DModel_301.mat'
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve()
80/45:
modelName = 'Recon3DModel_301.mat'
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve()
print(filePath)
80/46:
modelName = 'Recon3DModel_301.mat'
filePath = Path('.') / '..' / modelName
filePath = filePath.resolve()
print(filePath)
80/47:
modelName = 'Recon3DModel_301.mat'
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve()
print(filePath)
80/48:
modelName = 'Recon3DModel_301.mat'
filePath = Path('.') / '**' / modelName
filePath = filePath.resolve()
print(filePath)
80/49:
p = Path('.')
 list(p.glob('**/*.py'))
model_dir = Path(".") / "Recon3DModel_301.mat"
model_dir = data_dir.resolve()
print(model_dir)

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
80/50:
modelName = 'Recon3DModel_301.mat'
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve()
print(filePath)
80/51:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat'
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve()
Recon3DModel_301 = load_matlab_model(filePath)
model = Recon3DModel_301
80/52: model.annotation
80/53: model
80/54: model.metabolites.get_by_id("atp_c")
80/55: model.metabolites.get_by_id("atp")
80/56: model.metabolites.get_by_id("atp_c_")
80/57: model.reactions[29]
80/58: pgi = model.reactions.get_by_id("25VITD3Hm")
80/59: pgi
80/60: model.reactions.get_by_id("25VITD3Hm")
80/61: check_mass_balance(model)
80/62: check_mass_balance("25VITD3Hm")
80/63:
pgi = model.reactions.get_by_id("PGI")
model.reactions.get_by_id("25VITD3Hm")
80/64:
pgi = model.reactions.get_by_id("PGI")
model.reactions.get_by_id("PGI")
80/65: model.check_mass_balance()
80/66: pgi.check_mass_balance()
80/67:
pgi = model.reactions.get_by_id("PGI")
model.reactions.get_by_id("PG*")
80/68:
pgi = model.reactions.get_by_id("PGI")
model.reactions.get_by_id("PG")
80/69:
pgi = model.reactions.get_by_id("PGI")
model.reactions.get_by_id("PGI")
80/70: model.reactions
80/71: groups
80/72: model.groups
80/73: model.reactions
80/74: model.reactions[0]
80/75: model.reactions[2]
80/76: model.reactions[1]
80/77: dir(model.reactions)
80/78: dir(model.metabolites)
80/79: dir(model.reactions[0])
80/80: dir(model.metabolites[0])
80/81: model.reactions[0].metabolites
80/82: list(model.reactions[0].metabolites.keys())[0]
80/83: dir(list(model.reactions[0].metabolites.keys())[0])
80/84: list(model.reactions[0].metabolites.keys())[0].id
80/85: list(model.reactions[0].metabolites.keys())[0].name
80/86:
type(model)
type(model.reactions)
type(model.metabolites)
80/87:
print(type(model))
print(type(model.reactions))
print(type(model.metabolites))
80/88: type(model.reactions[0])
80/89: type(model)
80/90: model.reactions.10FTHF5GLUtl
80/91: model.reactions[10FTHF5GLUtl]
80/92: model.reactions['10FTHF5GLUtl']
80/93: model.reactions
80/94: model.reactions.2HIBUPGLUC_Sthv
80/95: model.reactions[0]
80/96: model.reactions[0].reaction
80/97: list(model.reactions)
80/98: list(model.reactions)
80/99: dir(model.reactions)
75/1: dir()
80/100: dir()
80/101: dir(cobrapy)
80/102:
import cobra
dir(cobrapy)
80/103:
import cobra.io
dir(cobrapy)
80/104:
import cobra.io
dir(cobra)
80/105: dir(cobra)
80/106: dir(cobra.Object)
80/107: dir(cobra.Object.id)
80/108: dir(cobra.Object[1].id)
80/109: dir(cobra.Object[0])
80/110: dir(cobra.Object)
80/111: dir(cobra.Object.mro)
80/112: (cobra.Object.mro[0])
80/113: dir(cobra.Object.mro)
80/114: dir(cobra.DictList)
80/115: help(cobra.DictList)
80/116: help(model.reactions)
80/117: help(model.reactions)
80/118: help(model)
80/119: help(model.groups)
80/120: model.groups
80/121: model.groups[0]
80/122: model.reactions[0]
80/123: model.reactions
80/124: model.reactions.Reaction
80/125: model.reactions[0].reaction
80/126: model.metabolites[0].reaction
80/127: model.metabolites[0].Reaction
80/128: model.metabolites[0]
80/129: model.metabolites[0].Gene
80/130: model.reactions[0].Gene
80/131: model.reactions[0].reaction
80/132: model.genes[0].reaction
80/133: model.reactions[0].reaction
80/134: model.reactions[0].reactions
80/135: model.reactions[0].reaction
80/136:
dir(model.reactions)
model.reactions[0].metabolites
80/137:
model.reactions[0].reaction
model.reactions[0].metabolites
80/138: model.reactions[0].metabolites
80/139: dir(model.reactions)
80/140: model.reactions[0].metabolites.key
80/141: model.reactions[0].metabolites.keys
80/142: list(model.reactions[0].metabolites.keys())[0].name
80/143: (model.reactions[0].metabolites.keys())[0].name
80/144: list(model.reactions[0].metabolites.keys())[0].name
80/145: model.reactions[0].metabolites.keys()[0].name
80/146: model.reactions[0].metabolites.keys()
80/147: model.reactions[0].metabolites.names()
80/148: model.reactions[0].metabolites.name()
80/149: model.reactions[0].metabolites.keys()
80/150: model.reactions[0].metabolites.keys()
80/151: list(model.reactions[0].metabolites.keys())
80/152: list(model.reactions[0].metabolites.keys()).name
80/153: list(model.reactions[0].metabolites.keys())
80/154: list(model.reactions[0].metabolites.keys())[0]
80/155: list(model.reactions[0].metabolites.keys())
80/156: model.reactions[0]
80/157: model.reactions[0].name
80/158: model.reactions[0]
80/159: model.reactions[0].notes
80/160: model.reactions[0]
80/161: model.reactions[0].name
80/162: model.reactions[0].name
80/163: model.reactions[0].notes
80/164: list(model.reactions.name)
80/165: list(model.reactions[0:10])
80/166: type(model.reaction[0:10])
80/167: type(model.reaction[0])
80/168: type(model.reactions[0])
80/169:
print(type(model))
print(type(model.reactions))
print(type(model.reactions[0]))
print(type(model.metabolites))
80/170:
print(type(model))
print(type(model.reactions))
print(type(model.reactions[0]))
print(type(model.metabolites))
print(type(model.metabolites[0]))
80/171:
print(type(model))
print(type(model.reactions))
print(type(model.reactions[0]))
print(type(model.metabolites))
print(type(model.metabolites[0]))
print(type(model.genes[0]))
80/172:
print(type(model))
print(type(model.reactions))
print(type(model.reactions[0]))
print(type(model.metabolites))
print(type(model.metabolites[0]))
print(type(model.genes))
print(type(model.genes[0]))
80/173:
print(type(model))
print(type(model.reactions))
print(type(model.reactions[0]))
print(type(model.metabolites))
print(type(model.metabolites[0]))
print(type(model.genes))
print(type(model.genes[0]))
print(type(model.groups))
print(type(model.groups[0]))
80/174:
print(type(model))
print(type(model.reactions))
print(type(model.metabolites))
print(type(model.genes))
print(type(model.groups))

print(type(model.reactions[0]))
print(type(model.metabolites[0]))
print(type(model.genes[0]))
print(type(model.groups[0]))
80/175:
print(type(model))
print(type(model.reactions))
print(type(model.metabolites))
print(type(model.genes))
print(type(model.groups))
print(type(model.reactions[0]))
print(type(model.metabolites[0]))
print(type(model.genes[0]))
print(type(model.groups[0]))
80/176:
print(type(model))
print(type(model.reactions))
print(type(model.metabolites))
print(type(model.genes))
print(type(model.groups))
print(type(model.reactions[0]))
print(type(model.metabolites[0]))
print(type(model.genes[0]))
print(type(model.groups[0]))
80/177:
print(model.reactions[0])
print(model.metabolites[0])
80/178: print(model.reactions[0])
80/179:
print(model.reactions[0])
print(model.metabolites[0])
80/180:
model.reactions[0]
print(model.reactions[0])
80/181: print(model.reactions[0])
80/182: model.reactions[0]
80/183: model.metabolites[0]
80/184: print(model.metabolites[0])
80/185: mode.genes[0]
80/186: model.genes[0]
80/187: print(model.genes[0])
80/188: model.reactions[0].reaction
80/189: model.reactions[0].name
80/190: model.reactions[0].annotation
80/191: model.reactions[0].notes
80/192: model.reactions[0].metabolites
80/193: list(model.reactions[0:10])
80/194: list(model.reactions[0:4])
80/195: list(model.reactions[0:9])
80/196: dir(model.metabolites[0:9])
80/197: dir(model.metabolites)
80/198: dir(model.metabolites[0])
80/199: dir(model.reactions[0])
80/200: dir(model.reactions[0])
80/201: model.metabolites[0].shadow_price
80/202: model.metabolites.shadow_price
80/203: model.groups[0:9]
80/204: save_json_model(model, "Recon3DModel_301.json")
80/205: cobra.io.save_json_model(model, "Recon3DModel_301.json")
80/206:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model
fileFolder = fileFolder('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301
80/207:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model
fileFolder = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
80/208:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model
fileFolder = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(fileFolder)
print(filePath)
80/209:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(filePath)
80/210:
import pathlib
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
80/211:
# find ATP demand reaction (cytosol)
list(model.reactions)

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/212:
# find ATP demand reaction (cytosol)
dir(model.reactions)

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/213:
# find ATP demand reaction (cytosol)
list(model.reactions)

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/214:
# find ATP demand reaction (cytosol)
list(model.reactions[0])

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/215:
# find ATP demand reaction (cytosol)
list(model.reactions[0:9])

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/216:
# find ATP demand reaction (cytosol)
rxns = list(model.reactions) # list of all reactions
any(rxns,'atp')

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/217:
# find ATP demand reaction (cytosol)
str = 'atp'
rxns = list(model.reactions) # list of all reactions
any(str in string for string in rxns)

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
75/2:
lst = ["ABC", "BAC", "CAB"]
str1 = "AC"

res = any(str1 in string for string in lst)

print(res)
75/3: res
80/218:
# find ATP demand reaction (cytosol)
str = 'atp'
rxns = list(model.reactions) # list of all reactions
type(rxns)
#any(str in string for string in rxns)

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/219:
# find ATP demand reaction (cytosol)
str = 'atp'
rxns = list(model.reactions) # list of all reactions
type(rxns[0])
#any(str in string for string in rxns)

# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/220: index(rxns,'atp')
80/221: rxns.index('atp')
80/222: rxns.index('ATP')
80/223: rxns[0]
80/224: rxns[0].name
80/225: rxns[0].id
80/226: rxns.index(rxns[0].id)
80/227:
# find ATP demand reaction (cytosol)
str = 'atp'
rxns = dir(model.reactions) # list of all reactions
type(rxns[0])

#any(str in string for string in rxns)
# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/228: rxns.index(rxns[0].id)
80/229:
# find ATP demand reaction (cytosol)
str = 'atp'
rxns = list(dir(model.reactions)) # list of all reactions
type(rxns[0])

#any(str in string for string in rxns)
# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/230: rxns[0].id.index(rxns[0].id)
80/231:
# find ATP demand reaction (cytosol)
str = 'atp'
rxns = list(model.reactions) # list of all reactions
type(rxns)

#any(str in string for string in rxns)
# biomass_rxn = model.reactions.get_by_id("Biomass_Ecoli_core")
80/232: rxns[0:5]
80/233: rxns[0]
80/234: rxns
80/235: rxns.index
80/236: rxns.index[1]
80/237: model.reactions
80/238: model.reactions.10FTHF5GLUtm
80/239: model.reactions
80/240: model.exchanges
80/241:
model.exchanges # all exchange reactions
model.demands # demand reactions
model.sinks # sink reactions
80/242: model.demands # demand reactions
80/243:
model.demands # demand reactions
length(model.demands)
80/244:
model.demands # demand reactions
len(model.demands)
80/245:
print(len(model.demands))
model.demands # demand reactions
83/1:
import pathlib
from cobra.io import read_sbml_model
import logging

modelName = 'Recon3D.xml' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)

model = read_sbml_model(filePath)
83/2:
import pathlib import Path
from cobra.io import read_sbml_model
import logging

modelName = 'Recon3D.xml' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)

model = read_sbml_model(filePath)
83/3:
from pathlib import Path
from cobra.io import read_sbml_model
import logging

modelName = 'Recon3D.xml' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)

model = read_sbml_model(filePath)
83/4:
from pathlib import Path
from cobra.io import read_sbml_model
import logging

modelName = 'Recon3D.xml' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
83/5: model = read_sbml_model(filePath)
83/6: model = read_sbml_model(filePath)
83/7: model = read_sbml_model(str(filePath))
83/8: model = read_sbml_model(filePath)
83/9: model = read_sbml_model(git/COBRA_project_SP/Recon3D_model/Recon3D.xml)
83/10: model = read_sbml_model(C:\Users\prins\git\COBRA_project_SP\Recon3D_model\Recon3D.xml)
83/11: model = read_sbml_model(C:\\Users\prins\git\COBRA_project_SP\Recon3D_model\Recon3D.xml)
83/12: model = read_sbml_model('C:\Users\prins\git\COBRA_project_SP\Recon3D_model\Recon3D.xml')
83/13: model = read_sbml_model('C:\Users\prins\git\COBRA_project_SP\Recon3D_model\Recon3D_model\Recon3D.xml')
83/14: model = read_sbml_model(filePath)
82/22:
mini_fbc2_path = data_dir / "mini_fbc2.xml" 
read_sbml_model(str(mini_fbc2_path.resolve()))
82/23:
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
82/24:
textbook_model = load_model("textbook")
ecoli_model = load_model("iJO1366")

logging.getLogger("cobra.io.sbml").setLevel(logging.ERROR)
salmonella_model = load_model("salmonella")
82/25:
mini_fbc2_path = data_dir / "mini_fbc2.xml" 
read_sbml_model(str(mini_fbc2_path.resolve()))
82/26: read_sbml_model('C:\Users\prins\git\cobrapy\src\cobra\data\mini_cobra.xml')
82/27:
mini_fbc2_path = data_dir / "mini_fbc2.xml" 
mini_fbc2_path = (str(mini_fbc2_path.resolve()))
82/28:
mini_fbc2_path = data_dir / "mini_fbc2.xml" 
mini_fbc2_path = (str(mini_fbc2_path.resolve()))
print(mini_fbc2_path)
82/29:
mini_fbc2_path = data_dir / "mini_fbc2.xml" 
mini_fbc2_path = (str(mini_fbc2_path.resolve()))
print(mini_fbc2_path)

read_sbml_model(mini_fbc2_path)
82/30:
mini_fbc2_path = data_dir / "Recon3D.xml" 
mini_fbc2_path = (str(mini_fbc2_path.resolve()))
print(mini_fbc2_path)
82/31: read_sbml_model(mini_fbc2_path)
82/32: model = read_sbml_model(mini_fbc2_path)
82/33:
model = read_sbml_model(mini_fbc2_path)
model
80/246: model
82/34:
model = read_sbml_model(mini_fbc2_path)
model
82/35:
print(len(model.demands))
model.demands # demand reactions
80/247:
# explore model
print(type(model))
print(type(model.reactions))
print(type(model.metabolites))
print(type(model.genes))
print(type(model.groups))
print(type(model.reactions[0]))
print(type(model.metabolites[0]))
print(type(model.genes[0]))
print(type(model.groups[0]))
80/248: summary = model.metabolites.get_by_id("atp_c").summary()
80/249: summary = model.metabolites.get_by_id("atp_c")
80/250: model.metabolites.get_by_id("atp_c")
80/251: model.metabolites
80/252: model.metabolites.get_by_id("atp[c]")
80/253: model.metabolites.get_by_id("atp[c]").Reaction
80/254: model.metabolites.get_by_id("atp[c]").reactions
80/255: model.reactions.get_by_any('DM_atp_c_')
80/256: model.reactions.get_by_id('DM_atp_c_')
80/257: model
80/258: model.objective = {model.reactions.DM_atp_c_: 1}
80/259: model
80/260: model.objective = {model.reactions.DM_atp_c_: 2}
80/261: model
80/262: model.objective = {model.reactions.DM_atp_c_: 1}
80/263: model
80/264: model.optimise()
80/265: model.optimize()
80/266: print(model.reactions.DM_atp_c_.flux)
80/267: model.metabolites.atp_c.summary()
80/268: model.metabolites.atp[c].summary()
80/269: model.metabolites.atp[c]
80/270: model.metabolites[1]
80/271: model.metabolites.10fthf5glu[l]
80/272: model.metabolites
80/273: model.summary()
80/274: model.summary()
80/275: model.metabolites.atp_c.summary()
80/276: model.metabolites.10fthf5glu[c]
80/277: model.metabolites.10fthf5glu
80/278: model.metabolites.ksii_core2_deg3[l]
80/279: model.metabolites.ksii_core2_deg3
80/280: model.metabolites.ksii_core2_deg3.summary()
80/281: model.metabolites.leu_L[e].summary()
80/282: model.metabolites.zymst[r].summary()
80/283: model.metabolites
80/284: model.metabolites.get_by_any('10fthf5glu[c]')
80/285: model.metabolites.get_by_id('10fthf5glu[c]')
80/286: model.metabolites.'10fthf5glu[c]'.summary()
80/287: model.metabolites.10fthf5glu[c].summary()
80/288: model.metabolites.get_by_id('10fthf5glu[c]')
80/289:  cobra.Configuration()
80/290: cobra.Reaction("R1")
80/291: cobra.Reaction("R2")
80/292: cobra.Reaction("R3")
80/293: cobra.Reaction("R4")
80/294: cobra.Reaction
80/295: cobra.Reaction
80/296: cobra.Reaction
80/297: cobra.Reaction.summary()
80/298: cobra_config.solver = "gurobi"
80/299: cobra_config.solver
80/300: cobra_config
80/301: cobra.solver
80/302: cobra_config.solver = "glpk_exact"
80/303: cobra.io.cobra_config.solver = "glpk_exact"
80/304: cobra.io.cobra_config.solver = "glpk"
80/305: cobra_config.solver
80/306: model.solver
80/307: model.solver = "gurobi"
87/1:
import pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
87/2:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
87/3:
from cobra.io import load_json_model, save_json_model
modelName = Recon3DModel_301.json
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
87/4:
from cobra.io import load_json_model, save_json_model
modelName = 'Recon3DModel_301.json'
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
87/5:
from cobra.io import load_json_model, save_json_model
modelName = 'Recon3DModel_301.json'
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
87/6: Recon3DModel_301 = load_json_model(filePath)
87/7: cobra.__version__
87/8: cobra
87/9: cobra.io
87/10:  time cobra.io.load_matlab_model("e_coli_core.mat")
87/11:  time cobra.io.load_matlab_model("git/COBRA_project_SP/Recon3D_model/Recon3DModel_301.mat")
88/1:
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
data_dir = data_dir.resolve()
print(data_dir)
88/2:
mat_path = data_dir / "Recon3D.mat" 
xml_path = data_dir / "Recon3D.xml" 
json_path = data_dir / "Recon3D.json" 


print(json_path.resolve())
88/3:
mat_path_mini = data_dir / "mini.mat" 
xml_path_mini = data_dir / "mini.xml" 
json_path_mini = data_dir / "mini.json" 

print(json_path_mini.resolve())
88/4:
mat_path_mini = data_dir / "mini.mat" 
xml_path_mini = data_dir / "mini.xml" 
json_path_mini = data_dir / "mini.json" 

print(json_path_mini.resolve())

json_model_mini = load_json_model(json_path_mini.resolve())
88/5:
mat_path = data_dir / "Recon3D.mat" 
xml_path = data_dir / "Recon3D.xml" 
json_path = data_dir / "Recon3D.json" 

print(json_path.resolve())

json_model = load_json_model(json_path.resolve())
88/6:
mat_path = data_dir / "Recon3D.mat" 
xml_path = data_dir / "Recon3D.xml" 
json_path = data_dir / "Recon3D.json" 

print(json_path.resolve())

xml_model = read_sbml_model(xml_path.resolve())
88/7:
mat_path = data_dir / "Recon3D.mat" 
xml_path = data_dir / "Recon3D.xml" 
json_path = data_dir / "Recon3D.json" 

print(xml_path.resolve())

xml_model = read_sbml_model(xml_path.resolve())
88/8:
mat_path = data_dir / "Recon3D.mat" 
xml_path = data_dir / "Recon3D.xml" 
json_path = data_dir / "Recon3D.json" 

print(xml_path.resolve())

path = xml_path.resolve()
xml_model = read_sbml_model(path)
88/9:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 

print(xml_path.resolve())

path = xml_path.resolve()
xml_model = read_sbml_model(path)
88/10:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 

xml_model = read_sbml_model(xml_path)
88/11:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path)
print(xml_path)
print(json_path)

xml_model = read_sbml_model(xml_path)
88/12:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path.resolve())
print(xml_path)
print(json_path)

xml_model = read_sbml_model(xml_path)
88/13:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path.resolve())
print(xml_path.resolve())
print(json_path.resolve())

xml_model = read_sbml_model(xml_path)
88/14:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path.resolve())
print(xml_path.resolve())
print(json_path.resolve())

xml_model = read_sbml_model(xml_path.resolve())
86/1:
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / ".." / "src" / "cobra" / "data"
data_dir = data_dir.resolve()
print(data_dir)

print("mini test files: ")
print(", ".join(str(i) for i in data_dir.glob('mini*.*')))
86/2:
mini_fbc2_path = data_dir / "Recon3D.xml" 
mini_fbc2_path = (str(mini_fbc2_path.resolve()))
print(mini_fbc2_path)
86/3:
model = read_sbml_model(mini_fbc2_path)
model
88/15:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path.resolve())
print(xml_path.resolve())
print(json_path.resolve())

xml_model = read_sbml_model(str(xml_path.resolve()))
88/16:
mat_path_mini = data_dir / "mini.mat" 
xml_path_mini = data_dir / "mini.xml" 
json_path_mini = data_dir / "mini.json" 

print(json_path_mini.resolve())

json_model_mini = load_json_model(str(json_path_mini.resolve()))
88/17:
mat_path_mini = data_dir / "mini.mat" 
xml_path_mini = data_dir / "mini.xml" 
json_path_mini = data_dir / "mini.json" 

print(json_path_mini.resolve())

json_model_mini = load_json_model(str(json_path_mini.resolve()))
88/18:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path.resolve())
print(xml_path.resolve())
print(json_path.resolve())

xml_model = read_sbml_model(str(xml_path.resolve()))
xml_model
88/19:
mat_path_mini = Path(".")  / "mini.mat" 
xml_path_mini = Path(".")  / "mini.xml" 
json_path_mini = Path(".")  / "mini.json" 

print(json_path_mini.resolve())

json_model_mini = load_json_model(str(json_path_mini.resolve()))
88/20:
mat_path_mini = Path(".")  / "mini.mat" 
xml_path_mini = Path(".")  / "mini.xml" 
json_path_mini = Path(".")  / "mini.json" 

print(json_path_mini.resolve())

json_model_mini = load_json_model(str(json_path_mini.resolve()))
json_model_mini
88/21: cobra.show_versions()
88/22:  time cobra.io.load_json_model(str(json_path_mini.resolve()))
88/23: time cobra.io.load_json_model(str(json_path_mini.resolve()))
88/24: cobra.io.load_json_model(str(json_path_mini.resolve()))
88/25: import cobra
88/26:  load_json_model(str(json_path_mini.resolve()))
88/27:  time load_json_model(str(json_path_mini.resolve()))
88/28:  time load_matlab_model(str(mat_path_mini.resolve()))
88/29:  time read_sbml_model(str(xml_path_mini.resolve()))
88/30:  time load_json_model(str(json_path_mini.resolve()))
88/31:  time load_matlab_model(str(mat_path_mini.resolve()))
88/32:  time read_sbml_model(str(xml_path_mini.resolve()))
88/33:  time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
88/34:  time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
88/35:  time json_model = load_json_model(str(json_path_mini.resolve()))
88/36:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path.resolve())
print(xml_path.resolve())
print(json_path.resolve())
88/37: time xml_model = read_sbml_model(str(xml_path.resolve()))
88/38: time mat_model = load_matlab_model(str(mat_path.resolve()))
88/39: time json_model = load_json_model(str(json_path.resolve()))
88/40:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
time mat_model2 = load_matlab_model(str(mat_path2.resolve()))
88/41: mat_path2 = Path(".") / "Recon3DModel_301.mat"
88/42:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
time mat_model2 = load_matlab_model(str(mat_path2.resolve()))
88/43:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
time mat_model_ = load_matlab_model(str(mat_path2.resolve()))
88/44:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
time mat_model_301 = load_matlab_model(str(mat_path2.resolve()))
88/45:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
str(mat_path2.resolve())
#time mat_model_301 = load_matlab_model(str(mat_path2.resolve()))
88/46:
mat_path1 = Path(".") / "Recon3DModel_301.mat" 
str(mat_path1.resolve())
#time mat_model_301 = load_matlab_model(str(mat_path2.resolve()))
88/47:
mat_path = Path(".") / "Recon3DModel_301.mat" 
str(mat_path1.resolve())
#time mat_model_301 = load_matlab_model(str(mat_path2.resolve()))
88/48:
mat_path1 = Path(".") / "Recon3D.mat" 
str(mat_path1.resolve())
#time mat_model_301 = load_matlab_model(str(mat_path2.resolve()))
88/49:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path.resolve())
print(xml_path.resolve())
print(json_path.resolve())
88/50:
mat_path1 = Path(".") / "Recon3D.mat" 
print((mat_path1.resolve()))
#time mat_model_301 = load_matlab_model(str(mat_path2.resolve()))
88/51:
mat_path1 = Path(".") / "Recon3DModel_301.mat" 
print((mat_path1.resolve()))
#time mat_model_301 = load_matlab_model(str(mat_path2.resolve()))
88/52:
mat_path1 = Path(".") / "Recon3DModel_301.mat" 
print((mat_path1.resolve()))
time mat_model_301 = load_matlab_model(mat_path1.resolve())
88/53:
mat_path1 = Path(".") / "Recon3DModel_301.mat" 
print((mat_path1.resolve()))
time mat_model_301 = load_matlab_model(str(mat_path1.resolve()))
88/54:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
print(mat_path2.resolve())
88/55:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
print(mat_path2.resolve())
time mat_model = load_matlab_model(str(mat_path2.resolve()))
88/56:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
print(mat_path2.resolve())
time mat_model2 = load_matlab_model(str(mat_path2.resolve()))
88/57: time mat_model = load_matlab_model(str(mat_path.resolve()))
88/58:
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
time mat_model2 = load_matlab_model(str(mat_path2.resolve()))
87/12:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
87/13:
Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
model = Recon3DModel_301
87/14:
time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
model = Recon3DModel_301
87/15: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
91/1:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
91/2: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
91/3: model
91/4: Recon3DModel_301
91/5: model = Recon3DModel_301
91/6:
model = Recon3DModel_301 
model
91/7: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
91/8:
model = Recon3DModel_301 
model
91/9:
model = Recon3DModel_301 
model
91/10: model.solver = "gurobi"
91/11: model.solver = "gurobi"
91/12:  cobra.Configuration()
91/13:  cobra.Configuration()
91/14: cobra.Configuration()
91/15: model.Configuration()
91/16: model
91/17: model.solver
91/18: set(model.boundary)
91/19: set(model.boundary)[0:10]
91/20: set(model.boundary[0:10])
91/21: (model.boundary[0:10])
91/22: model.boundary[0]
91/23: model.boundary[0].lower
91/24: model.boundary[0].bounds
91/25: model.boundary.bounds
91/26: model.boundary.bounds
91/27: model.boundary[0].bounds
91/28: model.reactions[0].reaction
91/29: model.reactions[0].reaction.knock_out
91/30: model.reactions[0].reaction
91/31: model.reactions[0].lower_boundary
91/32: model.reactions[0].bounds
91/33: model.reactions[0].bounds[0]
91/34: model.reactions[0].bounds[1]
91/35:
model.reactions[0].bounds[0]
model.reactions[0].bounds[1]
91/36:
for reaction in model.reactions[:5]:
    with model as model:
        reaction.bounds = (0,0)
        model.optimize()
        print('%s blocked (bounds: %s), new growth rate %f' %
              (reaction.id, str(reaction.bounds), model.objective.value))
91/37:
for reaction in model.reactions[:10]:
    with model as model:
        reaction.bounds = (0,0)
        model.optimize()
        print('%s blocked (bounds: %s), new growth rate %f' %
              (reaction.id, str(reaction.bounds), model.objective.value))
91/38: model.objective.value
91/39: model.objective.value
91/40: model.objective
91/41: model
91/42: model.summary()
91/43: model
91/44:
for reaction in model.reactions[:20]:
    with model as model:
        reaction.bounds = (0,0)
        model.optimize()
        print('%s blocked (bounds: %s), new growth rate %f' %
              (reaction.id, str(reaction.bounds), model.objective.value))
91/45:
for reaction in model.exchange[:20]:
    with model as model:
        reaction.bounds = (0,0)
        model.optimize()
        print('%s blocked (bounds: %s), new growth rate %f' %
              (reaction.id, str(reaction.bounds), model.objective.value))
91/46:
for reaction in model.boundary[:20]:
    with model as model:
        reaction.bounds = (0,0)
        model.optimize()
        print('%s blocked (bounds: %s), new growth rate %f' %
              (reaction.id, str(reaction.bounds), model.objective.value))
91/47:
for reaction in model.exchange[:20]:
    with model as model:
        reaction.bounds = (0,0)
        model.optimize()
        print('%s blocked (bounds: %s), new growth rate %f' %
              (reaction.id, str(reaction.bounds), model.objective.value))
91/48:
for reaction in model.reactions[1000:1020]:
    with model as model:
        reaction.bounds = (0,0)
        model.optimize()
        print('%s blocked (bounds: %s), new growth rate %f' %
              (reaction.id, str(reaction.bounds), model.objective.value))
91/49: model.summary()
91/50: model.objective = {model.reactions.DM_atp_c_: 1}
91/51:
for reaction in model.reactions[1000:1020]:
    with model as model:
        reaction.bounds = (0,0)
        model.optimize()
        print('%s blocked (bounds: %s), new growth rate %f' %
              (reaction.id, str(reaction.bounds), model.objective.value))
91/52: model.summary()
91/53: [reaction.bounds for reaction in model.reactions[:5]]
91/54: [reaction.bounds for reaction in model.reactions[:5]] = (0,0)
91/55: [reaction.bounds for reaction in model.reactions[:5]]
91/56: reaction.bounds for reaction in model.reactions[:5]
91/57: for reaction.bounds in model.reactions[:5]:
91/58: reaction.bounds
91/59: reaction
91/60: reaction[1:10]
91/61: reactions
91/62: reaction
91/63: reaction.boundary
91/64: gene
91/65: model.reaction[0]
91/66: model.reactions[0]
91/67: model.reactions.bounds
91/68: model.reactions[0:10].bounds
91/69: model.reactions[0].bounds
92/1:
import cobra.test
import os
from os.path import join

data_dir = cobra.test.data_dir

print("mini test files: ")
print(", ".join(i for i in os.listdir(data_dir) if i.startswith("mini")))

textbook_model = cobra.test.create_test_model("textbook")
ecoli_model = cobra.test.create_test_model("ecoli")
salmonella_model = cobra.test.create_test_model("salmonella")
92/2:
from cobra import test
import os
from os.path import join

data_dir = cobra.test.data_dir

print("mini test files: ")
print(", ".join(i for i in os.listdir(data_dir) if i.startswith("mini")))

textbook_model = cobra.test.create_test_model("textbook")
ecoli_model = cobra.test.create_test_model("ecoli")
salmonella_model = cobra.test.create_test_model("salmonella")
91/70: model.reactions[0].reaction
91/71: model.reactions[0].reaction.bounds
91/72: model.reactions[0].bounds
91/73: model.exchange
91/74: model.reactions.exchange
91/75: from cobra.medium import minimal_medium
91/76: minimal_medium
91/77: model.reactions.exchange
91/78: model.reactions
91/79: model.exchange
91/80: model.exchanges
91/81: model.exchanges
91/82: model.exchanges.reactions
91/83: model.exchanges.reaction
91/84: model.exchanges[1].reaction
91/85: model.exchanges[0].reaction
91/86: model.exchanges[0].bounds
91/87: len(model.exchanges)
91/88: [0 : len(model.exchanges)]
91/89: [1 : len(model.exchanges)]
91/90: [1 : 10]
91/91: (1 : 10)
91/92: rasnge(1 : 10)
91/93: range(1 : 10)
91/94: range( 10)
91/95: range(0, 10)
91/96: range(10)
91/97: a = range(10)
91/98: print(range(10))
91/99: print(a)
91/100: [0 : 1 : 10]
91/101: [0 : 10]
91/102: [0, 10]
91/103: 0:10
91/104: 0,10
91/105: 0,10,1
91/106: model.exchanges[0]
91/107: model.exchanges[0].bounds
91/108:
for i in range(len(model.exchanges))
model.exchanges[i].bounds = (0,0)
91/109:
for i in range(len(model.exchanges)):
model.exchanges[i].bounds = (0,0)
91/110:
for i in range(len(model.exchanges)):
    model.exchanges[i].bounds = (0,0)
91/111: model.exchanges[0].bounds
91/112: model.exchanges[1000].bounds
91/113: len(model.exchanges)
91/114: model.exchanges[1559].bounds
91/115: model.exchanges[1558].bounds
91/116: model.exchanges[1548].bounds
91/117: model.exchanges[1248].bounds
91/118:
for i in range(len(model.exchanges)):
    model.exchanges[i].bounds = (0,0)
91/119: model.exchanges[1548].bounds
91/120: model.boundary
91/121: len(model.boundary)
91/122: len(model.demands)+len(model.exchanges)+len(model.sinks)
91/123:
print(len(model.demands))
print(len(model.exchanges))
print(len(model.sinks))
91/124: model.optimize().objective_value
91/125:
# close sink reactions
for i in range(len(model.sinks)):
    model.sinks[i].bounds = (0,0)
91/126: len(model.sinks)
91/127: model.sinks[0]
91/128: model.sinks[0].bounds
91/129: model.exchanges[0].bounds
91/130: model.exchanges[0]
91/131:
# close exchange reactions
for i in range(len(model.exchanges)):
    model.exchanges[i].bounds = (0,1000)
91/132: model.exchanges[0]
91/133: model.optimize()
91/134: model.optimize().summary
91/135:
# close sink reactions
for i in range(len(model.sinks)):
    model.sinks[i].bounds = (0,0)
91/136: model.optimize()
91/137: model
91/138: model.optimize()
91/139: Recon3DModel_301
91/140: Recon3DModel_301.objective
91/141: Recon3DModel_301
93/1:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(filePath)
time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
93/2:
from pathlib import Path
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(filePath)
Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
93/3: Recon3DModel_301
93/4: model = Recon3DModel_301
93/5:
model = Recon3DModel_301
model
93/6: Recon3DModel_301
93/7:
model = Recon3DModel_301
model = model.copy()
93/8:
model = Recon3DModel_301
model = Recon3DModel_301.copy()
93/9: model = Recon3DModel_301.copy()
93/10: Recon3DModel_301.Name
93/11: Recon3DModel_301.name
93/12: Recon3DModel_301.name
93/13: model.name
93/14: model.name
93/15: print(model.name)
93/16: print(Recon3DModel_301.name)
93/17: model
94/1:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
94/2: model
94/3:
print(len(model.reactions))
print(len(model.metabolites))
print(len(model.genes))
94/4:
pgi = model.reactions.get_by_id("PGI")
pgi
94/5: pgi
94/6: pgi.check_mass_balance()
94/7: pgi.reaction
94/8:
pgi.add_metabolites({model.metabolites.get_by_id("h_c"): -1})
pgi.reaction
94/9: pgi.check_mass_balance()
94/10:
pgi.subtract_metabolites({model.metabolites.get_by_id("h_c"): -1})
print(pgi.reaction)
print(pgi.check_mass_balance())
94/11:
atp = model.metabolites.get_by_id("atp_c")
atp
94/12:
pgi.subtract_metabolites({model.metabolites.get_by_id("h_c"): -1})
print(pgi.reaction)
print(pgi.check_mass_balance())
94/13:
atp = model.metabolites.get_by_id("atp_c")
atp
94/14:
print(atp.name)
print(atp.compartment)
print(atp.charge)
94/15:
print(atp.name)
print(atp.compartment)
print(atp.charge)
print(atp.formula)
94/16:
print(atp.name)
print(atp.compartment)
print(atp.charge)
print(atp.formula)
atp.reactions
94/17:
print(atp.name)
print(atp.compartment)
print(atp.charge)
print(atp.formula)
atp.reactions
atp.gpr
94/18:
print(atp.name)
print(atp.compartment)
print(atp.charge)
print(atp.formula)
atp.reactions
pgi.gpr
94/19:
print(atp.name)
print(atp.compartment)
print(atp.charge)
print(atp.formula)
atp.reactions
94/20:
print(atp.name)
print(atp.compartment)
print(atp.charge)
print(atp.formula)
print(atp.reactions)
94/21:
(pgi.gpr)
(pgi.gene_reaction_rule)
94/22:
print(pgi.gpr)
print(pgi.gene_reaction_rule)
94/23:
print(atp.gpr)
print(atp.gene_reaction_rule)
94/24: atp
94/25: pgi
94/26: b4025
94/27: genes.b4025
94/28: genes.getbyid(b4025)
94/29: genes.getbyid('b4025')
94/30: genes.get_by_id('b4025')
94/31: model.genes.get_by_id("b4025")
94/32: model.atp
94/33: model.reactions.atp
94/34: reaction.atp
94/35: reaction
94/36: reactions
94/37: pgi_gene.reactions
94/38: model.genes.get_by_id("b4025").reactions
94/39:
pgi.gene_reaction_rule = "(spam or eggs)"
pgi.genes
94/40: model.genes.get_by_id("b4025").reactions
94/41: pgi.reactions
94/42: pgi
94/43:
pgi.gene_reaction_rule = "(spam or eggs or beans)"
pgi.genes
94/44: pgi
94/45: model.genes.get_by_id("spam")
94/46:
pgi.gene_reaction_rule = "(spam or eggs and beans)"
pgi.genes
94/47: pgi
94/48:
pgi.gene_reaction_rule = "(spam or eggs and beans or spam and toast)"
pgi.genes
94/49: pgi
94/50:
pgi.gene_reaction_rule = "(spam or eggs and beans or spam and toast and eggs)"
pgi.genes
94/51: pgi
94/52: model.genes.get_by_id("spam")
94/53:
cobra.manipulation.knock_out_model_genes(
    model, ["spam"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/54:
cobra.manipulation.knock_out_model_genes(model, ["spam"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(model, ["eggs"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/55:
cobra.manipulation.knock_out_model_genes(
    model, ["spam"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/56:
cobra.manipulation.knock_out_model_genes(
    model, ["spam"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/57:
cobra.manipulation.knock_out_model_genes(
    model, ["spam"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/58:
pgi.gene_reaction_rule = "(spam or eggs and beans or spam and toast)"
pgi.genes
94/59: model.genes.get_by_id("spam")
94/60:
cobra.manipulation.knock_out_model_genes(
    model, ["spam"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/61:
pgi.gene_reaction_rule = "(spam or eggs)"
pgi.genes
94/62: pgi
94/63: model.genes.get_by_id("spam")
94/64:
cobra.manipulation.knock_out_model_genes(
    model, ["spam"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/65: model.genes.get_by_id("b4025").reactions
94/66:
pgi.gene_reaction_rule = "(spam or eggs)"
pgi.genes
94/67: pgi
94/68: model.genes.get_by_id("spam")
94/69:
cobra.manipulation.knock_out_model_genes(
    model, ["spam"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/70:
pgi.gene_reaction_rule = "(beans or toast)"
pgi.genes
94/71: pgi
94/72: model.genes.get_by_id("spam")
94/73: model.genes.get_by_id("beans")
94/74:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/75:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/76:
cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/77:
cobra.manipulation.knock_out_model_genes(
    model, ["eggs"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/78:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
94/79: model
94/80:
print(len(model.reactions))
print(len(model.metabolites))
print(len(model.genes))
94/81:
pgi = model.reactions.get_by_id("PGI")
pgi
94/82: pgi.check_mass_balance()
94/83: pgi.reaction
94/84:
print(atp.name)
print(atp.compartment)
print(atp.charge)
print(atp.formula)
print(atp.reactions)
94/85: atp
94/86: pgi
94/87:
print(pgi.gpr)
print(pgi.gene_reaction_rule)
94/88: model.genes.get_by_id("b4025")
94/89: model.genes.get_by_id("b4025").reactions
94/90:
pgi.gene_reaction_rule = "(beans or toast)"
pgi.genes
94/91:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/92:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/93:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
94/94:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/95:
pgi.gene_reaction_rule = "(beans or toast)"
pgi.genes
94/96:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/97:
pgi.gene_reaction_rule = "(beans or toast)"
pgi.genes
94/98: pgi
94/99: model.genes.get_by_id("beans")
94/100: model.genes.get_by_id("beans")
94/101:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
94/102: model
94/103:
print(len(model.reactions))
print(len(model.metabolites))
print(len(model.genes))
94/104:
pgi = model.reactions.get_by_id("PGI")
pgi
94/105:
pgi.gene_reaction_rule = "(beans or toast)"
pgi.genes
94/106:
pgi.gene_reaction_rule = "(beans and toast)"
pgi.genes
94/107: pgi
94/108: model.genes.get_by_id("beans")
94/109:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/110:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["ham"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/111: model.genes.get_by_id("beans")
94/112:
pgi.gene_reaction_rule = "(beans and toast or eggs and ham or ham)"
pgi.genes
94/113: pgi
94/114:
cobra.manipulation.knock_out_model_genes(
    model, ["beans"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["toast"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["ham"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/115:
pgi.gene_reaction_rule = "(A or B or A and B or A and C or A and D)"
pgi.genes
94/116: pgi
94/117: model.genes.get_by_id("beans")
94/118:
cobra.manipulation.knock_out_model_genes(
    model, ["D"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["C"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["B"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["A"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/119: model.genes.get_by_id("D")
94/120: model.genes.get_by_id("A")
94/121:
pgi.gene_reaction_rule = "(A or B or A and B or A and C or A and D)"
pgi.genes
94/122:
pgi.subtract_metabolites({model.metabolites.get_by_id("h_c"): -1})
print(pgi.reaction)
print(pgi.check_mass_balance())
94/123:
pgi = model.reactions.get_by_id("PGI")
pgi
94/124:
pgi.gene_reaction_rule = "(A or B or A and B or A and C or A and D)"
pgi.genes
94/125: pgi
94/126: model.genes.get_by_id("A")
94/127:
import cobra
from cobra.io import load_model

# "iJO1366" and "salmonella" are also valid arguments
model = load_model("textbook")
94/128: model
94/129:
pgi = model.reactions.get_by_id("PGI")
pgi
94/130:
pgi.gene_reaction_rule = "(A or B or A and B or A and C or A and D)"
pgi.genes
94/131: pgi
94/132: model.genes.get_by_id("A")
94/133:
cobra.manipulation.knock_out_model_genes(
    model, ["D"])
print("after 1 KO: %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["C"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["B"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))

cobra.manipulation.knock_out_model_genes(
    model, ["A"])
print("after 2 KO:  %4d < flux_PGI < %4d" % (pgi.lower_bound, pgi.upper_bound))
94/134: cobra.manipulation
94/135:
model.objective = 'ATPM'
    print('print objective in first context:', model.objective.expression)
94/136:
model.objective = 'ATPM'
print('print objective in first context:', model.objective.expression)
94/137:
model.objective = 'ATPM'
print(model.objective.expression)
94/138:
model.objective = 'ATPM'
print(model.objective.expression)


model.objective = 'ACALD'
print(model.objective.expression)
94/139:
model.objective = 'ATPM'
print(model.objective.expression)

model.objective = 'ACALD'
print(model.objective.expression)

print(model.objective.expression)
94/140:
print('original objective: ', model.objective.expression)
with model:
    model.objective = 'ATPM'
    print('print objective in first context:', model.objective.expression)
    with model:
        model.objective = 'ACALD'
        print('print objective in second context:', model.objective.expression)
    print('objective after exiting second context:',
          model.objective.expression)
print('back to original objective:', model.objective.expression)
95/1: import cobra
95/2: cobra_config = cobra.Configuration()
95/3: cobra.Configuration().lower_bound
95/4: cobra.Configuration().upper_bound
95/5: cobra.Configuration().bounds
95/6: cobra_config.bounds = -10, 20
95/7: cobra.Configuration().bounds
95/8: cobra.Reaction("R2", lower_bound=None)
95/9: cobra.Reaction("R2")
95/10: cobra.Reaction("R2", lower_bound=None)
95/11: cobra.Reaction("R1")
95/12: model = load_model("textbook")
95/13: model = cobra.io.load_model("textbook")
95/14: model.reactions.ACt2r
95/15: model.reactions.R2
95/16: Reaction
95/17: reactions
100/1: time import cobra
100/2:
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
data_dir = data_dir.resolve()
print(data_dir)
100/3:
mat_path_mini = Path(".")  / "mini.mat" 
xml_path_mini = Path(".")  / "mini.xml" 
json_path_mini = Path(".")  / "mini.json"
100/4: time json_model = load_json_model(str(json_path_mini.resolve()))
100/5: time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
100/6: time json_model = load_json_model(str(json_path_mini.resolve()))
100/7: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
100/8: time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
100/9: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
100/10:
mat_path = Path(".") / "Recon3D.mat" 
xml_path = Path(".")  / "Recon3D.xml" 
json_path = Path(".")  / "Recon3D.json" 
print(mat_path.resolve())
print(xml_path.resolve())
print(json_path.resolve())
100/11: time xml_model = read_sbml_model(str(xml_path.resolve()))
100/12: time mat_model = load_matlab_model(str(mat_path.resolve()))
100/13: time json_model = load_json_model(str(json_path.resolve()))
100/14: time mat_model = load_matlab_model(str(mat_path.resolve()))
100/15:  time json_model = load_json_model(str(json_path_mini.resolve()))
100/16:  time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
100/17:  time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
103/1:
import cobra
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
data_dir = data_dir.resolve()
print(data_dir)
103/2: time mat_model = load_matlab_model(str(mat_path.resolve()))
103/3:
import cobra
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
mat_path = Path(".") / "Recon3D.mat" 
data_dir = data_dir.resolve()
print(mat_path)
103/4: time mat_model = load_matlab_model(str(mat_path.resolve()))
103/5:
import cobra
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
mat_path = Path(".") / "Recon3D.mat" 
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
data_dir = data_dir.resolve()
print(mat_path)
103/6:
import cobra
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
mat_path = Path(".") / "Recon3D.mat" 
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
data_dir = data_dir.resolve()
print(mat_path.resolve())
103/7: time mat_model = load_matlab_model(str(mat_path.resolve()))
103/8:
mat_path_mini = Path(".")  / "mini.mat" 
xml_path_mini = Path(".")  / "mini.xml" 
json_path_mini = Path(".")  / "mini.json"
103/9: time json_model = load_json_model(str(json_path_mini.resolve()))
103/10: time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
103/11: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/12: time json_model = load_json_model(str(json_path_mini.resolve()))
103/13: time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
103/14: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/15:
time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/16: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/17: time json_model = load_json_model(str(json_path_mini.resolve()))
103/18: time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
103/19: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/20:
time 
mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/21: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/22: time.mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/23: time.load_matlab_model(str(mat_path_mini.resolve()))
103/24: time load_matlab_model(str(mat_path_mini.resolve()))
103/25: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/26: time json_model = load_json_model(str(json_path_mini.resolve()))
103/27: time json_model = load_json_model(str(json_path_mini.resolve()))
103/28: time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
103/29: time sbml_model = read_sbml_model(str(xml_path_mini.resolve()))
103/30: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
103/31: time mat_model = load_matlab_model(str(mat_path_mini.resolve()))
104/1:
import cobra
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
mat_path = Path(".") / "Recon3D.mat" 
mat_path2 = Path(".") / "Recon3DModel_301.mat" 
data_dir = data_dir.resolve()
print(mat_path.resolve())
104/2:
import cobra
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
mat_path = Path(".") / "Recon3DModel_301.mat" 
data_dir = data_dir.resolve()
print(mat_path.resolve())
104/3: time mat_model = load_matlab_model(str(mat_path.resolve()))
104/4: time mat_model = load_matlab_model(str(mat_path.resolve()))
104/5: time mat_model = load_matlab_model(str(mat_path.resolve()))
104/6: mat_path2 = Path(".") / "Recon3D.mat"
104/7: time mat_model = load_matlab_model(str(mat_path2.resolve()))
105/1:
import cobra
from pathlib import Path
from cobra.io import load_json_model, save_json_model, load_matlab_model, save_matlab_model, read_sbml_model, write_sbml_model
import logging

data_dir = Path(".") / "Recon3d_model"
mat_path = Path(".") / "Recon3DModel_301.mat" 
data_dir = data_dir.resolve()
print(mat_path.resolve())
105/2: time mat_model = load_matlab_model(str(mat_path.resolve()))
106/1: from __future__ import print_function
106/2:
from cobra import Model, Reaction, Metabolite
# Best practise: SBML compliant IDs
model = Model('example_model')

reaction = Reaction('3OAS140')
reaction.name = '3 oxoacyl acyl carrier protein synthase n C140 '
reaction.subsystem = 'Cell Envelope Biosynthesis'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default
106/3:
ACP_c = Metabolite(
    'ACP_c',
    formula='C11H21N2O7PRS',
    name='acyl-carrier-protein',
    compartment='c')
omrsACP_c = Metabolite(
    '3omrsACP_c',
    formula='C25H45N2O9PRS',
    name='3-Oxotetradecanoyl-acyl-carrier-protein',
    compartment='c')
co2_c = Metabolite('co2_c', formula='CO2', name='CO2', compartment='c')
malACP_c = Metabolite(
    'malACP_c',
    formula='C14H22N2O10PRS',
    name='Malonyl-acyl-carrier-protein',
    compartment='c')
h_c = Metabolite('h_c', formula='H', name='H', compartment='c')
ddcaACP_c = Metabolite(
    'ddcaACP_c',
    formula='C23H43N2O8PRS',
    name='Dodecanoyl-ACP-n-C120ACP',
    compartment='c')
106/4:
reaction.add_metabolites({
    malACP_c: -1.0,
    h_c: -1.0,
    ddcaACP_c: -1.0,
    co2_c: 1.0,
    ACP_c: 1.0,
    omrsACP_c: 1.0
})

reaction.reaction  # This gives a string representation of the reaction
106/5:
reaction.gene_reaction_rule = '( STM2378 or STM1197 )'
reaction.genes
106/6:
model.add_reactions([reaction])

# Now there are things in the model
print('%i reaction' % len(model.reactions))
print('%i metabolites' % len(model.metabolites))
print('%i genes' % len(model.genes))
106/7:
# Iterate through the the objects in the model
print("Reactions")
print("---------")
for x in model.reactions:
    print("%s : %s" % (x.id, x.reaction))

print("")
print("Metabolites")
print("-----------")
for x in model.metabolites:
    print('%9s : %s' % (x.id, x.formula))

print("")
print("Genes")
print("-----")
for x in model.genes:
    associated_ids = (i.id for i in x.reactions)
    print("%s is associated with reactions: %s" %
          (x.id, "{" + ", ".join(associated_ids) + "}"))
106/8: model.genes
107/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
107/2: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
107/3: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
107/4:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') /  modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
107/5: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
107/6: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
107/7: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
109/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') /  modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
109/2: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
109/3: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
109/4: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
110/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') /  modelName
filePath = filePath.resolve() # filepath Recon3D model
print(folderPath)
print(filePath)
110/2: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
107/8: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
110/3: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
110/4: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
112/1: import cobra
112/2: time cobra.io.load_matlab_model("e_coli_core.mat")
113/1: import cobra
113/2: cobra.__version__
113/3: time cobra.io.load_matlab_model("e_coli_core.mat")
113/4: time cobra.io.load_matlab_model("e_coli_core.mat")
113/5: time cobra.io.load_matlab_model("e_coli_core.mat")
113/6: time cobra.io.load_matlab_model("git/COBRA_project_SP/load_model/e_coli_core.mat")
113/7:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = modelName.resolve() # filepath Recon3D model
print(filePath)
113/8:
import Path
import cobra
113/9:
import path
import cobra
113/10:
import pathlib
import cobra
113/11: cobra.__version__
113/12:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = modelName.resolve() # filepath Recon3D model
print(filePath)
113/13:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = modelName.resolve() # filepath Recon3D model
print(filePath)
113/14:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
print(filePath)
113/15:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
print(filePath)
113/16:
import pathlib
import cobra
113/17: cobra.__version__
113/18:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
print(filePath)
113/19:
from pathlib import Path
import cobra
113/20:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
print(filePath)
113/21: time cobra.io.load_matlab_model("filePath")
113/22: time cobra.io.load_matlab_model(filePath)
113/23: time cobra.io.load_matlab_model(filePath)
122/1:
from pathlib import Path
import cobra
122/2: cobra.__version__
122/3:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
print(filePath)
122/4:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
print(filePath)
122/5:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
print(filePath)
124/1:
from pathlib import Path
import cobra
124/2: cobra.__version__
124/3:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
print(filePath)
124/4: time cobra.io.load_matlab_model(filePath)
124/5: time cobra.io.load_matlab_model(filePath)
124/6: time cobra.io.load_matlab_model(filePath)
124/7: time cobra.io.load_matlab_model(filePath)
124/8:
modelName = 'Recon3D.mat' # filename Recon3D model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath Recon3D model
124/9: time cobra.io.load_matlab_model(filePath)
124/10:
from pathlib import Path
import cobra
124/11:
from pathlib import Path
import cobra
125/1:
from pathlib import Path
import cobra
125/2: cobra.__version__
125/3:
modelName = 'e_coli_core.mat' # filename e_coli_core model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath e_coli_core model
125/4: time cobra.io.load_matlab_model(filePath)
125/5:
modelName = 'Recon3D.mat' # filename Recon3D model
filePath = Path('.') / modelName 
filePath = filePath.resolve() # filepath Recon3D model
125/6: time cobra.io.load_matlab_model(filePath)
125/7: time cobra.io.load_matlab_model(filePath)
125/8: time cobra.io.load_matlab_model(filePath)
128/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
128/2: time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
128/3: model
128/4: Recon3DModel_301
128/5: cobra.io.write_sbml_model(Recon3DModel_301, "Recon3DModel_301.xml")
129/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
129/2: time model = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
129/3: model
130/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
130/2: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
130/3: model
130/4: model.solver
130/5: model.summary()
130/6: model.optimize().objective_value
130/7: model.exchanges
130/8:
for exchange in model.exchanges:
    exchange.bounds = (0,1000)
130/9: model.exchanges[1]
130/10: model.exchanges[0]
132/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
132/2: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
132/3: model
132/4: model.solver
132/5: model.summary()
132/6: model.optimize().objective_value
132/7: model.exchanges[0]
132/8:
for exchange in model.exchanges:
    exchange.bounds = (0,1000)
132/9: model.exchanges[0]
132/10: model.optimize().objective_value
132/11:
for demand in model.demands:
    demand.bounds = (0,1000)
132/12: model.optimize().objective_value
132/13:
for sink in model.sinks:
    sink.bounds = (0,1000)
132/14: model.optimize().objective_value
133/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
133/2: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
133/3: model
133/4: model.solver
133/5: model.summary()
133/6: model.optimize().objective_value
133/7: model.exchanges[0]
133/8:
for exchange in model.exchanges:
    exchange.bounds = (0,1000)
133/9: model.exchanges[0]
133/10: model.optimize().objective_value
133/11: model.demands[0]
133/12:
for demand in model.demands:
    demand.bounds = (0,1000)
133/13: model.demands[0]
133/14: model.optimize().objective_value
133/15: model.sinks[0]
133/16:
for sink in model.sinks:
    sink.bounds = (0,1000)
133/17: model.sinks[0]
133/18:
for sink in model.sinks:
    sink.bounds = (-1000,0)
133/19: model.sinks[0]
133/20: model.sinks
133/21:
for sink in model.sinks:
    sink.bounds = (-1000,1000)
133/22: model.sinks
133/23: cobra.core.model.configuration
134/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
134/2: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
134/3: model
134/4:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
134/5: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
134/6: model
134/7: model.objective
134/8: model.objective.name
134/9: model.objective.expression
134/10: model.reactions
134/11: contains.model.reactions
134/12: __copy__
134/13: model.__copy__
134/14: __copy__.model
134/15: cobra.__author__
134/16: cobra.__copy__
134/17: cobra.reactions.__copy__
134/18: model.reactions
134/19: model.reactions.__copy__
134/20: a= model.reactions.__copy__
134/21:
a= model.reactions.__copy__
a[0]
134/22:
a= model.reactions.__copy__
a
134/23:
a= model.reactions.__copy__
model.reactions[0]
134/24:
a= model.reactions.__copy__
a.reactions[0]
134/25:
a= model.reactions.__copy__
a[0]
134/26:
a= model.reactions.__copy__
type(a)
134/27:
a= model.reactions.__copy__
type(model.reactions)
135/1:
from cobra.io import load_model
from cobra.flux_analysis import production_envelope

model = load_model("textbook")
134/28:
modelName = 'Recon3DModel_301_PL.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
134/29: time model_PL = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
136/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
136/2: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
136/3:
modelName = 'Recon3DModel_301_PL.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
136/4: time model_PL = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
136/5: model
136/6: model.objective.expression
136/7:
a= model.reactions.__copy__
type(model.reactions)
136/8: model_PL
136/9: model.objective.expression
136/10: model_PL.objective.expression
136/11: model_PL.summary()
136/12: model.summary()
136/13: model.objective.name
136/14: model.reactions.get_by_id('biomass_maintenance')
136/15: model_PL.reactions.get_by_id('biomass_maintenance')
136/16: model_PL.summary()
139/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
139/2: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
139/3: model.reactions.get_by_id
139/4: model.reactions.get_by_id('10FTHF5GLUtl ')
139/5: model.reactions.get_by_id('10FTHF5GLUtl')
139/6: model.reactions.get_by_id('r0355')
139/7: model.reactions.get_by_id('r0355' 'DXTRNt')
139/8: model.reactions.get_by_id('r0355')
139/9: model.reactions.r0355
139/10: model.reactions.DXTRNt
139/11:
rxns_to_delete =  [{'r0355', 'DXTRNt','GLDBRAN', 'GLPASE2'}]
model.reactions.DXTRNt
139/12: rxns_to_delete =  [{'r0355', 'DXTRNt','GLDBRAN', 'GLPASE2'}]
139/13:
rxns_to_delete =  [{'r0355', 'DXTRNt','GLDBRAN', 'GLPASE2'}]
rxns_to_delete
139/14:
rxns_to_delete =  [{'r0355', 'DXTRNt','GLDBRAN', 'GLPASE2'}]
rxns_to_delete[0]
139/15:
rxns_to_delete =  [{'r0355', 'DXTRNt','GLDBRAN', 'GLPASE2'}]
rxns_to_delete[1]
139/16:
rxns_to_delete =  ['r0355' 'DXTRNt' 'GLDBRAN' 'GLPASE2']
rxns_to_delete[1]
139/17:
rxns_to_delete =  ['r0355' 'DXTRNt' 'GLDBRAN' 'GLPASE2']
rxns_to_delete[0]
139/18:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
rxns_to_delete[0]
139/19:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
rxns_to_delete[1]
139/20:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete
print(model.i)
139/21:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.i)
139/22:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.i)
139/23:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.r0355)
139/24:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.[i])
139/25:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.{i})
139/26:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.(i))
139/27:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.i)
139/28:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.r0355)
139/29:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.'r0355')
139/30:
rxns_to_delete =  [r0355, DXTRNt, GLDBRAN, GLPASE2]
for i in rxns_to_delete:
    print(model.reactions.r0355)
139/31:
rxns_to_delete =  [r0355, DXTRNt, GLDBRAN, GLPASE2]
for i in rxns_to_delete:
    print(model.reactions.i)
139/32:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    print(model.reactions.r0355)
139/33:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    model.reactions.get_by_id(i)
    print(model.reactions.r0355)
139/34:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    model.reactions.get_by_id(i)
139/35: model.reactions.get_by_id(r0355)
139/36: model.reactions.get_by_id('r0355')
139/37:
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    rxn = model.reactions.get_by_id(i)
    rxn.bounds = (0,0)
139/38: model.reactions.get_by_id('r0355')
139/39: model.reactions.get_by_id('DXTRNt')
139/40: model.reactions.get_by_id('GLDBRAN')
139/41: model.reactions.get_by_id('GLPASE2')
139/42: model.metabolites.get_by_id('ggn[c]')
139/43: model.metabolites.get_by_id('ggn[c]').reactions
139/44: model.metabolites.get_by_id('ggn[c]').reactions[0]
139/45: model.metabolites.get_by_id('ggn[c]').reactions
139/46: rxns = model.metabolites.get_by_id('ggn[c]').reactions
139/47:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
rxns
139/48:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
rxns[0]
139/49:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
rxns
139/50:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
rxns.name
139/51: rxns = model.metabolites.get_by_id('ggn[c]').reactions
139/52:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
rxns
139/53:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
model.reactions.get_by_id(rxns)
139/54: rxns = model.metabolites.get_by_id('ggn[c]').reactions
139/55:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
rxns
139/56:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
rxns
model.metabolites.get_by_id('ggn[c]')
139/57:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
rxns
139/58:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
139/59:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
iter(rxns).next()
139/60:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
rxns
139/61:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
rxns({1}_
139/62:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
rxns({1})
139/63:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
rxns[0]
139/64:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
rxns[1]
139/65:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
rxns
139/66:
rxns = model.metabolites.get_by_id('ggn[c]').reactions
type(rxns)
list(rxns)
139/67:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
list(rxns)
139/68:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
139/69:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxns[0]
139/70:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    rxn = model.reactions.get_by_id(i)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
139/71:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
rxns
139/72:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxns[0]
139/73:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    rxn = model.reactions.get_by_id(i)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for ii in rxns
        rxn = model.reactions.get_by_id(ii)
        rxn.bounds = (0,0)
139/74:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    rxn = model.reactions.get_by_id(i)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for ii in rxns:
        rxn = model.reactions.get_by_id(ii)
        rxn.bounds = (0,0)
139/75:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxns[0]
139/76:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxn = rxns[0]
139/77:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxn = rxns[0]
 model.reactions.get_by_id(ii)
139/78:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxn = rxns[0]
model.reactions.get_by_id(rxn)
139/79:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxn = rxns[0]
139/80:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    rxn = model.reactions.get_by_id(i)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
139/81:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxn = rxns[0]
139/82:
rxns = list(model.metabolites.get_by_id('ggn[c]').reactions)
type(rxns)
rxn = rxns[0]
rxns[0]
139/83:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for i in rxns_to_delete:
    rxn = model.reactions.get_by_id(i)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
139/84:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
139/85: model.reactions.r0355
139/86: model.summary()
139/87: model.reactions.get_by_id('GLPASE2')
139/88: model.reactions.get_by_id('biomass_maintenance')
139/89: model.summary()
139/90: model.reactions
139/91: type(model.reactions)
139/92: list(model.reactions)
139/93: type(list(model.reactions))
139/94: l = (type(list(model.reactions))
139/95: l = (list(model.reactions))
139/96: l.match('atp')
139/97: match(l,atp)
139/98:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))
# Example 1:
print(partial(['hello', 'world', 'python'], 'pyth'))
# ['python']
# Example 2:
print(partial(['aaa', 'aa', 'a'], 'a'))
# ['aaa', 'aa', 'a']
# Example 3:
print(partial(['aaa', 'aa', 'a'], 'b'))
# []
139/99:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))
# Example 1:
print(partial(['hello', 'world', 'python'], 'pyth'))
# ['python']
# Example 2:
print(partial(['aaa', 'aa', 'a'], 'c'))
# ['aaa', 'aa', 'a']
# Example 3:
print(partial(['aaa', 'aa', 'a'], 'b'))
# []
139/100:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))
# Example 1:
print(partial(['hello', 'world', 'python'], 'pyth'))
# ['python']
# Example 2:
print(partial(['aaa', 'aa', 'a'], 'a'))
# ['aaa', 'aa', 'a']
# Example 3:
print(partial(['aaa', 'aa', 'a'], 'b'))
# []
139/101:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))
# Example 1:
print(partial(l, 'atp'))
# ['python']
# Example 2:
print(partial(['aaa', 'aa', 'a'], 'a'))
# ['aaa', 'aa', 'a']
# Example 3:
print(partial(['aaa', 'aa', 'a'], 'b'))
# []
139/102:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))
# Example 1:
print(partial(l, 'atp'))
139/103:
l = (list(model.reactions))
type(l)
139/104: l[0]
139/105: l[0].name
139/106: l[0].annotation
139/107: l[0].id
139/108: model.reactions.id
139/109: model.reactions[0].id
139/110: l
139/111: l[1]
139/112:
l = (list(model.reactions.id))
type(l)
139/113:
for rxn in model.reactions
    print(rxn.id)
139/114:
for rxn in model.reactions:
    print(rxn.id)
139/115:
for rxn in model.reactions:
    list(rxn.id)
139/116:
for rxn in model.reactions:
    l=list(rxn.id)
139/117:
for rxn in model.reactions:
    l=list(rxn.id)
l
139/118:
for rxn in model.reactions:
    print(rxn.id)
139/119:
i=-1
for rxn in model.reactions:
    i = i + 1
    rxn[i]=rxn.id
139/120:
i=-1
for rxn in model.reactions:
    print(rxn.id)
139/121:
for rxn in model.reactions:
    print(rxn.id)
139/122:
for rxn in model.reactions:
    a.append(rxn.id)
139/123:
a=['']
for rxn in model.reactions:
    a.append(rxn.id)
139/124:
a=['']
for rxn in model.reactions:
    a.append(rxn.id)
    a
139/125:
a=['']
for rxn in model.reactions:
    a.append(rxn.id)
a
139/126:
a=[]
for rxn in model.reactions:
    a.append(rxn.id)
139/127:
a=[]
for rxn in model.reactions:
    a.append(rxn.id)
a
139/128:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
139/129:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
139/130:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
len(rxns)
139/131:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
len(model.reactions)
139/132:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
139/133:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))
# Example 1:
print(partial(rxns, 'atp'))
139/134:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
mets=[]
for met in model.metabolites:
    mets.append(met.id)
139/135:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
mets=[]
for met in model.metabolites:
    mets.append(met.id)
    
mets
141/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
141/2: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
141/3:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
141/4:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
mets=[]
for met in model.metabolites:
    mets.append(met.id)
141/5:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))
# Example 1:
print(partial(rxns, 'atp'))
141/6:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example 1:
print(partial(rxns, 'atp'))

# Example 2:
print(partial(mets, 'atp'))
142/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
142/2: time model = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
142/3:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
142/4:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
mets=[]
for met in model.metabolites:
    mets.append(met.id)
142/5:
def partial(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example 1:
print(partial(rxns, 'atp'))

# Example 2:
print(partial(mets, 'atp'))
142/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example 1:
print(match(rxns, 'atp'))

# Example 2:
print(match(mets, 'atp'))
142/7: model2 = copy(model)
142/8: model2 = model.copy()
143/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
143/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
143/3: time model = Recon3DModel_301_patch.copy()
143/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
143/5:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
mets=[]
for met in model.metabolites:
    mets.append(met.id)
143/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example 1:
print(match(rxns, 'atp'))

# Example 2:
print(match(mets, 'atp'))
143/7: lambda x: x + 1
143/8:
x=1
lambda x: x + 1
143/9:

lambda x: x + 1 (1)
143/10: (lambda x: x + 1) (1)
143/11: (lambda x: x + 1 * 4) (1)
143/12: (lambda x: x + 1 * 10) (1)
143/13: (lambda x: x + 1 * 10 + 1) (1)
143/14: (lambda x: x + 1 * 10 + 2) (1)
143/15: (lambda x: x + 1 * 10 -5) (1)
143/16: (lambda x: x + 1 * 10 -5) (6)
143/17: (lambda x: x + 1 * 3) (6)
143/18: (lambda x: x + 1 * 3) (1)
143/19: (lambda x: x * 1 * 3) (1)
143/20: (lambda x: x * 1 + 3) (1)
143/21: (lambda x: x * 3 + 1) (1)
143/22: (lambda x: x * 5 + 2) (2)
143/23: (lambda x: x + 2  * 5) (2)
143/24:  filter('atp', rxns)
143/25:  filter('atp', mets)
143/26: list(filter('atp', mets))
143/27: filter('atp', mets)
143/28: model
143/29: Recon3DModel_301_patch
143/30: time model_closed = model.copy()
143/31: model.sinks
143/32: model.exchanges
143/33: model.demands
143/34: model_closed
143/35: model_closed.reactions
143/36: rxns=model_closed.reactions
143/37:
rxns=model_closed.reactions
rxn_id=rxns[0].id
143/38:
rxns=model_closed.reactions
rxn_id=rxns[0].id
rxn_id
143/39: rxns
143/40:
rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
    
mets=[]
for met in model.metabolites:
    mets.append(met.id)
143/41: rxns
143/42: match(rxns, 'DM_')
143/43: len(match(rxns, 'DM_'))
143/44:
len(match(rxns, 'DM_'))
len(model.demands)
143/45:
print(len(match(rxns, 'DM_')))
len((model.demands))
143/46:
print(len(match(rxns, 'DM_')))
len((model.demands))
print(len(match(rxns,'sink_'))
len(model.sinks)
143/47:
print(len(match(rxns, 'DM_')))
len((model.demands))
print(len(match(rxns,'sink_')))
len(model.sinks)
143/48:
print(len(match(rxns, 'DM_')))
print(len(model.demands))
print(len(match(rxns,'sink_')))
print(len(model.sinks))
143/49:
print(len(match(rxns, 'DM_')))
print(len(model.demands))
print(len(match(rxns,'sink_')))
print(len(model.sinks))
print(len(match(rxns,'EX_')))
print(len(model.exchanges))
143/50:
print(len(match(rxns, 'DM_')))
print(len(model.demands))
print(len(match(rxns,'sink_')))
print(len(model.sinks))
print(len(match(rxns,'EX_')))
print(len(model.exchanges))
print(len(match(rxns,'biomass')))
print(len(model.exchanges))
143/51:
print(len(match(rxns, 'DM_')))
print(len(model.demands))
print(len(match(rxns,'sink_')))
print(len(model.sinks))
print(len(match(rxns,'EX_')))
print(len(model.exchanges))
print(len(match(rxns,'biomass')))
143/52: model.demands
143/53:
def list_ids(model_dictlist): 
    list_ids = []
    for id in model_dictlist:
        list_id.append(model_dictlist.id)
    return model_dictlist

rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
    
mets=[]
for met in model.metabolites:
    mets.append(met.id)
143/54:
def list_ids(model_dictlist): 
    list_ids = []
    for id in model_dictlist:
        list_id.append(model_dictlist.id)
    return model_dictlist

rxns = list_ids(model.reactions)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)

print(rxns)
print(mets)
print(genes)

rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
    
mets=[]
for met in model.metabolites:
    mets.append(met.id)
143/55:
def list_ids(model_dictlist): 
    list_ids = []
    for id in model_dictlist:
        list_id.append(model_dictlist.id)
    return model_dictlist

rxns = list_ids(model.reactions)
mets = list_ids(model.metabolites)

print(rxns)
print(mets)


rxns=[]
for rxn in model.reactions:
    rxns.append(rxn.id)
    
mets=[]
for met in model.metabolites:
    mets.append(met.id)
143/56:
def list_ids(model_dictlist): 
    list_ids = []
    for id in model_dictlist:
        list_id.append(model_dictlist.id)
    return model_dictlist
143/57: rxns = list_ids(model.reactions)
143/58: rxns = list_ids(model.genes)
143/59:
def list_ids(model_dictlist): 
    list_id = []
    for id in model_dictlist:
        list_id.append(model_dictlist.id)
    return list_id
143/60: rxns = list_ids(model.reactions)
143/61: dictlist = model.reactions
143/62:
dictlist = model.reactions
    list_id = []
    for id in dictlist:
        list_id.append(dictlist.id)
    return list_id
143/63:
dictlist = model.reactions
list_id = []
for id in dictlist:
    list_id.append(dictlist.id)
return list_id
143/64:
dictlist = model.reactions
list_id = []
for id in dictlist:
    list_id.append(dictlist.id)
143/65:
def list_ids(dictlist): 
    list_id = []
    for entry in dictlist:
        list_id.append(entry.id)
    return list_id
143/66:
dictlist = model.reactions
list_id = []
for entry in dictlist:
    list_id.append(entry.id)
143/67:
dictlist = model.reactions
list_id = []
for entry in dictlist:
    list_id.append(entry.id)
list_id
143/68:
dictlist = model.reactions
list_id = []
for entry in dictlist:
    list_id.append(entry.id)
list_id

list_ids(model.reactions)
143/69: list_ids(model.reactions)
143/70: list_ids(model.genes)
143/71:
def list_ids(dictlist): 
    list_id = []
    for element in dictlist:
        list_id.append(element.id)
    return list_id
143/72: list_ids(model.metabolites)
143/73:
def list_ids(dictlist): 
    list_id = []
    for element in dictlist:
        list_id.append(element.id)
    return list_id

rxns = list_ids(model.reactions)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
143/74:
def list_ids(dictlist): 
    list_id = []
    for element in dictlist:
        list_id.append(element.id)
    return list_id

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
143/75:
def list_ids(dictlist): 
    list_id = []
    for element in dictlist:
        list_id.append(element.id)
    return list_id

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
sink_rxns = list_ids(model.demands)
ex_rxns = list_ids(model.demands)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
143/76:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example:
print(match(rxns, 'atp'))
143/77:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
143/78:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')

match(dm_rxns_2,dm_rxns)
143/79:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')

filter(dm_rxns_2,dm_rxns)
143/80:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')

list(filter(dm_rxns_2,dm_rxns))
143/81:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')

list(filter(dm_rxns2,dm_rxns))
143/82:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')

(filter(dm_rxns2,dm_rxns))
143/83: dm_rxns[0:4]
143/84: dm_rxns[0:4] == dm_rxns1[0:4]
143/85: dm_rxns[0:4] == dm_rxns2[0:4]
143/86:
def find_non_match(lst1,lst2):
    

list(dm_rxns[0:4] == dm_rxns2[0:4])
143/87:
def find_non_match(lst1,lst2):
    

dm_rxns - dm_rxns2
143/88: dm_rxns - dm_rxns2
143/89: lst = dm_rxns - dm_rxns2
143/90: type(dm_rxns)
143/91: type(dm_rxns2)
143/92: dm_rxns == dm_rxns2
143/93:
dm_rxns == dm_rxns2

temp3 = []
for element in dm_rxns:
    if element not in dm_rxns2:
        temp3.append(element)
 
print(temp3)
143/94:
dm_rxns == dm_rxns2

temp3 = []
for element in dm_rxns2:
    if element not in dm_rxs:
        temp3.append(element)
 
print(temp3)
143/95:
dm_rxns == dm_rxns2

temp3 = []
for element in dm_rxns2:
    if element not in dm_rxns:
        temp3.append(element)
 
print(temp3)
143/96:
dm_rxns == dm_rxns2

diff = [x for x in dm_rxns2 if x not in set(dm_rxns)]

print(diff)
143/97:
dm_rxns == dm_rxns2
diff = [x for x in dm_rxns2 if x not in set(dm_rxns)]
print(diff)
143/98:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)
143/99:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

frozenset(dm_rxns)-frozenset(dm_rxns2)
143/100:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

list(frozenset(dm_rxns)-frozenset(dm_rxns2))
143/101:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

list(frozenset(dm_rxns2)-frozenset(dm_rxns1))
143/102:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

frozenset(dm_rxns2)-frozenset(dm_rxns)
143/103:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

list(frozenset(dm_rxns2)-frozenset(dm_rxns))
143/104:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

list(frozenset(dm_rxns2)-frozenset(dm_rxns))

dm_rxns2 ^ dm_rxns
143/105:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

list(frozenset(dm_rxns2)-frozenset(dm_rxns))

list(frozenset(dm_rxns2)^frozenset(dm_rxns))
143/106:

list(frozenset(dm_rxns2)^frozenset(dm_rxns))
143/107: [rxn.bounds = (0,0) for rxn in model.reactions while rxn.id = rxns_to_delete]
143/108: [rxn.bounds = (0,0) for rxn in model.reactions while rxn.id == rxns_to_delete]
143/109: model.reactions.bounds
143/110: model.reactions[0].bounds
143/111: model.reactions
143/112: model.reactions[0]
143/113: model.reactions[1]
143/114: model.reactions[2]
143/115: model.reactions
143/116: dictlist
143/117: [x.id for x in dictlist]
143/118:
def list_ids(dictlist): 
    ids = [x.id for x in dictlist]
    return ids

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
sink_rxns = list_ids(model.demands)
ex_rxns = list_ids(model.demands)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
143/119: rxns
143/120: dm_rxns
143/121: ex_rxns
143/122: [model.reactions.get_by_id(x) for x in rxns_to_delete]
143/123: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/124: [rxn.bounds = (0,0) for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/125: [rxn.bounds == (0,0) for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/126: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/127: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]] = (0,0)
143/128: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/129: [rxn.bounds=(0,0) for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/130: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/131: [rxn.bounds+1 for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/132: [rxn.bounds+(1,0) for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/133: [rxn.bounds-(1,0) for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/134: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/135: [rxn.bounds.insert() for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/136: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/137: [rxn.bounds = (0,1) for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/138: [rxn.bounds == (0,1) for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/139: model.reactions.get_by_id(rxn_id)
143/140: model.reactions.get_by_id(rxn_id).bounds
143/141: model.reactions.get_by_id(rxns_to_delete).bounds
143/142: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/143: rxns.index(rxns_to_delete)
143/144: rxns
143/145: match(rxns,'r0355')
143/146: [(0,1) for rxn.bounds in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/147: [(0,1) for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/148: model.reactions.get_by_id('r0355')
143/149: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/150: [model.reactions.get_by_id(x) for x in rxns_to_delete]
143/151: rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]
143/152: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/153: [rxn.boundary for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/154: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/155: [(0,0) for bounds in [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]]
143/156: [(1,0) for bounds in [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]]
143/157: model.reactions.get_by_id('r0355')
143/158: [(1,0) for bounds in [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]]
143/159: model.reactions.get_by_id('r0355')
143/160: [(1,10) for bounds in [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]]
143/161: model.reactions.get_by_id('r0355')
143/162: model.reactions.get_by_id('DXTRNt')
143/163: model.reactions = [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/164: model.reactions.get_by_id('DXTRNt')
143/165:  [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
143/166: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
144/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
144/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
144/3: time model = Recon3DModel_301_patch.copy()
144/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
144/5: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
144/6: [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]
144/7: [(1,10) for bounds in [rxn.bounds for rxn in [model.reactions.get_by_id(x) for x in rxns_to_delete]]]
144/8: model.reactions.get_by_id('DXTRNt')
144/9:
def list_ids(dictlist): 
    ids = [x.id for x in dictlist]
    return ids

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
sink_rxns = list_ids(model.demands)
ex_rxns = list_ids(model.demands)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
144/10: ex_rxns
144/11: model.reactions[2]
144/12:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example:
print(match(rxns, 'atp'))
144/13: time model_closed = model.copy()
144/14:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')

(filter(dm_rxns2,dm_rxns))
144/15:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

list(frozenset(dm_rxns2)-frozenset(dm_rxns))
144/16: list(frozenset(dm_rxns2)^frozenset(dm_rxns))
144/17: type(dm_rxns2)
144/18:
print(len(match(rxns, 'DM_')))
print(len(model.demands))
print(len(match(rxns,'sink_')))
print(len(model.sinks))
print(len(match(rxns,'EX_')))
print(len(model.exchanges))
print(len(match(rxns,'biomass')))
144/19:
rxns=model_closed.reactions
rxn_id=rxns[0].id
rxn_id
print(match,rxn
144/20:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
144/21:
diff = [x for x in dm_rxns2 if x not in dm_rxns]
print(diff)

list(frozenset(dm_rxns2)-frozenset(dm_rxns)) + list(frozenset(dm_rxns)-frozenset(dm_rxns2))
144/22:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns)) + list(frozenset(dm_rxns)-frozenset(dm_rxns2))
list(frozenset(sink_rxns2)-frozenset(sink_rxns)) + list(frozenset(sink_rxns)-frozenset(sink_rxns2))
144/23:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns)) + list(frozenset(dm_rxns)-frozenset(dm_rxns2))
list(frozenset(sink_rxns2)-frozenset(sink_rxns))
144/24:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns)) + list(frozenset(dm_rxns)-frozenset(dm_rxns2))
144/25: list(frozenset(sink_rxns2)-frozenset(sink_rxns))
144/26: list(frozenset(sink_rxns2)-frozenset(sink_rxns))
144/27:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
144/28: list(frozenset(sink_rxns2)-frozenset(sink_rxns))
144/29:
def list_ids(dictlist): 
    ids = [x.id for x in dictlist]
    return ids

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
sink_rxns = list_ids(model.sinks)
ex_rxns = list_ids(model.demands)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
144/30: list(frozenset(sink_rxns2)-frozenset(sink_rxns))
144/31: list(frozenset(dm_rxns2)-frozenset(dm_rxns))
144/32: list(frozenset(sink_rxns2)-frozenset(sink_rxns))  and list(frozenset(sink_rxns)-frozenset(sink_rxns2))
144/33: list(frozenset(sink_rxns2)-frozenset(sink_rxns)) or list(frozenset(sink_rxns)-frozenset(sink_rxns2))
144/34:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns)) or list(frozenset(dm_rxns)-frozenset(dm_rxns2))
144/35: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
144/36:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
144/37: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
144/38:
def list_ids(dictlist): 
    ids = [x.id for x in dictlist]
    return ids

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
sink_rxns = list_ids(model.sinks)
ex_rxns = list_ids(model.exchanges)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
144/39: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
144/40:
print(len(match(rxns, 'DM_')))
print(len(model.demands))
print(len(match(rxns,'sink_')))
print(len(model.sinks))
print(len(match(rxns,'EX_')))
print(len(model.exchanges))
print(len(match(rxns,'biomass')))
144/41:
print('demands:' len(match(rxns, 'DM_')))
print(len(model.demands))
print(len(match(rxns,'sink_')))
print(len(model.sinks))
print(len(match(rxns,'EX_')))
print(len(model.exchanges))
print(len(match(rxns,'biomass')))
144/42:
print('demands', len(match(rxns, 'DM_')))
print(len(model.demands))
print(len(match(rxns,'sink_')))
print(len(model.sinks))
print(len(match(rxns,'EX_')))
print(len(model.exchanges))
print(len(match(rxns,'biomass')))
144/43:
print("reaction IDs starting with DM_:", len(match(rxns, 'DM_')))
print("'demands':",len(model.demands))
print("reaction IDs starting with sink_:"len(match(rxns,'sink_')))
print("'sinks':"len(model.sinks))
print("reaction IDs starting with EX_:"len(match(rxns,'EX_')))
print("'exchanges':"len(model.exchanges))
print("reaction IDs containing 'biomass':"len(match(rxns,'biomass')))
144/44:
print("reaction IDs starting with DM_:", len(match(rxns, 'DM_')))
print("'demands':",len(model.demands))
print("reaction IDs starting with sink_:", len(match(rxns,'sink_')))
print("'sinks':", len(model.sinks))
print("reaction IDs starting with EX_:", len(match(rxns,'EX_')))
print("'exchanges':", len(model.exchanges))
print("reaction IDs containing 'biomass':", len(match(rxns,'biomass')))
144/45:
print("reaction IDs starting with DM_:"\n, len(match(rxns, 'DM_')))
print("'demands':",len(model.demands))
print("reaction IDs starting with sink_:", len(match(rxns,'sink_')))
print("'sinks':", len(model.sinks))
print("reaction IDs starting with EX_:", len(match(rxns,'EX_')))
print("'exchanges':", len(model.exchanges))
print("reaction IDs containing 'biomass':", len(match(rxns,'biomass')))
144/46:
print("reaction IDs starting with DM_:",\n, len(match(rxns, 'DM_')))
print("'demands':",len(model.demands))
print("reaction IDs starting with sink_:", len(match(rxns,'sink_')))
print("'sinks':", len(model.sinks))
print("reaction IDs starting with EX_:", len(match(rxns,'EX_')))
print("'exchanges':", len(model.exchanges))
print("reaction IDs containing 'biomass':", len(match(rxns,'biomass')))
144/47:
print("reaction IDs starting with DM_:",'\n', len(match(rxns, 'DM_')))
print("'demands':",len(model.demands))
print("reaction IDs starting with sink_:", len(match(rxns,'sink_')))
print("'sinks':", len(model.sinks))
print("reaction IDs starting with EX_:", len(match(rxns,'EX_')))
print("'exchanges':", len(model.exchanges))
print("reaction IDs containing 'biomass':", len(match(rxns,'biomass')))
144/48:
print("reaction IDs starting with DM_:\n", len(match(rxns, 'DM_')))
print("'demands':",len(model.demands))
print("reaction IDs starting with sink_:", len(match(rxns,'sink_')))
print("'sinks':", len(model.sinks))
print("reaction IDs starting with EX_:", len(match(rxns,'EX_')))
print("'exchanges':", len(model.exchanges))
print("reaction IDs containing 'biomass':", len(match(rxns,'biomass')))
144/49:
print("reaction IDs starting with DM_:\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs starting with sink_:\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs starting with EX_:\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
145/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
145/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
145/3: time model = Recon3DModel_301_patch.copy()
145/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
145/5: model.reactions.get_by_id('DXTRNt')
145/6:
def list_ids(dictlist): 
    ids = [x.id for x in dictlist]
    return ids

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
sink_rxns = list_ids(model.sinks)
ex_rxns = list_ids(model.exchanges)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
145/7:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example:
print(match(rxns, 'atp'))
145/8: time model_closed = model.copy()
145/9:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
145/10:
print("reaction IDs starting with DM_:\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs starting with sink_:\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs starting with EX_:\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
145/11:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
145/12: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
145/13: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
145/14: (match(rxns,'biomass'))
145/15: match(rxns,'biomass')
145/16: list(match(rxns,'biomass'))
145/17: print(match(rxns,'biomass'))
145/18:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
146/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
146/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
146/3: time model = Recon3DModel_301_patch.copy()
146/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
146/5:
def list_ids(dictlist): 
    ids = [x.id for x in dictlist]
    return ids

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
sink_rxns = list_ids(model.sinks)
ex_rxns = list_ids(model.exchanges)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
146/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example:
print(match(rxns, 'atp'))
146/7: time model_closed = model.copy()
146/8:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
146/9:
print("reaction IDs starting with DM_:\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs starting with sink_:\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs starting with EX_:\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
146/10:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
146/11: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
146/12: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
146/13: print(match(rxns,'biomass'))
147/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
147/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
147/3: time model = Recon3DModel_301_patch.copy()
147/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
147/5:
def list_ids(dictlist): 
    ids = [x.id for x in dictlist]
    return ids

rxns = list_ids(model.reactions)
dm_rxns = list_ids(model.demands)
sink_rxns = list_ids(model.sinks)
ex_rxns = list_ids(model.exchanges)
mets = list_ids(model.metabolites)
genes = list_ids(model.genes)
147/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# Example:
print(match(rxns, 'atp'))
147/7: time model_closed = model.copy()
147/8:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
147/9:
print("reaction IDs starting with DM_:\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs starting with sink_:\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs starting with EX_:\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
147/10:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
147/11: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
147/12: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
147/13: print(match(rxns,'biomass'))
147/14: [x.id for x in model.reactions]
147/15:
def list_ids(dictlist): 
    ids = [x.id for x in model.reactions]
    return ids

rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
147/16:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
148/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
148/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
148/3: time model = Recon3DModel_301_patch.copy()
148/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
148/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
148/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
148/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
148/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
148/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
148/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
148/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
148/12: print(match(rxns,'biomass'))
148/13: time model_closed = model.copy()
148/14: rxns_to_close = match(rxns, 'DM_') or  match(rxns,'sink_') or match(rxns,'EX_')
148/15:
rxns_to_close = match(rxns, 'DM_') or  match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
148/16:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
match(rxns,'EX_' or 'DM_' or 'sink_')
148/17:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
len(match(rxns,'EX_' or 'DM_' or 'sink_'))
148/18:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
len(match(rxns,'EX_' and 'DM_' and 'sink_'))
148/19:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' and 'DM_' and 'sink_'))
148/20:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' and 'DM_' or 'sink_'))
148/21:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' or 'DM_' or 'sink_'))
148/22:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' or 'DM_' or 'sink_'))

list(filter(lambda x: 'EX_' or 'DM_' or 'sink_' in x, rxns))
148/23:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' or 'DM_' or 'sink_'))

lent(list(filter(lambda x: 'EX_' or 'DM_' or 'sink_' in x, rxns)))
148/24:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' or 'DM_' or 'sink_'))

list(filter(lambda x: 'EX_' or 'DM_' or 'sink_' in x, rxns))
148/25:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' or 'DM_' or 'sink_'))

len(list(filter(lambda x: 'EX_' or 'DM_' or 'sink_' in x, rxns)))
148/26:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' or 'DM_' or 'sink_'))

len(list(filter(lambda x: 'EX_' and 'DM_' and 'sink_' in x, rxns)))
148/27:
rxns_to_close = match(rxns, 'DM_') or match(rxns,'sink_') or match(rxns,'EX_')
len(rxns_to_close)
(match(rxns,'EX_' or 'DM_' or 'sink_'))

len(list(filter(lambda x: 'EX_' and lambda x: 'DM_' and lambda x: 'sink_' in x, rxns)))
148/28: 'a' in 'apple'
148/29: 'b' in 'apple'
148/30: 'a' in ['apple', 'pear']
148/31: ['a' 'a'] in ['apple', 'pear']
148/32: ['a', 'a'] in ['apple', 'pear']
148/33: ['a', 'a']
148/34: ['a' 'a']
148/35:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
test_list1 = [5, 7, 8, 9, 10, 11]
test_list2 = [8, 10, 11]
  
# printing original lists
print("The original list 1 is : " + str(test_list1))
print("The original list 2 is : " + str(test_list2))
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
temp = set(test_list2)
res = [i for i, val in enumerate(test_list1) if val in temp]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/36:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
test_list1 = ['DM_', 'sink_', 'EX_']
test_list2 = rxns
  
# printing original lists
print("The original list 1 is : " + str(test_list1))
print("The original list 2 is : " + str(test_list2))
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
temp = set(test_list2)
res = [i for i, val in enumerate(test_list1) if val in temp]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/37:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
test_list1 = ['DM_', 'sink_', 'EX_']
test_list2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
temp = set(test_list2)
res = [i for i, val in enumerate(test_list1) if val in temp]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/38:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
test_list1 = ['DM_', 'sink_', 'EX_']
test_list2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
temp = set(test_list1)
res = [i for i, val in enumerate(test_list2) if val in temp]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/39:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
test_list1 = ['DM_', 'sink_', 'EX_']
test_list2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
temp = set(test_list1)
res = [i for i, val in enumerate(test_list2) if val in temp]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/40:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
temp = set(lst2)
res = [i for i, val in enumerate(lst2) if val in lst1]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/41:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
temp = set(lst1)
res = [i for i, val in enumerate(lst2) if val in lst1]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/42:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
temp = set(lst1)
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/43:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/44:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
enumerate(lst2)
148/45:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
enumerate(lst2[1])
148/46:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2
148/47:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2.enumerate()
148/48:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2
148/49:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2

enumerate(lst2)
148/50:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2

enumerate(lst2)[1]
148/51:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2

lst=enumerate(lst2)
148/52:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2

lst=enumerate(lst2)
lst
148/53:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2

lst=list(enumerate(lst2))
lst
148/54:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_','10FTHF5GLUtl']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2

lst = list(enumerate(lst2))
lst
148/55:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_','10FTHF6GLUtl']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
lst2

lst = list(enumerate(lst2))
lst
148/56:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_','10FTHF6GLUtl']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, val in enumerate(lst2) if val in set(lst1)]
  
# printing result 
print("The matching element Indices list : " + str(res))
148/57:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_','10FTHF6GLUtl']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, x in enumerate(rxns) if x in set(lst1)]
  
    

# printing result 
print("The matching element Indices list : " + str(res))
148/58:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_','10FTHF6GLUtl']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, x in enumerate(rxns) if set(lst1) in x]
  


# printing result 
print("The matching element Indices list : " + str(res))
148/59:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_','10FTHF6GLUtl']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, x in enumerate(rxns) if x in set(lst1)]
  


# printing result 
print("The matching element Indices list : " + str(res))
148/60:
# Python3 code to demonstrate working of
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
  
# initializing lists
lst1 = ['DM_', 'sink_', 'EX_','10FTHF6GLUtl']
lst2 = rxns
  
# Indices list of matching element from other list
# Using list comprehension + set() + enumerate()
res = [i for i, x in enumerate(rxns) if x in set(lst1)]
  
rxns.search('DM_')

# printing result 
print("The matching element Indices list : " + str(res))
148/61: lambda x: 'DM_' in x, rxns
148/62: filter(lambda x: 'DM_' in x, rxns)
148/63: list(filter(lambda x: 'DM_' in x, rxns))
148/64: list(filter(lambda x: ['DM_','EX_'] in x, rxns))
148/65: list(filter(lambda x: 'DM_' or 'EX_' in x, rxns))
148/66: list(filter(lambda x: 'DM_' | 'EX_' in x, rxns))
148/67: list(filter(lambda x: 'DM_' and 'EX_' in x, rxns))
148/68: len(list(filter(lambda x: 'DM_' and 'EX_' in x, rxns)))
148/69: len(list(filter(lambda x: 'DM_' in x, rxns)))
148/70: len(list(filter(lambda x: 'EX_' in x, rxns)))
148/71: len(list(filter(lambda x: 'EX_' in x or 'DM_' in x, rxns)))
148/72: len(list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns)))
148/73: list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
148/74: rxns_to_delete = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
148/75:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[rxn.bounds for rxn in model_closed.reactions]
148/76:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[rxn.lb for rxn in model_closed.reactions]
148/77:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[rxn.lower_bound for rxn in model_closed.reactions]
148/78:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[0 = rxn.lower_bound for rxn in model_closed.reactions]
148/79:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[rxn.lower_bound for rxn in model_closed.reactions]
148/80:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[rxn.lower_bound=0 for rxn in model_closed.reactions]
148/81:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[rxn.lower_bound*0 for rxn in model_closed.reactions]
148/82:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[rxn.lower_bound for rxn in model_closed.reactions]
148/83:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
[rxn.lower_bound for rxn in model_closed.reactions]
148/84:
rxns_to_close = list(filter(lambda x: 'EX_' in x or 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.upper_bound = 0
148/85:
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.lower_bound = 0
    
rxns_to_close_up = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_up:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.upper_bound = 0
148/86: [rxn.bounds for rxn in model_closed.reactions)
148/87: [rxn.bounds for rxn in model_closed.reactions]
148/88: [rxn.bounds for rxn in model_closed.exhanges]
148/89: [rxn.bounds for rxn in rxns]
148/90: [rxn.bounds for rxn in model_closed.reactions]
152/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
152/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
152/3: time model = Recon3DModel_301_patch.copy()
152/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
152/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
152/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
152/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
152/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
152/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
152/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
152/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
152/12: print(match(rxns,'biomass'))
152/13: time model_closed = model.copy()
152/14:
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.lower_bound = 0
    
rxns_to_close_up = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_up:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.upper_bound = 0
152/15: [rxn.bounds for rxn in model_closed.reactions]
153/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
153/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
153/3: time model = Recon3DModel_301_patch.copy()
153/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
153/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
153/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
153/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
153/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
153/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
153/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
153/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
153/12: print(match(rxns,'biomass'))
153/13: time model_closed = model.copy()
153/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    rxn = model_closed.reactions.get_by_id(rxn_id)
    rxn.lower_bound = 0

# close upper boundaries
rxns_to_close_up = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_up:
    rxn = model_closed.reactions.get_by_id(rxn_id)
    rxn.upper_bound = 0
153/15:
FBA = model.optimise()
FBA_closed = model_closed.optimise()
153/16:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
153/17: FBA
153/18: FBA_closed
153/19: ID = "DM_atp_c_"
153/20:
ID = "DM_atp_c_"
model.objective()=ID
153/21:
ID = "DM_atp_c_"
model.objective(ID)
153/22:
ID = "DM_atp_c_"
model.objective = ID
153/23:
ID = "DM_atp_c_"
model.objective = ID
rxn=model.reactions.get_by_id(ID)
153/24:
ID = "DM_atp_c_"
model.objective = ID
rxn=model.reactions.get_by_id(ID)
rxn
153/25:
ID = "DM_atp_c_"
model.objective = ID
rxn=model_closed.reactions.get_by_id(ID)
rxn
153/26:
ID = "DM_atp_c_"
model.objective = ID
rxn=model.reactions.get_by_id(ID)
rxn
153/27:
ID = "DM_atp_c_"
model.objective = ID
rxn=model.reactions.get_by_id(ID).bounds
rxn
153/28:
ID = "DM_atp_c_"
model.objective = ID
model.reactions.get_by_id(ID).bounds = (-1000,1000)
rxn
153/29:
ID = "DM_atp_c_"
model.objective = ID
model.reactions.get_by_id(ID).bounds = (-1000,1000)
rxn
153/30:
ID = "DM_atp_c_"
model.objective = ID
model.reactions.get_by_id(ID).bounds = (-1000,1000)
model.reactions.get_by_id(ID).bounds
153/31:
# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")

def set_objective(model, ID):
    model.objective = ID
    model.reactions.get_by_id(ID).bounds = (-1000,1000)
    return model
153/32:
# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")

def set_objective(model, ID):
    model.objective = ID
    model.reactions.get_by_id(ID).bounds = (-1000,1000)
    return model
153/33:

def set_objective(model, ID):
    model.objective = ID
    model.reactions.get_by_id(ID).bounds = (-1000,1000)
    return model
# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
153/34: model
153/35:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
153/36: FBA
153/37: FBA_closed
153/38: lb=-1000
153/39:
lb=-1000
ub=1000
(lb,ub)
153/40:
def set_bounds_rxn(model, rxn_ID, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model


lb=-1000
ub=1000
(lb,ub)
153/41:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_up = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_up:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
    
# open lower boundaries to let DMEM metabolites in
153/42:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
    
# open lower boundaries to let DMEM metabolites in
153/43:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
153/44:
import pandas as pd
reaction_bounds = 'Opening_reactions2.xlsx' # filename of model
df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
print(df)
153/45:
import pandas as pd
reaction_bounds = Path(.) / 'Opening_reactions2.xlsx' # filename of model
folderPath = folderPath.resolve() 
df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
print(df)
153/46:
import pandas as pd
reaction_bounds = Path(.) / 'Opening_reactions2.xlsx' # filename of model
folderPath = folderPath.resolve(reaction_bounds) 
print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
153/47:
import pandas as pd
reaction_bounds = Path('.') / 'Opening_reactions2.xlsx' # filename of model
folderPath = folderPath.resolve(reaction_bounds) 
print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
153/48:
import pandas as pd
reaction_bounds = Path('.') / 'Opening_reactions2.xlsx' # filename of model
folderPath = folderPath.resolve(reaction_bounds) 
print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
153/49:
import pandas as pd
reaction_bounds = Path('.') / 'reaction_bounds' / 'Opening_reactions2.xlsx' # filename of model
folderPath = folderPath.resolve(reaction_bounds) 
print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
153/50:
import pandas as pd
reaction_bounds = Path('.') / 'reaction_bounds' / 'Opening_reactions2.xlsx' # filename of model
folderPath = folderPath.resolve(reaction_bounds) 
print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
153/51:
import pandas as pd
reaction_bounds = Path('.') / 'reaction_bounds' / 'Opening_reactions2.xlsx' # filename of model
folderPath = folderPath.resolve(Path('.') / 'reaction_bounds') 
print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
153/52:
import pandas as pd
reaction_bounds = Path('.') / 'reaction_bounds' / 'Opening_reactions2.xlsx' # filename of model
folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
153/53: import pathlib
154/1:
import pathlib
import pandas as pd
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
154/2:
import pathlib
import Path
import pandas as pd
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
154/3:
from pathlib import Path
import pandas as pd
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
155/1:
from pathlib import Path
import pandas as pd
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
155/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
155/3: time model = Recon3DModel_301_patch.copy()
155/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
155/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
155/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
155/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
155/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
155/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
155/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
155/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
155/12: print(match(rxns,'biomass'))
155/13: time model_closed = model.copy()
155/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
    
# open lower boundaries to let DMEM metabolites in
155/15:
#reaction_bounds = Path('.') / 'reaction_bounds' / 'Opening_reactions2.xlsx' # filename of model
#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
155/16:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
155/17:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
155/18: FBA_closed
155/19:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
155/20: FBA_closed
155/21:
# open lower boundaries to let DMEM metabolites in
Path.cwd()
155/22:
# open lower boundaries to let DMEM metabolites in
Path.cwd()
155/23:
# open lower boundaries to let DMEM metabolites in
Path.cwd()
155/24:
# open lower boundaries to let DMEM metabolites in
Path.cwd() / 'reaction_bounds'
155/25:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
Path.cwd() / 'reaction_bounds' / reaction_bounds_file



#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
155/26:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
pd.read_excel(p)


#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
155/27: Path.cwd() / 'reaction_bounds' / reaction_bounds_file
155/28:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')


#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
155/29:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
#pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')


#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
156/1:
from pathlib import Path
import pandas as pd
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
156/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
156/3: time model = Recon3DModel_301_patch.copy()
156/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
156/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
156/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
156/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
156/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
156/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
156/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
156/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
156/12: print(match(rxns,'biomass'))
156/13: time model_closed = model.copy()
156/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
156/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
156/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
156/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
156/18: FBA_closed
156/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
#pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')


#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
156/20: Path.cwd() / 'reaction_bounds' / reaction_bounds_file
156/21:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')


#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
160/1:
from pathlib import Path
import pandas as pd
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
160/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
160/3: time model = Recon3DModel_301_patch.copy()
160/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
160/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
160/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
160/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
160/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
160/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
160/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
160/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
160/12: print(match(rxns,'biomass'))
160/13: time model_closed = model.copy()
160/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
160/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
160/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
160/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
160/18: FBA_closed
160/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
#pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')


#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
160/20: Path.cwd() / 'reaction_bounds' / reaction_bounds_file
160/21:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
pd.read_excel(reaction_bounds_file)
160/22:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
pd.read_excel(p)
160/23:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')
164/1:
from pathlib import Path
import pandas as pd
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
164/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
164/3: time model = Recon3DModel_301_patch.copy()
164/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
164/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
164/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
164/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
164/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
164/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
164/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
164/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
164/12: print(match(rxns,'biomass'))
164/13: time model_closed = model.copy()
164/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
164/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
164/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
164/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
164/18: FBA_closed
164/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
#pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')


#folderPath = folderPath.resolve(Path('.') / 'Opening_reactions2.xlsx') 
#print(folderPath)
# df = pd.read_excel(r'Path where the Excel file is stored\File name.xlsx')
# print(df)
164/20: Path.cwd() / 'reaction_bounds' / reaction_bounds_file
164/21:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
#pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')
164/22:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p=Path.cwd() / 'reaction_bounds' / reaction_bounds_file
pd.read_excel('C:/Users/prins/git/COBRA_project_SP/reaction_bounds/Opening_reactions2.xlsx')
pd.read_excel(p)
164/23:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df=pd.read_excel(p)
164/24: df
164/25: df.Reactions
164/26: type df
164/27: type(df)
164/28:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = xlrd.read_excel(p)
164/29:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = xlrd(p)
164/30:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)
164/31:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)

 xlrd.open_workbook(p)
164/32:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)

xlrd.open_workbook(p)
164/33:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)

import xlrd
xlrd.open_workbook(p)
164/34:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)
df.head
164/35:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)
df
164/36:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)
df.Reactions
164/37:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)
df.Reactions[1]
164/38:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)
length(df)
164/39:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
p = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
df = pd.read_excel(p)
len(df)
164/40:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

len(reaction_bounds)
164/41:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

len(reaction_bounds)
164/42: reaction_bounds.Reaction
164/43: reaction_bounds.Reactions
164/44: reaction_bounds.Reactions[1]
164/45: reaction_bounds.Reactions[:]
164/46: reaction_bounds.Reactions[0:end]
164/47: reaction_bounds.Reactions[0]
164/48:
reaction_bounds.Reactions[0]

reaction_bounds.lb[0]
164/49:
reaction_bounds.Reactions[0]

reaction_bounds.lb[0]
reaction_bounds.ub[0]
164/50:
reaction_bounds.Reactions[0]

(reaction_bounds.lb[0], reaction_bounds.ub[0])
164/51:     model.reactions.find_by_id(reaction_bounds.Reactions[0])
164/52: model.reactions.find_by_id(reaction_bounds.Reactions[0])
164/53: model.reactions.find_by_id(rxn_id)
164/54:
for rxn in reaction_bounds:
    rxn_id = reaction_bounds.Reaction
    return print(rxn_id)
    model.reactions.get_by_id(rxn_id).bounds

(reaction_bounds.lb[0], reaction_bounds.ub[0])
164/55:
for rxn in reaction_bounds:
    rxn_id = reaction_bounds.Reaction
    return print(rxn_id)
164/56:
for rxn in reaction_bounds:
    rxn_id = reaction_bounds.Reaction
return print(rxn_id)
164/57:
for rxn in reaction_bounds:
    rxn_id = reaction_bounds.Reaction
    print(rxn_id)
164/58:
for i in len(reaction_bounds):
    rxn_id = reaction_bounds.Reaction[i]
    model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/59:
for i in range(len(reaction_bounds)):
    rxn_id = reaction_bounds.Reaction[i]
    model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/60: model.reactions.EX_lys_L[e]
164/61: model.reactions.gret_by_id('EX_lys_L[e]')
164/62: model.reactions.get_by_id('EX_lys_L[e]')
164/63:
for i in range(len(reaction_bounds)):
    rxn_id = reaction_bounds.Reaction[i]
    model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/64:
for i in range(81):
    rxn_id = reaction_bounds.Reaction[i]
    model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/65:
i=81
rxn_id = reaction_bounds.Reaction[i]
model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/66:
i=81
rxn_id = reaction_bounds.Reaction[i]
#model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/67:
i=81
reaction_bounds.Reaction[i]
#model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/68:
i=81
reaction_bounds.Reaction[81']
#model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/69:
i=81
reaction_bounds.Reaction[81]
#model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/70:
for i in range(len(reaction_bounds)):
    rxn_id = reaction_bounds.Reactions[i]
    model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
164/71: rxn_id = reaction_bounds.Reactions[i]
164/72:
rxn_id = reaction_bounds.Reactions[i]
rxn_id
164/73: model.reactions.get_by_id('EX_clpn_hs[e]')
164/74: model.reactions.get_by_id('EX_clpn_hs[e]')
164/75: reaction_bounds.Reactions[0]
164/76:
rxn_id = reaction_bounds.Reactions[i]
model.reactions.get_by_id(rxn_id)
164/77:
rxn_id = reaction_bounds.Reactions[i]
match(rxns,rxn_id)
164/78: model.reactions.get_by_id('EX_arg_L[e]')
164/79: model.reactions.get_by_id('EX_acetone[e]')
164/80:
rxn_id = reaction_bounds.Reactions[0]
type(rxn_id)
164/81:
rxn_id = reaction_bounds.Reactions[0]
model.reactions.get_by_id(rxn_id)
164/82:
rxn_id = reaction_bounds.Reactions[0]


model.reactions.get_by_id(rxn_id)
164/83:
for rxn in reaction_bounds:
    print(model.reactions.get_by_id(rxn.Reactions)
164/84:
for rxn in reaction_bounds:
    print(model.reactions.get_by_id(rxn.Reactions))
164/85: reaction_bounds[0]
164/86:
for rxn in reaction_bounds.Reactions:
    print(model.reactions.get_by_id(rxn.Reactions))
164/87:
for rxn in reaction_bounds.Reactions:
    print(model.reactions.get_by_id(rxn))
164/88: reaction_bounds.Reactions
164/89: model.reactions.get_by_id('X_clpn_hs[e]')
164/90: model.reactions.get_by_id('EX_arg_L[e]')
164/91: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns) or frozenset(reaction_bounds.Reactions)-frozenset(rxns))
164/92: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns)
164/93: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
164/94: match(rxns,'EX_iso')
164/95:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_iso'))
164/96:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_rbflv'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dtmpt'))
print(match(rxns,'EX_xolest'))
164/97:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_rb'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dtmpt'))
print(match(rxns,'EX_xolest'))
164/98:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dtmpt'))
print(match(rxns,'EX_xolest'))
164/99:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/100:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_g6'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/101:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_g'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/102:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_gp'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/103:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_gp6'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/104:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_g6'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/105:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'g6p'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/106:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_g'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/107:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'6'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/108:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(match(rxns,'6'),'EX_'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/109: print(match(match(rxns,'6'),'EX_'))
164/110: print(match(match(match(rxns,'6'),'EX_'),'g'))
164/111: print(match(match(match(rxns,'6'),'EX_'),'p'))
164/112: print(match(match(match(rxns,'6'),'EX_'),'g'))
164/113:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
164/114: print(match(match(rxns,'EX_'),'L')
164/115: print(match(match(rxns,'EX_'),'L'))
164/116: print(match(match(rxns,'EX_'),'_L'))
164/117: print(match(match(match(rxns,'EX_'),'_L')'iso'))
164/118: print(match(match(match(rxns,'EX_'),'_L')'iso')))
164/119: print(match(match(match(rxns,'EX_'),'_L')'iso'))
164/120: print(match(match(match(rxns,'EX_'),'_L'),'iso'))
164/121: print(match(match(match(rxns,'EX_'),'_L'),'is'))
164/122: print(match(match(match(rxns,'EX_'),'_L'),''))
164/123:
for rxn in reaction_bounds.Reactions:
    print(model.reactions.get_by_id(rxn))
164/124:
list(frozenset(rxns)-frozenset(reaction_bounds.Reactions))

for rxn in reaction_bounds.Reactions:
    
    print(model.reactions.get_by_id(rxn))
164/125: list(frozenset(rxns)-frozenset(reaction_bounds.Reactions))
164/126:
list(frozenset(rxns)==frozenset(reaction_bounds.Reactions))

for rxn in reaction_bounds.Reactions:
    
    print(model.reactions.get_by_id(rxn))
164/127: list(frozenset(rxns)=frozenset(reaction_bounds.Reactions))
164/128: list(frozenset(rxns) is member frozenset(reaction_bounds.Reactions))
164/129: list(frozenset(rxns) is frozenset(reaction_bounds.Reactions))
164/130: list(memer(frozenset(rxns), frozenset(reaction_bounds.Reactions)))
164/131: list(member(frozenset(rxns), frozenset(reaction_bounds.Reactions)))
164/132: list(member(frozenset(rxns), frozenset(reaction_bounds.Reactions)))
164/133: list(match(frozenset(rxns), frozenset(reaction_bounds.Reactions)))
164/134: list(match(rxns, reaction_bounds.Reactions))
164/135: list(~frozenset(reaction_bounds.Reactions)-frozenset(rxns))
164/136: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
164/137:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
rxns = [x.id for x in model.reactions and in reaction_bounds.Reactions]
164/138:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
rxns = [x.id for x in model.reactions and reaction_bounds.Reactions]
164/139:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
listt3=[ 1 if i in reaction_bounds.Reactions else 0 for i in rxns]
164/140:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
listt3=[ 1 if i in reaction_bounds.Reactions else 0 for i in rxns]
listt3
164/141:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
list3 = set(rxns).intersection(reaction_bounds.Reactions)
164/142:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
list3 = set(rxns).intersection(reaction_bounds.Reactions)
print(list3)
164/143:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
list3 = set(rxns).intersection(reaction_bounds.Reactions)
list(list3)
164/144:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
list3 = set(rxns).intersection(reaction_bounds.Reactions)
list(list3)
len(list3)
164/145:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
list3 = set(reaction_bounds.Reactions).intersection(rxns)
list(list3)
len(list3)
164/146:
list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
list3 = reaction_bounds.Reactions.intersection(rxns)
list(list3)
len(list3)
164/147:
for rxn in reaction_bounds.Reactions:
    print(model.reactions.get_by_id(rxn))
164/148:
for rxn in reaction_bounds.Reactions:
    (model.reactions.get_by_id(rxn))
164/149:
for rxn in reaction_bounds.Reactions:
    try: print(model.reactions.get_by_id(rxn))
164/150:
for rxn in reaction_bounds.Reactions:
    try: print(model.reactions.get_by_id(rxn))
        except KeyError: continue
164/151:
for rxn in reaction_bounds.Reactions:
    try: print(model.reactions.get_by_id(rxn))
    except KeyError: continue
164/152:
for rxn in reaction_bounds.Reactions:
    try: rxn = model.reactions.get_by_id(rxn)
    except KeyError: continue
164/153:
for rxn in reaction_bounds:
    try: rxn = model.reactions.get_by_id(rxn.Reactions)
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
164/154: reaction_bounds
164/155: reaction_bounds.Reactions
164/156: reaction_bounds[0]
164/157: reaction_bounds[1]
164/158: reaction_bounds[0,:]
164/159: reaction_bounds
164/160:
for rxn in reaction_bounds:
    try: rxn = model.reactions.get_by_id(rxn.Reactions)
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    rxn.bounds = (rxn.lb,rxn.ub)
164/161:
for rxn in reaction_bounds:
    try: rxn = model.reactions.get_by_id(rxn.Reactions)
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    rxn.bounds = (reaction_bounds.lb,reaction_bounds.ub)
164/162:  (reaction_bounds.lb,reaction_bounds.ub)
164/163: reaction_bounds
164/164: type(reaction_bounds)
164/165: reaction_bounds.sum()
164/166: reaction_bounds.shape
164/167: reaction_bounds.describe()
164/168: type(model)
164/169: a=[1,2,3;1,2,3]
164/170: a=[1,2,3,1,2,3]
164/171: reaction_bounds.plot()
164/172: reaction_bounds.plot
164/173: reaction_bounds.plot()
167/1: data = np.array([1, 2, 3])
167/2:
import numpy as np
data = np.array([1, 2, 3])
167/3:
import numpy as np
data = np.array([1, 2, 3])
data
167/4:
import numpy as np
data = np.array([1, 2, 3])
data[1]
167/5:
import numpy as np
data = np.array([1, 2, 3])
data[0]
167/6:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
167/7:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[6]
167/8:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[0]
167/9:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[0,1]
167/10:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[,1]
167/11:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[1,1]
167/12:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[0,0]
167/13:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[0,2]
167/14:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[0,1]
167/15:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[1,1]
167/16:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[1,1]

a[a%2==0]
167/17:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[1,1]

[a%2==0]
167/18:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[1,1]

a[a%2==0]
167/19:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[1,1]

a[a%1==0]
167/20:
import numpy as np
a = np.array([[1 , 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a[1,1]

a[a%3==0]
167/21: reaction_bounds.lb[1]
167/22: reaction_bounds.lb
167/23: reaction_bounds
167/24: reaction_bounds
168/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
168/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
168/3: time model = Recon3DModel_301_patch.copy()
168/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
168/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
168/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
168/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
168/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
168/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
168/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
168/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
168/12: print(match(rxns,'biomass'))
168/13: time model_closed = model.copy()
168/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
168/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
168/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
168/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
168/18: FBA_closed
168/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

len(reaction_bounds)
168/20: reaction_bounds.Reactions
168/21:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
168/22: print(match(match(match(rxns,'6'),'EX_'),'g'))
168/23: print(match(match(match(rxns,'EX_'),'_L'),''))
168/24: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
168/25:
for rxn in reaction_bounds:
    try: rxn = model.reactions.get_by_id(rxn.Reactions)
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    rxn.bounds = (reaction_bounds.lb,reaction_bounds.ub)
168/26: rxn.bounds
168/27: model.reactions.get_by_id(rxn.Reactions)
168/28: model.reactions.get_by_id(rxn.Reactions[0])
168/29: model.reactions.get_by_id(rxn.Reactions[0])
168/30: len(reaction_bounds)
168/31:
for rxn in range(len(reaction_bounds)):
    try: rxn = model.reactions.get_by_id(rxn.Reactions[i])
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    rxn.bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
168/32:
for rxn in range(len(reaction_bounds)):
    try: rxn = model.reactions.get_by_id(reaction_bounds.Reactions[i])
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    rxn.bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
168/33: reaction_bounds.Reactions[0]
168/34:
reaction_bounds.Reactions[0]
reaction_bounds.lb[i]
168/35:
reaction_bounds.Reactions[0]
reaction_bounds.lb[0]
168/36:
reaction_bounds.Reactions[0]
reaction_bounds.lb[0:8]
168/37:
reaction_bounds.Reactions[3]
reaction_bounds.lb[3]
168/38:
reaction_bounds.Reactions[3]
reaction_bounds.lb[3]
model.reactions.get_by_id(reaction_bounds.Reactions[3])
168/39:
reaction_bounds.Reactions[3]
reaction_bounds.lb[3]
model.reactions.get_by_id(reaction_bounds.Reactions[3]).bounds
168/40:
reaction_bounds.Reactions[3]
reaction_bounds.lb[3]
model.reactions.get_by_id(reaction_bounds.Reactions[3]).bounds = (reaction_bounds.lb[3],reaction_bounds.ub[3])
168/41:
reaction_bounds.Reactions[3]
reaction_bounds.lb[3]
model.reactions.get_by_id(reaction_bounds.Reactions[3]).bounds = (reaction_bounds.lb[3],reaction_bounds.ub[3])
model.reactions.get_by_id(reaction_bounds.Reactions[3])
168/42:
for rxn in range(len(reaction_bounds)):
    try: model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
168/43:
reaction_bounds.Reactions[3]
reaction_bounds.lb[3]
model.reactions.get_by_id(reaction_bounds.Reactions[3]).bounds = (reaction_bounds.lb[3],reaction_bounds.ub[3])
model.reactions.get_by_id(reaction_bounds.Reactions[3])
168/44:
reaction_bounds.Reactions[3]

model.reactions.get_by_id(reaction_bounds.Reactions[3])
reaction_bounds.lb
168/45:
reaction_bounds.Reactions[3]

model.reactions.get_by_id(reaction_bounds.Reactions[78])
168/46:
reaction_bounds.Reactions[3]

model.reactions.get_by_id(reaction_bounds.Reactions[78])
168/47:
reaction_bounds.Reactions[3]

model.reactions.get_by_id(reaction_bounds.Reactions[3])
168/48:
reaction_bounds.Reactions[3]

model.reactions.get_by_id(reaction_bounds.Reactions[78])
168/49:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds
168/50:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[4]).bounds
168/51:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[10]).bounds
168/52:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[0:10]).bounds
168/53:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[0:2]).bounds
168/54:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[0]).bounds
168/55:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[1]).bounds
168/56: type(reaction_bounds)
168/57:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[2]).bounds
168/58:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[4]).bounds
168/59:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[5]).bounds
168/60:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[6]).bounds
168/61:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[7]).bounds
168/62:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[8]).bounds
168/63:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[9]).bounds
168/64:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions[10]).bounds
168/65:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])

model.reactions.get_by_id(reaction_bounds.Reactions['EX_hco3[e']).bounds
168/66:
for rxn in range(len(reaction_bounds)):
    try: 
        model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: 
        continue # because there are some mistakes in the Reaction names (have to be fixed)
168/67:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])
168/68:
for rxn in range(len(reaction_bounds)):
    try: 
        model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: 
        continue # because there are some mistakes in the Reaction names (have to be fixed)
168/69:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])
168/70:
for rxn in range(len(reaction_bounds)):
    try: 
       print( model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i]))
    except KeyError: 
        continue # because there are some mistakes in the Reaction names (have to be fixed)
168/71:
for rxn in range(len(reaction_bounds)):
    try: 
       print(model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i]))
    except KeyError: 
        continue # because there are some mistakes in the Reaction names (have to be fixed)
168/72:
for rxn in range(len(reaction_bounds)):
    try: 
       print(reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: 
        continue # because there are some mistakes in the Reaction names (have to be fixed)
168/73:
for rxn in range(len(reaction_bounds)):
    try: 
       print(reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: 
        continue # because there are some mistakes in the Reaction names (have to be fixed)
168/74:
for rxn in range(len(reaction_bounds)):
    try: 
        model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: 
        pass # because there are some mistakes in the Reaction names (have to be fixed)
168/75:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])
168/76:
for i in range(len(reaction_bounds)):
    try: 
        model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: 
        pass # because there are some mistakes in the Reaction names (have to be fixed)
168/77:
reaction_bounds.Reactions[3]
model.reactions.get_by_id(reaction_bounds.Reactions[78])
168/78:
for i in range(len(reaction_bounds)):
    try: 
        model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: 
        continue # because there are some mistakes in the Reaction names (have to be fixed)
169/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
169/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
169/3: time model = Recon3DModel_301_patch.copy()
169/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
169/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
169/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
169/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
169/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
169/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
169/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
169/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
169/12: print(match(rxns,'biomass'))
169/13: time model_closed = model.copy()
169/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
169/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
169/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
169/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
169/18: FBA_closed
169/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

len(reaction_bounds)
169/20: reaction_bounds.Reactions
169/21:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
169/22: print(match(match(match(rxns,'6'),'EX_'),'g'))
169/23: print(match(match(match(rxns,'EX_'),'_L'),''))
169/24: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
169/25:
for i in range(len(reaction_bounds)):
    try: 
        model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: 
        continue # because there are some mistakes in the Reaction names (have to be fixed)
169/26: model.reactions.get_by_id(reaction_bounds.Reactions[78])
169/27:
rxn_id = reaction_bounds.Reactions[i]
match(rxns,rxn_id)
169/28:
for i in range(len(reaction_bounds)):
    rxn_id = reaction_bounds.Reactions[i]
    model.reactions.get_by_id(rxn_id).bounds = (reaction_bounds.lb[i], reaction_bounds.ub[i])
169/29:
for i in range(len(reaction_bounds)):
    try: model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
170/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
170/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
170/3: time model = Recon3DModel_301_patch.copy()
170/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
170/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
170/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
170/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
170/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
170/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
170/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
170/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
170/12: print(match(rxns,'biomass'))
170/13: time model_closed = model.copy()
170/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
170/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
170/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
170/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
170/18: FBA_closed
170/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

len(reaction_bounds)
170/20: reaction_bounds.Reactions
170/21:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
170/22: print(match(match(match(rxns,'6'),'EX_'),'g'))
170/23: print(match(match(match(rxns,'EX_'),'_L'),''))
170/24: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
170/25:
for i in range(len(reaction_bounds)):
    try: model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
    except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
170/26: model.reactions.get_by_id(reaction_bounds.Reactions[78])
170/27:
rxn_id = reaction_bounds.Reactions[i]
match(rxns,rxn_id)
170/28: model.reactions.get_by_id('EX_arg_L[e]')
170/29: model.reactions.get_by_id('EX_acetone[e]')
170/30:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds):
    for i in range(len(reaction_bounds)):
        try: model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model
170/31:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds):
    for i in range(len(reaction_bounds)):
        try: model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model)
model_closed = let_media_components_in(model_closed)
170/32:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds):
    for i in range(len(reaction_bounds)):
        try: model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i],reaction_bounds.ub[i])
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds)
model_closed = let_media_components_in(model_closed,reaction_bounds)
170/33: model_closed.reactions[78]
170/34: model_closed.reactions[79]
170/35: model_closed.reactions[3]
170/36: model_closed.reactions[2]
170/37: model.reactions[3]
170/38: reaction_bounds
170/39: model_closed.reactions.get_by_id('EX_arg_L[e]')
170/40:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
170/41: FBA_closed
170/42: FBA_open
170/43: model_closed.summary()
170/44: reaction_bounds.lb[1]
170/45: reaction_bounds.lb[3]
170/46: reaction_bounds.lb[3]/10
170/47:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds,mult):
    for i in range(len(reaction_bounds)):
        try: model.reactions.get_by_id(reaction_bounds.Reactions[i]).bounds = (reaction_bounds.lb[i]*mult,reaction_bounds.ub[i]*mult)
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds,1/10)
model_closed = let_media_components_in(model_closed,reaction_bounds,1/10)
170/48:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
170/49: model_closed.summary()
170/50: model.summary()
170/51: reaction_bounds{1,:}
170/52: reaction_bounds[{1,:}]
170/53: reaction_bounds[1,:]
170/54: reaction_bounds{1}
170/55: reaction_bounds{1,0}
170/56: reaction_bounds.columns[1]
170/57: reaction_bounds.columns[0]
170/58: reaction_bounds.plot()
170/59: model.plot()
170/60: reaction_bounds.plot()
170/61: reaction_bounds.explode()
170/62: reaction_bounds.explode(1)
170/63: reaction_bounds.explode
170/64: a=reaction_bounds.explode
170/65:
a=reaction_bounds.explode
a[1]
170/66:
a=reaction_bounds.explode
a{1}
170/67:
a=reaction_bounds.explode
a
170/68: reaction_bounds
170/69: reaction_bounds.iloc[0,1]
170/70: reaction_bounds.iloc[0,:]
170/71: reaction_bounds.iloc[:,1]
170/72: reaction_bounds.iloc[:,0]
170/73: reaction_bounds.loc[:,0]
170/74: reaction_bounds.iloc[:,0]
170/75: reaction_bounds.iloc[0,0]
170/76:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds,mult):
    for i in range(len(reaction_bounds)):
        try: model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = (reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult)
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds,1/10)
model_closed = let_media_components_in(model_closed,reaction_bounds,1/10)
170/77:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
170/78: model_closed.summary()
171/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
171/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
171/3: time model = Recon3DModel_301_patch.copy()
171/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
171/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
171/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
171/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
171/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
171/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
171/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
171/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
171/12: print(match(rxns,'biomass'))
171/13: time model_closed = model.copy()
171/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
171/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
171/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
171/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
171/18: FBA_closed
171/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds,mult):
    # reaction_bounds is a panda df with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult scales the boundaries
    for i in range(len(reaction_bounds)):
        try: 
            bounds = model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds
            bounds = (reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult) 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds,1/10)
model_closed = let_media_components_in(model_closed,reaction_bounds,1/10)
171/20: reaction_bounds.iloc[0,0]
171/21:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
171/22: model_closed.summary()
171/23:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
171/24: print(match(match(match(rxns,'6'),'EX_'),'g'))
171/25: print(match(match(match(rxns,'EX_'),'_L'),''))
171/26: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
171/27:
rxn_id = reaction_bounds.Reactions[i]
match(rxns,rxn_id)
172/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
172/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
172/3: time model = Recon3DModel_301_patch.copy()
172/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
172/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
172/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
172/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
172/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
172/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
172/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
172/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
172/12: print(match(rxns,'biomass'))
172/13: time model_closed = model.copy()
172/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
172/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
172/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
172/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
172/18: FBA_closed
172/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds,mult):
    # reaction_bounds is a panda df with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult scales the boundaries
    for i in range(len(reaction_bounds)):
        try: 
            bounds = model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds
            bounds = (reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult) 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds,1/10)
model_closed = let_media_components_in(model_closed,reaction_bounds,1/10)
172/20: reaction_bounds.iloc[0,0]
172/21:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
172/22: model_closed.summary()
172/23:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
172/24: print(match(match(match(rxns,'6'),'EX_'),'g'))
172/25: print(match(match(match(rxns,'EX_'),'_L'),''))
172/26: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
172/27: model.reactions.get_by_id('EX_arg_L[e]')
172/28: model.reactions.get_by_id('EX_acetone[e]')
173/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
173/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
173/3: time model = Recon3DModel_301_patch.copy()
173/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
173/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
173/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
173/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
173/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
173/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
173/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
173/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
173/12: print(match(rxns,'biomass'))
173/13: time model_closed = model.copy()
173/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
173/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
173/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
173/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
173/18: FBA_closed
173/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds,mult):
    # reaction_bounds is a panda df with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult scales the boundaries
    for i in range(len(reaction_bounds)):
        try: 
            bounds = model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds
            bounds = (reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult) 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds,1/10)
model_closed = let_media_components_in(model_closed,reaction_bounds,1/10)
173/20: reaction_bounds.iloc[0,0]
173/21:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
173/22: model_closed.summary()
173/23:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
173/24: print(match(match(match(rxns,'6'),'EX_'),'g'))
173/25: print(match(match(match(rxns,'EX_'),'_L'),''))
173/26: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
173/27: model.reactions.get_by_id('EX_arg_L[e]')
173/28: model.reactions.get_by_id('EX_acetone[e]')
173/29:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds,mult):
    # reaction_bounds is a panda df with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult scales the boundaries
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult) 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds,1/10)
model_closed = let_media_components_in(model_closed,reaction_bounds,1/10)
173/30:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds,mult):
    # reaction_bounds is a panda df with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult scales the boundaries
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds,1/10)
model_closed = let_media_components_in(model_closed,reaction_bounds,1/10)
173/31: reaction_bounds.iloc[0,0]
173/32:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
173/33: model_closed.summary()
174/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
174/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
174/3: time model = Recon3DModel_301_patch.copy()
174/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
174/5:
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
174/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
174/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
174/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
174/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
174/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
174/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
174/12: print(match(rxns,'biomass'))
174/13: time model_closed = model.copy()
174/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
174/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
174/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
174/17:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
174/18: FBA_closed
174/19:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def let_media_components_in(model,reaction_bounds,mult):
    # reaction_bounds is a panda df with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult scales the boundaries
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = let_media_components_in(model,reaction_bounds,1/10)
model_closed = let_media_components_in(model_closed,reaction_bounds,1/10)
174/20: reaction_bounds.iloc[0,0]
174/21:
FBA = model.optimize()
FBA_closed = model_closed.optimize()
174/22: model_closed.summary()
174/23:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
174/24: print(match(match(match(rxns,'6'),'EX_'),'g'))
174/25: print(match(match(match(rxns,'EX_'),'_L'),''))
174/26: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
174/27:
rxn_id = reaction_bounds.Reactions[i]
match(rxns,rxn_id)
174/28: model_closed.reactions.get_by_id('EX_hco3[e]')
174/29: model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound
174/30: model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
174/31:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
model_closed.reactions.get_by_id('EX_hco3[e]')
174/32:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -100
model_closed.reactions.get_by_id('EX_hco3[e]')
174/33:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -100
model_closed.reactions.get_by_id('EX_hco3[e]')
FBA_closed = model_closed.optimize()
FBA_closed.summary()
174/34:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -100
model_closed.reactions.get_by_id('EX_hco3[e]')
FBA_closed = model_closed.optimize()
model_closed.summary()
174/35:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
model_closed.reactions.get_by_id('EX_hco3[e]')
FBA_closed = model_closed.optimize()
model_closed.summary()
174/36:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
model_closed.reactions.get_by_id('EX_ribflv[e]').lower_bound = -0.00106383

FBA_closed = model_closed.optimize()
model_closed.summary()
174/37:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
model_closed.reactions.get_by_id('EX_ribflv[e]').lower_bound = -0.00106383

FBA_closed = model_closed.optimize()
model_closed.summary()
174/38: model_closed.reactions.get_by_id('EX_ribflv[e]')
174/39:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
model_closed.reactions.get_by_id('EX_ribflv[e]').lower_bound = -0.00106383
model_closed.reactions.get_by_id('EX_isochol[e]').lower_bound = -0.8015267
FBA_closed = model_closed.optimize()
model_closed.summary()
174/40: model_closed.reactions.get_by_id('glc_D[e]')
174/41: model_closed.reactions.get_by_id('co2[e]')
174/42: model_closed.reactions.get_by_id('co2[e]')
174/43: model_closed.reactions.get_by_id('co2[e]')
174/44: model_closed.reactions.get_by_id('co2[e]')
174/45: model_closed.reactions.get_by_id('EX_glc_D[e]')
174/46: model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound
174/47: model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound*10
174/48: model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-25
174/49:
model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-25
# FBA_closed = model_closed.optimize()
model_closed.summary()
174/50: model_closed.reactions
174/51: model_closed.reactions.bounds
174/52: model_closed.reactions
174/53:
model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-25
model_closed.summary()
174/54: model.reactions.get_by_id('EX_arg_L[e]')
174/55: model.reactions.get_by_id('EX_acetone[e]')
174/56: set(rxns).intersection('atp')
174/57: list(set(rxns).intersection('atp'))
174/58: list(set(rxns).intersection('DM_datp_m_'))
174/59: list(set(rxns).intersection('DM_datp_m_'))
175/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
175/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
175/3: time model = Recon3DModel_301_patch.copy()
175/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
175/5:
# create lists of different elements
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
175/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
175/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
175/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
175/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
175/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
175/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
175/12: print(match(rxns,'biomass'))
175/13: time model_closed = model.copy()
175/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
175/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
175/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
175/17:
FBA = model.summary()
FBA_closed = model_closed.summary()
175/18:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def change_rxn_bounds(model,reaction_bounds,mult):
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = change_rxn_bounds(model,reaction_bounds,1/10)
model_closed = change_rxn_bounds(model_closed,reaction_bounds,1/10)
175/19: model.summary()
175/20: model_closed.summary()
175/21:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
model_closed.reactions.get_by_id('EX_ribflv[e]').lower_bound = -0.00106383
model_closed.reactions.get_by_id('EX_isochol[e]').lower_bound = -0.8015267
FBA_closed = model_closed.optimize()
model_closed.summary()
175/22:
model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-25
model_closed.summary()
175/23:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
175/24: print(match(match(match(rxns,'6'),'EX_'),'g'))
175/25: print(match(match(match(rxns,'EX_'),'_L'),''))
175/26: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
175/27: model.reactions.get_by_id('EX_arg_L[e]')
175/28: model.reactions.get_by_id('EX_acetone[e]')
175/29: set(dm_rxns2).symmetric_difference(dm_rxns)
175/30:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
# diff = set(dm_rxns2).symmetric_difference(dm_rxns)
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
175/31:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def set_bounds_rxns(model,reaction_bounds,mult):
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = set_bounds_rxns(model,reaction_bounds,1/10)
model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/10)
175/32:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def set_bounds_rxns(model,reaction_bounds,mult):
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = set_bounds_rxns(model,reaction_bounds,1/100)
model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
175/33: model.summary()
175/34: model_closed.summary()
179/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
179/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
179/3: time model = Recon3DModel_301_patch.copy()
179/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
179/5:
# create lists of different elements
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
179/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
179/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
179/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
179/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
# diff = set(dm_rxns2).symmetric_difference(dm_rxns)
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
179/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
179/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
179/12: print(match(rxns,'biomass'))
179/13: time model_closed = model.copy()
179/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
179/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
179/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
179/17:
FBA = model.summary()
FBA_closed = model_closed.summary()
179/18:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def set_bounds_rxns(model,reaction_bounds,mult):
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = set_bounds_rxns(model,reaction_bounds,1/100)
model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
179/19: model.summary()
179/20: model_closed.summary()
179/21:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
model_closed.reactions.get_by_id('EX_ribflv[e]').lower_bound = -0.00106383
model_closed.reactions.get_by_id('EX_isochol[e]').lower_bound = -0.8015267
FBA_closed = model_closed.optimize()
model_closed.summary()
179/22:
model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-25
model_closed.summary()
179/23:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
179/24: print(match(match(match(rxns,'6'),'EX_'),'g'))
179/25: print(match(match(match(rxns,'EX_'),'_L'),''))
179/26: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
179/27: model.reactions.get_by_id('EX_arg_L[e]')
179/28: model.reactions.get_by_id('EX_acetone[e]')
179/29:
model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-1000
model_closed.summary()
179/30:
model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-50
model_closed.summary()
179/31:
model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-25
model_closed.summary()
183/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
183/2: time Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model (this sometimes takes really long!!)
183/3: time model = Recon3DModel_301_patch.copy()
183/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    rxn = model.reactions.get_by_id(rxn_id)
    rxn.bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
183/5:
# create lists of different elements
rxns = [x.id for x in model.reactions]
dm_rxns = [x.id for x in model.demands]
sink_rxns = [x.id for x in model.sinks]
ex_rxns = [x.id for x in model.exchanges]
mets = [x.id for x in model.metabolites]
genes = [x.id for x in model.genes]
183/6:
def match(lst, query):
    return list(filter(lambda x: query in x, lst))

# e.g.:
print(match(rxns, 'atp'))
183/7:
# list of DM_ sink_ and EX_ reactions using match
dm_rxns2 = match(rxns, 'DM_')
sink_rxns2 = match(rxns,'sink_')
ex_rxns2 = match(rxns,'EX_')
183/8:
print("reaction IDs containing 'DM_':\n", len(match(rxns, 'DM_')))
print("'demands':\n",len(model.demands))
print("reaction IDs containing 'sink_':\n", len(match(rxns,'sink_')))
print("'sinks':\n", len(model.sinks))
print("reaction IDs containing 'EX_':\n", len(match(rxns,'EX_')))
print("'exchanges':\n", len(model.exchanges))
print("reaction IDs containing 'biomass':\n", len(match(rxns,'biomass')))
183/9:
# diff = [x for x in dm_rxns2 if x not in dm_rxns]
# diff = set(dm_rxns2).symmetric_difference(dm_rxns)
list(frozenset(dm_rxns2)-frozenset(dm_rxns) or frozenset(dm_rxns)-frozenset(dm_rxns2))
183/10: list(frozenset(sink_rxns2)-frozenset(sink_rxns) or frozenset(sink_rxns)-frozenset(sink_rxns2))
183/11: list(frozenset(ex_rxns2)-frozenset(ex_rxns) or frozenset(ex_rxns)-frozenset(ex_rxns2))
183/12: print(match(rxns,'biomass'))
183/13: time model_closed = model.copy()
183/14:
# close lower boundaries
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
183/15:
def set_bounds_rxn(model, rxn_id, lb, ub):
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model
183/16:
def set_objective(model, rxn_id):
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model = set_objective(model, "DM_atp_c_")
model_closed = set_objective(model_closed, "DM_atp_c_")
183/17:
FBA = model.summary()
FBA_closed = model_closed.summary()
183/18:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename of model
path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(path)

def set_bounds_rxns(model,reaction_bounds,mult):
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

model = set_bounds_rxns(model,reaction_bounds,1/100)
model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
183/19: model.summary()
183/20: model_closed.summary()
183/21:
model_closed.reactions.get_by_id('EX_hco3[e]').lower_bound = -1000
model_closed.reactions.get_by_id('EX_ribflv[e]').lower_bound = -0.00106383
model_closed.reactions.get_by_id('EX_isochol[e]').lower_bound = -0.8015267
FBA_closed = model_closed.optimize()
model_closed.summary()
183/22:
model_closed.reactions.get_by_id('EX_glc_D[e]').lower_bound=-25
model_closed.summary()
183/23:
print(match(rxns,'EX_iso'))
print(match(rxns,'EX_clpn'))
print(match(rxns,'EX_r'))
print(match(rxns,'EX_hco3'))
print(match(rxns,'EX_dt'))
print(match(rxns,'EX_xolest'))
183/24: print(match(match(match(rxns,'6'),'EX_'),'g'))
183/25: print(match(match(match(rxns,'EX_'),'_L'),''))
183/26: list(frozenset(reaction_bounds.Reactions)-frozenset(rxns))
183/27: model.reactions.get_by_id('EX_arg_L[e]')
183/28: model.reactions.get_by_id('EX_acetone[e]')
185/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
185/2:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
185/3:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
186/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
186/2:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
186/3:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
186/4:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
187/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
187/2:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
187/3:
# LOAD FUNCTIONS

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_objective(model, rxn_id):
    # set objective functions and make sure the reaction is opened (-1000, 1000)
    model.objective = rxn_id # set objective
    model.reactions.get_by_id(rxn_id).bounds = (-1000,1000) # make sure objective reaction is opened
    return model

def set_bounds_rxn(model, rxn_id, lb, ub):
    # set bounds of a single reaction
    model.reactions.get_by_id(rxn_id).bounds(lb,ub)
    return model

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model
187/4:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
183/29:
# set objective functions and make sure the reaction is opened (-1000, 1000)
# change the objective to DM_atp_c_
model.objective = "DM_atp_c_" # set objective
model.reactions.get_by_id("DM_atp_c_").bounds = (-1000,1000) # make sure objective reaction is opened
188/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
188/2:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
188/3:
# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model
188/4:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds(lb,ub)
# set objective: model.objective = rxn_id # set objective
188/5:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# close lower boundaries of all boundary reactions
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
    
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename 
reaction_bounds_file_path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(reaction_bounds_file_path)

model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
189/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
189/2:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
189/3:
# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model
189/4:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds(lb,ub)
# set objective: model.objective = rxn_id # set objective
189/5:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# close lower boundaries of all boundary reactions
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
    
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename 
reaction_bounds_file_path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(reaction_bounds_file_path)

model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
189/6:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
    
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename 
reaction_bounds_file_path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(reaction_bounds_file_path)

model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
189/7:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
190/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
190/2:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
190/3:
# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model
190/4:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds(lb,ub)
# set objective: model.objective = rxn_id # set objective
190/5:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
190/6:
# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
190/7:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename 
reaction_bounds_file_path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
reaction_bounds = pd.read_excel(reaction_bounds_file_path)

model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
190/8:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename 
reaction_bounds_file_path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
print(reaction_bounds_file_path)
190/9:
reaction_bounds = pd.read_excel(reaction_bounds_file_path)

model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
190/10: print(Path.cwd())
190/11: print(Path.__file__)
190/12: print(Path._)
190/13: print(Path._)
190/14: print(Path() / 'reaction bounds' / reaction_bounds_file )
190/15: print(Path() / 'reaction_bounds' / reaction_bounds_file )
190/16: p = Path() / 'reaction_bounds' / reaction_bounds_file
190/17:
reaction_bounds = pd.read_excel(p)

model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
190/18:
reaction_bounds = pd.read_excel(p.resolve())

model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
190/19:
p = Path() / 'reaction_bounds' / reaction_bounds_file
p.resolve()
190/20:
p = Path(.) / 'reaction_bounds' / reaction_bounds_file
p.resolve()
190/21:
p = Path('.') / 'reaction_bounds' / reaction_bounds_file
p.resolve()
190/22:
p = Path('.') / 'reaction_bounds' / reaction_bounds_file
p.resolve()
print(p.exists)
190/23:
p = Path('.') / 'reaction_bounds' / reaction_bounds_file
p= p.resolve()
print(p.exists)
190/24:
p = Path('.') / 'reaction_bounds' / reaction_bounds_file
p= p.resolve()
print(p.exists())
190/25:
p = Path('.') / 'reaction_bounds' / reaction_bounds_file
p.resolve()
print(p.exists())
190/26: print(pathlib.Path("my_file.txt").parent.absolute())
190/27: print(pathlib.Path("Opening_reactions2.xlsx").parent.absolute())
190/28: print(pathlib.Path("Opening_reactions2.xlsx").parent.absolute())
190/29: print(Path("Opening_reactions2.xlsx").parent.absolute())
190/30: print(Path('reaction_bounds' / "Opening_reactions2.xlsx").parent.absolute())
190/31: print(Path().'reaction_bounds' / "Opening_reactions2.xlsx").parent.absolute())
190/32: print(Path().'reaction_bounds' / "Opening_reactions2.xlsx".parent.absolute())
190/33: print(Path().'reaction_bounds' / "Opening_reactions2.xlsx"
190/34: print(Path().'reaction_bounds' / "Opening_reactions2.xlsx")
190/35: print(Path.'reaction_bounds' / "Opening_reactions2.xlsx")
190/36: print(pathlib.Path(('.') / 'reaction_bounds' / reaction_bounds_file)
190/37: print(pathlib.Path(('.') / 'reaction_bounds' / reaction_bounds_file))
190/38: print(Path(('.') / 'reaction_bounds' / reaction_bounds_file))
190/39: Path(('.') / 'reaction_bounds' / reaction_bounds_file)
190/40: Path('.') / 'reaction_bounds' / reaction_bounds_file
190/41:
p=Path('.') / 'reaction_bounds' / reaction_bounds_file
p.parent()
190/42:
p=Path('.') / 'reaction_bounds' / reaction_bounds_file
p.parent
190/43:
p=Path('.') / 'reaction_bounds' / reaction_bounds_file
p.parent.absolute()
190/44:
p=Path('.') / 'reaction_bounds' / reaction_bounds_file
 getcwd()
190/45:
p=Path('.') / 'reaction_bounds' / reaction_bounds_file
getcwd()
195/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
195/2:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
195/3:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
196/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model

print(filePath)
196/2:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
196/3:
# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model
196/4:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds(lb,ub)
# set objective: model.objective = rxn_id # set objective
196/5:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
196/6:
# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
196/7:
# open lower boundaries to let DMEM metabolites in
reaction_bounds_file = 'Opening_reactions2.xlsx' # filename 
reaction_bounds_file_path = Path.cwd() / 'reaction_bounds' / reaction_bounds_file
print(reaction_bounds_file_path)
196/8:
p = Path('.') / 'reaction_bounds' / reaction_bounds_file
p.resolve()
print(p.exists())
196/9:
p=Path('.') / 'reaction_bounds' / reaction_bounds_file
getcwd()
196/10:
reaction_bounds = pd.read_excel(p.resolve())

model_closed = set_bounds_rxns(model_closed,reaction_bounds,1/100)
196/11: p=Path('.') / 'reaction_bounds' / reaction_bounds_file
196/12:
# open lower boundaries to let DMEM metabolites in
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
print(filePathReactionBounds)
196/13:
# open lower boundaries to let DMEM metabolites in
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_closed = set_bounds_rxns(model_closed,reactionBounds,1/100)
196/14: model_closed.summary()
196/15:
model_closed.summary()
model.summary()
196/16: model_closed.summary()
196/17: match(rxns,'atp')
196/18:
# set objective function
match([x.id for x in model_closed.reactions],'atp')
model.objective = 'DM_atp_c_' # set objective
model.reactions.get_by_id('DM_atp_c_').bounds(lb,ub)
196/19:
# set objective function
match([x.id for x in model_closed.reactions],'atp')
model.objective = 'DM_atp_c_' # set objective
model.reactions.get_by_id('DM_atp_c_').bounds(-1000,1000)
196/20:
# set objective function
match(rxns,'atp')
model.objective = 'DM_atp_c_' # set objective
model.reactions.get_by_id('DM_atp_c_').bounds(-1000,1000)
196/21:
# set objective function
model.objective = 'DM_atp_c_' # set objective
model.reactions.get_by_id('DM_atp_c_').bounds(-1000,1000)
196/22:
# set objective function
model.objective = 'DM_atp_c_' # set objective
model.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
197/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)
197/2:
Recon3DModel_301_patch = load_matlab_model(filePath) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
198/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)
198/2:
Recon3DModel_301_patch = load_matlab_model(filePathModel) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model
198/3:
# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model
198/4:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
198/5:
# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)
198/6:
# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0
198/7:
# open lower boundaries of the closed model to let DMEM metabolites in
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_closed = set_bounds_rxns(model_closed,reactionBounds,1/100)
198/8:
# set objective function
model.objective = 'DM_atp_c_' # set objective
model.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
198/9: model_closed.summary()
198/10:
# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
198/11: model_closed.summary()
198/12:
# open lower boundaries of the closed model to let DMEM metabolites in
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_closed = set_bounds_rxns(model_closed,reactionBounds,1/10)
198/13:
# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
198/14: model_closed.summary()
198/15:
# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
198/16:
fileNameGeneExpression = 'Wang19300genes.xlsx' # filename 
filePathGeneExpression = Path.cwd() / 'data' / fileNameGeneExpression
geneExpression = pd.read_excel(filePathGeneExpression)
198/17:
fileNameGeneExpression = 'Wang19300genes.xlsx' # filename 
filePathGeneExpression = Path.cwd() / 'data' / fileNameGeneExpression
geneExpression = pd.read_excel(filePathGeneExpression)
geneExpression
198/18:
fileNameGeneExpression = 'Wang19300genes.xlsx' # filename 
filePathGeneExpression = Path.cwd() / 'data' / fileNameGeneExpression
geneExpression = pd.read_excel(filePathGeneExpression)
198/19: geneExpression
198/20:
fileNameGeneSysGO = 'Wang19300genes.xlsx' # SysGO classification 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
filePathGeneExpression = Path.cwd() / 'data' / fileNameGeneExpression
geneExpression = pd.read_excel( Path.cwd() / 'data' / fileNameGeneExpression)
198/21:
fileNameGeneSysGO = 'Wang19300genes.xlsx' # SysGO classification 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
filePathGeneExpression = Path.cwd() / 'data' / fileNameGeneExpression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)
198/22: geneExpression
198/23:
fileNameGeneSysGO = 'Wang19300genes.xlsx' # SysGO classification 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
sysGO = pd.read_excel(Path.cwd() / 'data' / fileNameGeneSysGO)
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)
198/24:
fileNameGeneSysGO = 'Wang19300genes.xlsx' # SysGO classification 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
sysGO = pd.read_excel(Path.cwd() / 'SysGO' / fileNameGeneSysGO)
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)
198/25:
fileNameGeneSysGO = 'Wang19300genes.xlsx' # SysGO classification 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)
198/26:
fileNameGeneSysGO = 'Wang19300genes.xlsx' # SysGO classification 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)
198/27:
fileNameGeneSysGO = 'Wang19300genes.xlsx' # SysGO classification 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression

geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)
198/28: print(Path.cwd() / 'sysGO' / fileNameGeneSysGO)
198/29:
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression

sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)
198/30: sysGO
198/31: sysGO.head()
198/32: geneExpression.head()
198/33: sysGO.describe()
198/34: sysGO.head()
198/35: sysGO.groupby('Process (1)').describe()
198/36: sysGO.groupby('Process (1)').mean()
198/37: sysGO.groupby(['Process (1)']).mean().plot()
198/38: sysGO.groupby(['Process (1)']).mean().swapaxes.plot()
198/39: sysGO.groupby(['Process (1)']).mean().plot().swapaxes
198/40: sysGO.groupby(['Process (1)']).mean().plot()
198/41: sysGO.swapaxes.groupby(['Process (1)']).mean().plot()
198/42: sysGO.groupby(['Process (1)']).mean().plot()
198/43: sysGO['Brain'].groupby(['Process (1)']).mean().plot()
198/44: sysGO['Brain'].groupby(['Process (1)']).plot()
198/45: sysGO['Brain'].plot()
198/46: sysGO
198/47: sysGO.Main location NEW 27082021
198/48: sysGO['Main location NEW 27082021']
198/49:
sysGO['Main location NEW 27082021']
sysGO['PROCESS NEW 27082021']
198/50:
sysGO['Main location NEW 27082021']
set(sysGO['PROCESS NEW 27082021'])
198/51:
print(set(sysGO['Main location NEW 27082021']))
set(sysGO['PROCESS NEW 27082021'])
198/52:
set(sysGO['Main location NEW 27082021'])
set(sysGO['PROCESS NEW 27082021'])
198/53: set(sysGO['PROCESS NEW 27082021'])
198/54:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)
198/55: sysGO["Process (1)", "Process (2)" "Process (3)"]
198/56: sysGO["Process (1)" "Process (2)" "Process (3)"]
198/57: sysGO["Process (1)", "Process (2)", "Process (3)"]
198/58: sysGO["Process (1)"]
198/59: sysGO["Process (1)" "Process (2)" "Process (3)"]
198/60: ["Process (1)", "Process (2)", "Process (3)"]
198/61: sysGO["Process (1)", "Process (2)", "Process (3)"]
198/62: sysGO[["Process (1)", "Process (2)", "Process (3)"]]
198/63: sysGO[["gene" "Process (1)", "Process (2)", "Process (3)" "TissueSpecificExpression"]]
198/64: sysGO[["gene" "Process (1)", "Process (2)", "Process (3)" "Tissue specific expression"]]
198/65: sysGO[["gene" "Process (1)", "Process (2)", "Process (3)"]]
198/66: sysGO[["Process (1)", "Process (2)", "Process (3)"]]
198/67:
sysGO[["Process (1)", "Process (2)", "Process (3)"]]
sysGO[["gene"]]
198/68:
sysGO[["gene" "Process (1)", "Process (2)", "Process (3)"]]
sysGO[["gene"]]
198/69:
sysGO[["gene" "Process (1)", "Process (2)", "Process (3)"]]
sysGO[["gene"]]
198/70: sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
198/71:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]

# merge gene expression data and SysROT table based on gene info
pd.merge(sysROT, geneExpression, how='inner')
198/72: size(sysROT)
198/73: tyoe(sysROT)
198/74: type(sysROT)
198/75: len(sysROT)
198/76:
len(sysROT)
len(geneExpression)
198/77:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = sysROT.merge(sysROT, geneExpression, how = 'inner')
198/78:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = sysROT.merge(sysROT, geneExpression, how = 'inner')
198/79:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = sysROT.merge(sysROT, geneExpression, how='inner')
198/80:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
198/81: sysROT.head()
198/82: geneExpression.head()
198/83:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how='inner')
198/84:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')
198/85: sysROT
198/86: sysROT.columns
198/87: sysROT.columns[1]
198/88: sysROT.columns[6]
198/89: sysROT.columns[4]
198/90: sysROT.columns[5]
198/91:
sysROT.columns[5]
is_numeric(sysROT)
198/92:
sysROT.columns[5]
sysROT.select_dtypes(include=np.number).columns.tolist()
198/93:
sysROT.select_dtypes(include=np.number).columns.tolist()
sysROT.select_dtypes(include=np.number)
198/94:
sysROT.select_dtypes(include=np.number).columns.tolist()
sysROT.select_dtypes(include=np.number).columns
198/95: sysROT.select_dtypes(include=np.number).columns.tolist()
198/96: conditions = sysROT.select_dtypes(include=np.number).columns.tolist()
198/97:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT
198/98:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby("Process (1)")
198/99:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"])
198/100:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby([["Process (1)"]])
198/101:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"])
198/102:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).conditions[1]
198/103:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).WT
198/104:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).mean().WT
198/105:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).mean()
198/106:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).mean().min()
198/107:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).mean()
198/108:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg(['mean', 'min', 'max'])
198/109:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg(['mean', 'min'])
198/110:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg(conditions,['mean', 'min'])
198/111:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg({conditions},['mean', 'min'])
198/112:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg(conditions,['mean', 'min'])
198/113:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg({conditions:['mean', 'min']})
198/114:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']})
198/115: conditions
198/116:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg({['WT', 'G12D']:['mean', 'min']})
198/117:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg({['WT']:['mean', 'min']})
198/118:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']})
198/119:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']})
198/120: sysROt.gene
198/121: sysROT.gene
198/122: sysROT.gene[0]
198/123: conditions[0]
198/124: sysROT.conditions[0]
198/125: sysROT.columns(conditions[0])
198/126: sysROT.column(conditions[0])
198/127: sysROT.col(conditions[0])
198/128: sysROT.(conditions[0])
198/129: sysROT.[conditions[0]]
198/130: sysROT.([conditions[0]])
198/131: sysROT.[conditions[0]
198/132: sysROT.[conditions[0]]
198/133: sysROT.['WT']
198/134: sysROT
198/135: sysROT['WT']
198/136: sysROT[conditions[0]]
198/137: sysROT[conditions[0]][1]
198/138: sysROT[conditions[0]][1]=='nan'
198/139: sysROT[conditions[0]][1]=='NaN'
198/140: sysROT[conditions[0]][2]=='NaN'
198/141: sysROT[conditions[0]][2]
198/142: sysROT[conditions[0]][0]
198/143: sysROT[conditions[0]][0]==74912323.76282378
198/144: sysROT[conditions[0]][0]==np.number
198/145: sysROT[conditions[0]][0].integer
198/146: sysROT[conditions[0]][0]
198/147: np.integer(sysROT[conditions[0]][0])
198/148: np.integer.sysROT[conditions[0]][0]
198/149: np.integer[sysROT[conditions[0]][0]]
198/150: isinstance(sysROT[conditions[0]][0]],np.number)
198/151: isinstance(sysROT[conditions[0]][0],np.number)
198/152: isinstance(sysROT[conditions[0]][1],np.number)
198/153: isinstance(sysROT[conditions[0]][2],np.number)
198/154: isinstance(sysROT[conditions[0]][2],np.integer)
198/155: isinstance(sysROT[conditions[0]][0],np.integer)
198/156: isinstance(sysROT[conditions[0]][0],'nan')
198/157: isna(sysROT[conditions[0]][0])
198/158: pd.isna(sysROT[conditions[0]][0])
198/159: pd.isna(sysROT[conditions[0]][1])
198/160: sysROT[conditions[con]]
198/161: pd.isna(sysROT[conditions[0]][1])
198/162: sysROT[conditions['WT']]
198/163: sysROT['WT']
198/164: sysROT.index
198/165:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        if pd.isna(sysROT[conditions[con]][i])
198/166:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        if pd.isna(sysROT[conditions[con]][i]):
198/167: sysROT.index[0]
198/168: sysROT.index[1]
198/169: sysROT.index[199]
198/170:     P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']})
198/171: P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']})
198/172:
P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']}) 
P1
198/173:
P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']}) 
isna(P1)
198/174:
P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']}) 
pdisna(P1)
198/175:
P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']}) 
pd.isna(P1)
198/176:
P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({'WT':['mean', 'min']}) 
P3 = sysROT.groupby(["Process (3)"]).agg({'WT':['mean', 'min']})
198/177:
P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({'WT':['mean', 'min']}) 
P3 = sysROT.groupby(["Process (3)"]).agg({'WT':['mean', 'min']}) 
P3
198/178:
# selecting rows based on condition
sysROT.loc[pd.isna(sysROT)]
198/179:
# selecting rows based on condition
sysROT.loc(pd.isna(sysROT))
198/180:
# selecting rows based on condition
pd.isna(sysROT)
198/181:
# selecting rows based on condition
pd.isna(sysROT[conditions])
198/182:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
198/183:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
sysROTnas
198/184:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
sysROTnas['WT']
198/185:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
sysROTnas['WT'].index
198/186:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
sysROTnas['WT']
198/187:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
sysROTnas
198/188:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
sysROTnas

sysROT[1,:]
198/189:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
sysROTnas

sysROT.loc[1,:]
198/190:
# selecting rows based on condition
sysROTnas = pd.isna(sysROT[conditions])
sysROTnas

sysROT.loc[0,:]
198/191: sysROT.loc[1,:]
198/192: sysROT.loc[:,1
198/193: sysROT.loc[:,1]
198/194: sysROT.loc[1]
198/195: sysROT.loc[0]
198/196: sysROT.loc[0][conditions]
198/197: P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']})
198/198:
P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']}) 
P1
198/199: sysROT['WT'][0]
198/200: sysROT['Tissue specific expression'][0]
198/201: sysROT['Tissue specific expression'][0] == 'Detected in all'
198/202: sysROT['Tissue specific expression'][0] == 'Detected in all' or 'Detected in all'
198/203: sysROT['Tissue specific expression'][0] == 'Detected in all'
198/204: sysROT['Tissue specific expression'][0] == "Detected in many" | "Detected in some"
198/205: sysROT['Tissue specific expression'][0] == "Detected in many" or "Detected in some"
198/206: sysROT['Tissue specific expression'][1] == "Detected in many" or "Detected in some"
198/207:
sysROT['Tissue specific expression'][1] == "Detected in many" or 
sysROT['Tissue specific expression'][1] == "Detected in some"
198/208: sysROT['Tissue specific expression'][1] == "Detected in many" or sysROT['Tissue specific expression'][1] == "Detected in some"
198/209: sysROT['Tissue specific expression'][0] == "Detected in many" or sysROT['Tissue specific expression'][1] == "Detected in some"
198/210: sysROT['Tissue specific expression'][0]
198/211: sysROT['Tissue specific expression'][0] == "Detected in many" or sysROT['Tissue specific expression'][1] == "Detected in some"
198/212:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many" or sysROT['Tissue specific expression'][1] == "Detected in some"
198/213:
tse = sysROT['Tissue specific expression'][0]
tse == 'Detected in all'
198/214:
tse = sysROT['Tissue specific expression'][0]
tse == 'Detected in al'
198/215:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many" or sysROT['Tissue specific expression'][1] == "Detected in som"
198/216:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
198/217:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==   "Detected in some"
198/218:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" | "Detected in some"
198/219:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or "Detected in some"
198/220:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or tse == "Detected in some"
198/221:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or tse == "Detected in some" or  "Detected in many"
198/222:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or tse == "Detected in some" or  "Detected in many"
198/223:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or tse == "Detected in some" or  tse == "Detected in many"
198/224:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or tse == "Detected in some" or tse == "Detected in many"
198/225:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or tse == "Detected in some" or tse == "Detected in many"
tse == "Detected in many"
198/226:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
198/227:
tse = sysROT['Tissue specific expression'][0]
tse == 'Detected in all'
198/228:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or tse == "Detected in some" or tse == "Detected in many"
tse == "Detected in many"
198/229:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse ==  "Detected in some"
tse == "Detected in many" or tse == "Detected in some" or tse == "Detected in many"
tse == "Detected in many"
198/230:
tse = sysROT['Tissue specific expression'][0] 
tse == "Detected in many"
tse == "Detected in some"
tse == "Detected in many" or tse == "Detected in some" or tse == "Detected in many"
tse == "Detected in many"
198/231:
tse = sysROT['Tissue specific expression'][0]
tse == 'Detected in all'
198/232:
tse = sysROT['Tissue specific expression'][0]
tse == 'Detected in all' or tse == "Detected in many"
198/233:
tse = sysROT['Tissue specific expression'][0]
tse == 'Detected in all' or tse == "Detected in many"
tse == "Detected in many"
198/234:
tse = sysROT['Tissue specific expression'][0]
tse == 'Detected in all' or tse == "Detected in many"
198/235: P1
198/236:  sysROT[conditions[0]][0]
198/237: sysROT[conditions[0]]
198/238: sysROT.loc[conditions[0]]
198/239: sysROT[0]
198/240: sysROT
198/241: sysROT.loc[0]
198/242: sysROT.loc[0]['Process (1)']
198/243:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
198/244:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']

P1
198/245:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']
P1
198/246:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']
198/247:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1
198/248:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1['Process (1)']
198/249:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1
198/250:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index
198/251:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.index[P1[sysROT.loc[i]['Process (1)']]].tolist()
198/252:
i=0
sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.index[P1[sysROT.loc[i]['Process (1)']]]
198/253:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.index[P1[a]]
198/254:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.index[P1[a==True]]
198/255:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

print(P1[1:4])
198/256:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

print(P1[1])
198/257:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

print(P1[1][1])
198/258:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

print(P1[1:4])
198/259:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.loc[1]
198/260:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.loc[0]
198/261:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.iloc[0]
198/262:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.iloc[2]
198/263:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.loc[a]
198/264:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.loc[a]
198/265:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.loc[sysROT.loc[i]['Process (1)']]
198/266:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.loc[sysROT.loc[i]['Process (1)']].mean
198/267:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

P1.loc[sysROT.loc[i]['Process (1)']]
198/268:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

a = P1.loc[sysROT.loc[i]['Process (1)']]
198/269:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

a = P1.loc[sysROT.loc[i]['Process (1)']]
a[0]
198/270:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

a = P1.loc[sysROT.loc[i]['Process (1)']]
a[0]
a.max
198/271:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

a = P1.loc[sysROT.loc[i]['Process (1)']]
a[0]
a['WT']
198/272:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

a = P1.loc[sysROT.loc[i]['Process (1)']]
a[0]
a['WT']['mean']
198/273:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

a = P1.loc[sysROT.loc[i]['Process (1)']]
a[0]
a['WT']['mean']
a['WT']['min']
198/274:
i=0
a=sysROT.loc[i]['Process (1)']
sysROT.loc[i]['Process (2)']
sysROT.loc[i]['Process (3)']
sysROT.loc[i]['Process (1)']

P1.index

a = P1.loc[sysROT.loc[i]['Process (1)']]
a[0]
a['WT']['mean']
a['WT']['min']
P1.loc[sysROT.loc[i]['Process (1)']]['WT']['mean']
198/275:
P1_i = sysROT.loc[i]['Process (1)']
P1.loc[P1_i]['WT']['mean']
198/276:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT['Tissue specific expression'][i] 
        val = sysROT[conditions[con]][i]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i]['Process (1)']
                mean_P1 = P1.loc[P1_i][con]['mean']
                sysROT[conditions[con]][i] = mean_P1
            else:
                if tse == "Not detected"
                    sysROT[conditions[con]][i] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                        P1_i = sysROT.loc[i]['Process (1)']
                        min_P1 = P1.loc[P1_i][con]['min']
                        sysROT[conditions[con]][i] = mean_P1
198/277:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT['Tissue specific expression'][i] 
        val = sysROT[conditions[con]][i]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i]['Process (1)']
                mean_P1 = P1.loc[P1_i][con]['mean']
                sysROT[conditions[con]][i] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT[conditions[con]][i] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                        P1_i = sysROT.loc[i]['Process (1)']
                        min_P1 = P1.loc[P1_i][con]['min']
                        sysROT[conditions[con]][i] = mean_P1
198/278:  val = sysROT[conditions[con]][i]
198/279:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT['Tissue specific expression'][i] 
        val = sysROT[con][i]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i]['Process (1)']
                mean_P1 = P1.loc[P1_i][con]['mean']
                sysROT[conditions[con]][i] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT[conditions[con]][i] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                        P1_i = sysROT.loc[i]['Process (1)']
                        min_P1 = P1.loc[P1_i][con]['min']
                        sysROT[conditions[con]][i] = mean_P1
198/280:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT['Tissue specific expression'][i] 
        val = sysROT[con][i]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i]['Process (1)']
                mean_P1 = P1.loc[P1_i][con]['mean']
                sysROT[[con]][i] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT[conditions[con]][i] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                        P1_i = sysROT.loc[i]['Process (1)']
                        min_P1 = P1.loc[P1_i][con]['min']
                        sysROT[conditions[con]][i] = mean_P1
198/281:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT['Tissue specific expression'][i] 
        val = sysROT[con][i]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i]['Process (1)']
                mean_P1 = P1.loc[P1_i][con]['mean']
                sysROT[[con]][i] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT[conditions[con]][i] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                        P1_i = sysROT.loc[i]['Process (1)']
                        min_P1 = P1.loc[P1_i][con]['min']
                        sysROT[[con]][i] = mean_P1
198/282:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT['Tissue specific expression'][i] 
        val = sysROT[con][i]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i]['Process (1)']
                mean_P1 = P1.loc[P1_i][con]['mean']
                sysROT[con][i] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT[conditions[con]][i] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                        P1_i = sysROT.loc[i]['Process (1)']
                        min_P1 = P1.loc[P1_i][con]['min']
                        sysROT[con][i] = mean_P1
198/283: val = sysROT[con][i]
198/284:
val = sysROT[con][i]
val
198/285:
val = sysROT[con][0]
val
198/286:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT['Tissue specific expression'][i] 
        val = sysROT[con][i]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i]['Process (1)']
                mean_P1 = P1.loc[P1_i][con]['mean']
                sysROT[con][i] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT[con][i] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                        P1_i = sysROT.loc[i]['Process (1)']
                        min_P1 = P1.loc[P1_i][con]['min']
                        sysROT[con][i] = mean_P1
198/287:
val = sysROT[con][0]
sysROT[con][0] = val
198/288:
val = sysROT[con][0]
sysROT[con][0] = val
sysROT[con][0]
198/289:
val = sysROT[con][0]
sysROT[con][0] = val
sysROT[con][1]
198/290:
val = sysROT[con][0]
sysROT[con][0] = val
sysROT[con][1] = val
198/291:
val = sysROT[con][0]
sysROT[con][0] = val
sysROT[con][1] = val
sysROT[con][1]
198/292:
val = sysROT[con][0]
sysROT[con][0] = val
sysROT[con][1] = val
sysROT[con][1]
198/293: con
198/294:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
198/295:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
198/296:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
val
198/297:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
198/298:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
198/299:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
198/300:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
198/301:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
mean_P1
198/302:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT[con][i]
198/303:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT[con][i] = mean_P1
198/304:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
198/305:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
sysROT.loc[con, i]
198/306:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
sysROT.loc[con, 0]
198/307:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
sysROT.loc[con, 1]
198/308:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
sysROT.loc[con, 2]
198/309:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
sysROT.loc[con, 3]
198/310:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
sysROT.loc[1, 3]
198/311:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
sysROT.loc[1:3]
198/312:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[con, i] = mean_P1
sysROT.loc[1,'WT']
198/313:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[1,'WT']
198/314:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con]
198/315:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT
198/316:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0,con]
198/317:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
198/318:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
198/319:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
val = sysROT[con][i]
198/320:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT[con][i]
198/321:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT[i, con]
198/322:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT[0, 'WT']
198/323:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT[i, con]
198/324:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT[i,con]
198/325:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT.loc[i,con]
198/326:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i]
198/327:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
198/328:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
198/329:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
sysROT.loc[0,'WT']
198/330:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i, con]['mean']
198/331:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
198/332:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
P1.loc[P1_i,con]
198/333:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
P1.loc[P1_i,con,'mean']
198/334:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
198/335:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
val
198/336:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
val
sysROT[con][i]
198/337:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
val = 1
sysROT[con][i]
198/338:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
val = 1
sysROT[con][i]
val
198/339:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
val = 1
sysROT[con][i] = val
198/340:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
val = 1
sysROT.loc[i,con] = val
198/341:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
val = 1
sysROT.loc[i,con] = val
sysROT.loc[i,con]
198/342:
con='WT'
i = 1
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
tse = sysROT['Tissue specific expression'][i] 
val = sysROT[con][i]
pd.isna(val)
P1_i = sysROT.loc[i]['Process (1)']
P1_i
mean_P1 = P1.loc[P1_i][con]['mean']
sysROT.loc[i,con] = mean_P1
sysROT.loc[i,con] 
sysROT.loc[0]
sysROT.index
sysROT['Tissue specific expression'][i] 
sysROT['Tissue specific expression'][0:10]
sysROT.loc[0,'Tissue specific expression']
P1.loc[P1_i,con]['mean']
val = 2
sysROT.loc[i,con] = val
sysROT.loc[i,con]
198/343:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
                else:
                    if tse == "Not detected":
                        sysROT.loc[i,con] = 0
                        else:
                            if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                                P1_i = sysROT.loc[i]['Process (1)']
                                min_P1 = P1.loc[P1_i,con]['min']
                                sysROT.loc[i,con] = mean_P1
198/344:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT.loc[i,con] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                    P1_i = sysROT.loc[i]['Process (1)']
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = mean_P1
198/345:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT.loc[i,con] = 0
                else:
                    if tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in many" or tse == "Detected in single":
                        P1_i = sysROT.loc[i]['Process (1)']
                        min_P1 = P1.loc[P1_i,con]['min']
                        sysROT.loc[i,con] = mean_P1
198/346: sysROT
198/347:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT.loc[i,con] = 0
                else:
                    P1_i = sysROT.loc[i]['Process (1)']
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = mean_P1
198/348:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT.loc[i,con] = 0
                else:
                    P1_i = sysROT.loc[i,'Process (1)']
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = mean_P1
198/349: val
198/350: pd.isna(val)
198/351:
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
198/352:
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
198/353:
        if pd.isna(val):
            if tse == 'Detected in som':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
198/354:
        if pd.isna(val):
            if tse == 'Detected in some':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
198/355:
        if pd.isna(val):
            if tse == 'Detected in some':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
i
198/356:
        if pd.isna(val):
            if tse == 'Detected in some':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
i
con
198/357:
        if pd.isna(val):
            if tse == 'Detected in some':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
i
198/358:
        if pd.isna(val):
            if tse == 'Detected in some':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
i=1
198/359:
        if pd.isna(val):
            if tse == 'Detected in some':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
i=1
198/360:
        if pd.isna(val):
            if tse == 'Detected in some':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1

sysROT
i=1
sysROT
198/361: conditions
198/362: con = conditions[0]
198/363:
con = conditions[0]
i = sysROT.index[0]
198/364:
con = conditions[0]
i = sysROT.index[0]
i
198/365:
con = conditions[0]
i = sysROT.index[0]

sysROT.loc[i,'Tissue specific expression']
198/366:
con = conditions[0]
i = sysROT.index[0]

sysROT.loc[i,'Tissue specific expression']
sysROT.loc[i, con]
198/367:
con = conditions[0]
i = sysROT.index[2]

sysROT.loc[i,'Tissue specific expression']
sysROT.loc[i, con]
198/368:
con = conditions[0]
i = sysROT.index[2]

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
 pd.isna(val)
198/369:
con = conditions[0]
i = sysROT.index[2]

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
pd.isna(val)
198/370:
con = conditions[0]
i = sysROT.index[2]

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
pd.isna(val)
tse == 'Detected in all'
198/371:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT.loc[i,con] = 0
            else:
                P1_i = sysROT.loc[i,'Process (1)']
                min_P1 = P1.loc[P1_i,con]['min']
                sysROT.loc[i,con] = mean_P1
198/372:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT.loc[i,con] = 0
            else:
                P1_i = sysROT.loc[i,'Process (1)']
                min_P1 = P1.loc[P1_i,con]['min']
                sysROT.loc[i,con] = min_P1
198/373:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == "Not detected":
                    sysROT.loc[i,con] = 0
            else:
                P1_i = sysROT.loc[i,'Process (1)']
                min_P1 = P1.loc[P1_i,con]['min']
                sysROT.loc[i,con] = min_P1
198/374:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
198/375:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == 'Not detected':
                    sysROT.loc[i,con] = 0
198/376:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == 'Not detected':
                    sysROT.loc[i,con] = 0
                else:
                    P1_i = sysROT.loc[i,'Process (1)']
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
198/377:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)']
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == 'Not detected':
                    sysROT.loc[i,con] = 0
198/378: P1_i = sysROT.loc[i,'Process (1)']
198/379:
P1_i = sysROT.loc[i,'Process (1)']
i
198/380:
P1_i = sysROT.loc[i,'Process (1)']
P1_i
198/381: P1_i = sysROT.loc[i,'Process (1)']
198/382:
P1_i = sysROT.loc[i,'Process (1)']

sysROT.loc[i, 'Process (1)']
198/383:
P1_i = sysROT.loc[i,'Process (1)']

sysROT['Process (1)']
199/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)

Recon3DModel_301_patch = load_matlab_model(filePathModel) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
199/2: model_closed.summary()
199/3:
len(sysROT)
len(geneExpression)
199/4:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')
200/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)

Recon3DModel_301_patch = load_matlab_model(filePathModel) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
200/2:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')
200/3:
P1 = sysROT.groupby(["Process (1)"]).agg({'WT':['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({'WT':['mean', 'min']}) 
P3 = sysROT.groupby(["Process (3)"]).agg({'WT':['mean', 'min']})
200/4:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
print(tse)
print(val)
200/5:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

pd.isna(val)
200/6:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
200/7:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
200/8:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print( tse == 'Not detected')
200/9:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
print(sysROT.loc[i, 'Process (1)'])
200/10:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]
200/11:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]
P1
200/12:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P_i = (sysROT.loc[i, 'Process (1)'])
# P1.loc[P1_i,con]
P1
200/13:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P_i = (sysROT.loc[i, 'Process (1)'])
# P1.loc[P1_i,con]
P1.loc['WT', P1_i]
200/14:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P_i = (sysROT.loc[i, 'Process (1)'])
# P1.loc[P1_i,con]
P1.loc['WT'][P1_i]
200/15:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P_i = (sysROT.loc[i, 'Process (1)'])
# P1.loc[P1_i,con]
P1['WT'][P1_i]
200/16:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P_i = (sysROT.loc[i, 'Process (1)'])
# P1.loc[P1_i,con]
P1['WT']
200/17:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P_i = (sysROT.loc[i, 'Process (1)'])
# P1.loc[P1_i,con]
P1[P1_i]
200/18:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
# P1.loc[P1_i,con]
P1[P1_i]
200/19:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
 P1.loc[P1_i,con]
200/20:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]
200/21:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['mean']
200/22:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']
200/23:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']


        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == 'Not detected':
                    sysROT.loc[i,con] = 0
                else:
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
200/24:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']


    tse = sysROT.loc[i,'Tissue specific expression']
    val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == 'Not detected':
                    sysROT.loc[i,con] = 0
                else:
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
200/25:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']


tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == 'Not detected':
                    sysROT.loc[i,con] = 0
                else:
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
200/26:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']


tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
if pd.isna(val):
    if tse == 'Detected in all':
        P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
        mean_P1 = P1.loc[P1_i,con]['mean']
        sysROT.loc[i,con] = mean_P1
    else:
        if tse == 'Not detected':
            sysROT.loc[i,con] = 0
        else:
            P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
            min_P1 = P1.loc[P1_i,con]['min']
            sysROT.loc[i,con] = min_P1
200/27:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']


tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
if pd.isna(val):
    if tse == 'Detected in all':
        P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
        mean_P1 = P1.loc[P1_i,con]['mean']
        sysROT.loc[i,con] = mean_P1
    else:
        if tse == 'Not detected':
            sysROT.loc[i,con] = 0
        else:
            P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
            min_P1 = P1.loc[P1_i,con]['min']
            sysROT.loc[i,con] = min_P1     
            
sysROT.loc[i,con]
200/28:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']


tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
if pd.isna(val):
    if tse == 'Detected in all':
        P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
        mean_P1 = P1.loc[P1_i,con]['mean']
        sysROT.loc[i,con] = mean_P1
    else:
        if tse == 'Not detected':
            sysROT.loc[i,con] = 0
        else:
            P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
            min_P1 = P1.loc[P1_i,con]['min']
            sysROT.loc[i,con] = min_P1     
            
sysROT.loc[i,con] 
sysROT
200/29:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == 'Not detected':
                    sysROT.loc[i,con] = 0
                else:
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
200/30: sysROT
200/31:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)

Recon3DModel_301_patch = load_matlab_model(filePathModel) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
201/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)

Recon3DModel_301_patch = load_matlab_model(filePathModel) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
201/2:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')
201/3:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
if pd.isna(val):
    if tse == 'Detected in all':
        P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
        mean_P1 = P1.loc[P1_i,con]['mean']
        sysROT.loc[i,con] = mean_P1
    else:
        if tse == 'Not detected':
            sysROT.loc[i,con] = 0
        else:
            P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
            min_P1 = P1.loc[P1_i,con]['min']
            sysROT.loc[i,con] = min_P1     
            
sysROT.loc[i,con] 
sysROT
201/4:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
p1
201/5:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P1
201/6:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        val = sysROT.loc[i, con]
        if pd.isna(val):
            if tse == 'Detected in all':
                P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                mean_P1 = P1.loc[P1_i,con]['mean']
                sysROT.loc[i,con] = mean_P1
            else:
                if tse == 'Not detected':
                    sysROT.loc[i,con] = 0
                else:
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
201/7: sysROT
201/8: sysROT[Proces (1) == 'UNKNOWN_Peroxisomes']
201/9: sysROT[Process (1) == 'UNKNOWN_Peroxisomes']
201/10: sysROT['Process (1)' == 'UNKNOWN_Peroxisomes']
201/11: sysROT['Process (1)']
201/12: sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes'
201/13: sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
201/14:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P1
sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
201/15:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P1.head()
sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
201/16:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
print(P1.head())
sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
201/17:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
201/18:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                if tse == 'Detected in all':
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    mean_P1 = P1.loc[P1_i,con]['mean']
                    sysROT.loc[i,con] = mean_P1
                else:
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
            if tse == 'Detected in all':
                P2_i = sysROT.loc[i, 'Process (2)'] # get P2 classification for row i
                mean_P2 = P2.loc[P2_i,con]['mean']
                sysROT.loc[i,con] = mean_P2
            else:
                P2_i = sysROT.loc[i, 'Process (2)'] # get P1 classification for row i
                min_P2 = P2.loc[P2_i,con]['min']
                 sysROT.loc[i,con] = min_P2
201/19:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                if tse == 'Detected in all':
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    mean_P1 = P1.loc[P1_i,con]['mean']
                    sysROT.loc[i,con] = mean_P1
                else:
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
            if tse == 'Detected in all':
                P2_i = sysROT.loc[i, 'Process (2)'] # get P2 classification for row i
                mean_P2 = P2.loc[P2_i,con]['mean']
                sysROT.loc[i,con] = mean_P2
            else:
                P2_i = sysROT.loc[i, 'Process (2)'] # get P1 classification for row i
                min_P2 = P2.loc[P2_i,con]['min']
                sysROT.loc[i,con] = min_P2
201/20:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
201/21:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        if pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                if tse == 'Detected in all':
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    mean_P1 = P1.loc[P1_i,con]['mean']
                    sysROT.loc[i,con] = mean_P1
                else:
                    P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
                    min_P1 = P1.loc[P1_i,con]['min']
                    sysROT.loc[i,con] = min_P1
            if tse == 'Detected in all':
                P2_i = sysROT.loc[i, 'Process (2)'] # get P2 classification for row i
                mean_P2 = P2.loc[P2_i,con]['mean']
                sysROT.loc[i,con] = mean_P2
            else:
                P2_i = sysROT.loc[i, 'Process (2)'] # get P2 classification for row i
                min_P2 = P2.loc[P2_i,con]['min']
                sysROT.loc[i,con] = min_P2
            if tse == 'Detected in all':
                P3_i = sysROT.loc[i, 'Process (3)'] # get P2 classification for row i
                mean_P3 = P3.loc[P3_i,con]['mean']
                sysROT.loc[i,con] = mean_P3
            else:
                P3_i = sysROT.loc[i, 'Process (3)'] # get P2 classification for row i
                min_P3 = P3.loc[P3_i,con]['min']
                sysROT.loc[i,con] = min_P3
201/22:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
201/23: P1
201/24: P1.name
201/25: P1.__getattribute__(self, name)
201/26: P1.__getattribute__(name)
201/27: P1.__getattribute__
201/28: P1.__getattribute__.name()
201/29: P1.index.name
201/30:
def fill_nan(SysROT, P)
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P1.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P1.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT
201/31:
def fill_nan(SysROT, P)
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P1.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P1.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return:
        sysROT
201/32:
def fill_nan(SysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P1.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P1.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return:
        sysROT
201/33:
def fill_nan(SysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P1.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P1.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return:  sysROT
201/34:
def fill_nan(SysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P1.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P1.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT
201/35:
def fill_nan(SysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P1.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P1.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

fill_nan(SysROT, P1)
201/36:
def fill_nan(SysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P1.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P1.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

fill_nan(sysROT, P1)
201/37:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')
201/38:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
201/39:
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P1.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P1.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
201/40:
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers

for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
201/41:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]

P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]

print(tse)
print(val)

print(pd.isna(val))
print(tse == 'Detected in all')
print(tse == 'Not detected')
P1_i = (sysROT.loc[i, 'Process (1)'])
P1.loc[P1_i,con]['min']

tse = sysROT.loc[i,'Tissue specific expression']
val = sysROT.loc[i, con]
if pd.isna(val):
    if tse == 'Detected in all':
        P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
        mean_P1 = P1.loc[P1_i,con]['mean']
        sysROT.loc[i,con] = mean_P1
    else:
        if tse == 'Not detected':
            sysROT.loc[i,con] = 0
        else:
            P1_i = sysROT.loc[i, 'Process (1)'] # get P1 classification for row i
            min_P1 = P1.loc[P1_i,con]['min']
            sysROT.loc[i,con] = min_P1     
            
sysROT.loc[i,con] 
sysROT
201/42:
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
con = conditions[0]
i = sysROT.index[1]
P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
sysROT[sysROT['Process (1)'] == 'UNKNOWN_Peroxisomes']
202/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)

Recon3DModel_301_patch = load_matlab_model(filePathModel) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns, col0 -> rxn IDs, col1 -> lower bounds, col2 -> upper bounds
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
202/2:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
202/3: pd.isnan(sysROT)
202/4: pd.isna(sysROT)
202/5: pd.isna(sysROT).any()
202/6: sysROT
202/7: sysROT.any()
202/8: pd.isna(sysROT).any()
202/9: sysROT(pd.isna(sysROT))
202/10: (pd.isna(sysROT))
202/11: sysROT
202/12: pd.isna(sysROT).sum()
202/13:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));
sysROT.select_dtypes(include=np.number)
202/14:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));
sysROT.select_dtypes(include=np.number)./10
202/15:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con)


#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/16:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con) + '_norm'
    


#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/17:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con, '_norm')
    


#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/18:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con,'_norm')
    


#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/19:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con+'_norm')
    


#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/20:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con+'_pct')
    sysROT[(con+'_pct')]


#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/21:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con+'_pct')
    sysROT[con+'_pct']=sysROT[con]=


#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/22:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con+'_pct')
    sysROT[con+'_pct']=sysROT[con]


#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/23:
# After SysROT, normalise gene expression 
# dataAtlasPC = 100*bsxfun(@rdivide,dataAtlas{:,sample},sum(dataAtlas{:,sample},1,'omitnan'));
# dataAtlasPC = array2table(dataAtlasPC, 'VariableNames', string(sample));

# fill nan values
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    print(con+'_pct')
    sysROT[con+'_pct']=sysROT[con]
sysROT

#sysROT.select_dtypes(include=np.number)

# hr['bonus_pct'] = (hr['bonus']/ hr['salary']*100).round(2)
202/24: sysROT[con]./100
202/25: sysROT[con]
202/26: sysROT[con]./1
202/27: sysROT[con]/1
202/28: sysROT[con]/np.sum(sysROT[con])
202/29: sysROT[con]/np.sum(sysROT[con])*100
202/30: sysROT[con]/sum(sysROT[con])*100
202/31: sysROT[con]/np.sum(sysROT[con])*100
202/32: sysROT[con]/sum(sysROT[con])*100
202/33: sysROT[con]/np.sum(sysROT[con])*100
202/34: sysROT[con]/sum(sysROT[con])*100
202/35: con[0]
202/36: con
202/37: 'pct' in con
202/38: 'pct' ~ in con
202/39: 'pct' is not in con
202/40: 'pct' not in con
202/41: 'pct' in con
202/42: ~'pct' in con
202/43: 'pct' ~ in con
202/44: 'pct' in~ con
202/45: 'pct' ~in con
202/46: 'pct' ~ in con
202/47: 'pct'~ in con
202/48: 'pct' in con
202/49: 'pct' not in con
202/50: 'pct' not in 'dtptc'
202/51: 'pct' not in 'pct'
202/52: 'pct' not in 'fgag'
202/53: 'pct' not in 'fgpatgc'
202/54: 'pct' not in 'fgpatgc_pct'
202/55:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
202/56: sysROT
202/57:
# normalise gene expression to sum of all gene expression per sample 
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    if '_pct' not in con
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100
202/58:
# normalise gene expression to sum of all gene expression per sample 
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100
202/59: sysROT
202/60:
modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)
202/61:
modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'data' / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)
207/1:
from pathlib import Path
import pandas as pd
import numpy as np
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

modelName = 'Recon3DModel_301_patch.mat' # filename Recon3D model
filePathModel =  Path.cwd() / 'data' / 'Recon3D_model' / modelName
filePathModel = filePathModel.resolve() # filepath Recon3D model

print(filePathModel)

Recon3DModel_301_patch = load_matlab_model(filePathModel) # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
fileNameReactionBounds = 'Opening_reactions2.xlsx' # filename 
filePathReactionBounds = Path.cwd() / 'data' / 'reaction_bounds' / fileNameReactionBounds
reactionBounds = pd.read_excel(filePathReactionBounds)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
207/2:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# normalise gene expression to sum of all gene expression per sample 
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100
207/3:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# normalise gene expression to sum of all gene expression per sample 
for con in sysROT.select_dtypes(include=np.number).columns.tolist():
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100
207/4:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
fileNameGeneExpression = 'mean_gene_expression.xlsx' # gene expression
geneExpression = pd.read_excel(Path.cwd() / 'data' / fileNameGeneExpression)

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# normalise gene expression to sum of all gene expression per sample 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100
207/5: sysROT
207/6:  glob.glob(os.path.join(path, "*.xlsx"))
207/7:
p = Path.cwd() / 'data' 
glob.glob(os.path.join(path, "*.xlsx"))
207/8:
p = Path.cwd() / 'data' 
p.glob(os.path.join(path, "*.xlsx"))
207/9:
p = Path.cwd() / 'data' 
p = p.resolve()
print(p)
p.glob(os.path.join(path, "*.xlsx"))
207/10:
p = Path.cwd() / 'data' 
p = p.resolve()
print(p)
p.glob(Path.join(path, "*.xlsx"))
207/11:
p = Path.cwd() / 'data' 
p = p.resolve()
print(p)
p.glob((path, "*.xlsx"))
207/12:
p = Path.cwd() / 'data' 
p = p.resolve()
print(p)
filenames = glob.glob(p + "\*.xlsx")
print('File names:', filenames)
207/13:
p = Path.cwd() / 'data' 
p = p.resolve()
print(p)
filenames = Path.glob(p + "\*.xlsx")
print('File names:', filenames)
207/14:
p = Path.cwd() / 'data' 
p = p.resolve()
print(p)
filenames = pathlib.glob(p + "\*.xlsx")
print('File names:', filenames)
207/15:
p =  Path.cwd() / 'data' 
p = p.resolve()
df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
207/16:
p =  Path.cwd() / 'data' 
p = p.resolve()
df = pd.concat([print(f) for f in Path(p).rglob('*.xlsx')])

# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
207/17:
p =  Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]

# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
207/18:
p =  Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
f
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
207/19:
p =  Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
[pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
207/20: Opening_reactions2
207/21: Opening_reactions2
207/22:
p = Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
# [pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
Path(f.name).stem
207/23:
p = Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
# [pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
Path(p.name).stem
207/24:
p = Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
# [pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
Path(p.name)
207/25:
p = Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
# [pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
Path(p.name).head()
207/26:
p = Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
# [pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
os.listdir(p)
207/27:
import os
p = Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
# [pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
os.listdir(p)
207/28:  Path(p).rglob('*.xlsx')
207/29: list(Path(p).rglob('*.xlsx'))
207/30:

p = Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
# [pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
Path.iterdir(p)
207/31:

p = Path.cwd() / 'data' 
p = p.resolve()
[print(f) for f in Path(p).rglob('*.xlsx')]
# [pd.read_excel(f) for f in Path(p).rglob('*.xlsx')]
# df = pd.concat([pd.read_excel(f) for f in Path(p).rglob('*.xlsx')])
list(Path.iterdir(p))
207/32: sysROT
207/33: kcat
207/34:
        
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
207/35:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat
207/36:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat['kcat (s -1)']
207/37:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat
207/38:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat['AVERAGE GROUP/GENE RULE']
207/39:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
pd.isna(kcat['AVERAGE GROUP/GENE RULE'])
207/40:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])
207/41:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]
207/42:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]
median_kcat=pd.median(kcat['kcat (s -1)'])
207/43:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]
median_kcat=pd.md(kcat['kcat (s -1)'])
207/44:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]
median_kcat=(kcat['kcat (s -1)'])
207/45:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]
median_kcat=(kcat['kcat (s -1)'])
median_kcat
207/46:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]
median_kcat=(kcat['kcat (s -1)']).median()
median_kcat
207/47:
median_kcat=(kcat['kcat (s -1)'])
# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/48:
kcat['kcat (s -1)']
# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/49:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]
median_kcat=(kcat['kcat (s -1)']).median()
median_kcat
kcat
207/50:
kcat['kcat (s -1)']
kcat['kcat (s -1).1']

# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/51:
kcat['kcat (s -1)'] + kcat['kcat (s -1).1']

# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/52:
kcat['kcat (s -1)'] + kcat['kcat (s -1).1'] +1

# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/53:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]
median_kcat=(kcat['kcat (s -1)']).median()
median_kcat
kcat
207/54:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/55:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat.drop('Class')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/56:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat.drop(['Class'])
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/57:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat.pd.drop(['Class'])
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/58:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
pd.drop(kcat,['Class'])
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/59:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/60:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat.drop('kcat')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/61:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat.pd.drop('kcat')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/62:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat.drop('kcat')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/63:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat.drop("kcat")
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/64:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/65:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
kcat.drop("kcat")
207/66:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
kcat.drop([0])
207/67:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
kcat.drop(['Class'])
207/68:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
kcat.drop([1])
207/69:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
kcat.drop("Class", axis='columns'))
207/70:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')

kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
kcat.drop("Class", axis='columns')
207/71:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
kcat = kcat.drop("Class", axis='columns')
kcat[~pd.isna(kcat['AVERAGE GROUP/GENE RULE'])]

kcat
207/72:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT
207/73: kcat
207/74: kcat.drop(['Class'],axis=1)
207/75: kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1)
207/76:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
207/77:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat']
207/78:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].medium()
207/79:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
pd.medium(sysROT['kcat'])
207/80:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
median(sysROT['kcat'])
207/81:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat']
207/82:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].medium()
207/83:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].np.medium()
207/84:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].np.median()
207/85:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].median()
207/86:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].median()
pd.isna(sysROT['kcat'])
207/87:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].median()
sysROT['kcat']pd.isna(sysROT['kcat'])
207/88:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].median()
sysROT[pd.isna(sysROT['kcat'])]
207/89:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].median()
pd.isna(sysROT['kcat']
207/90:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].median()
pd.isna(sysROT['kcat'])
207/91:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'].median()
pd.isna(sysROT['kcat'])==True
207/92:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median())
207/93:
# load kcat file
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner')
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median())
sysROT
207/94:
kcat['kcat (s -1)'] 
kcat['kcat (s -1).1']
kcat
# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/95:
kcat['kcat (s -1)'] 
kcat['kcat (s -1).1']
kcat
# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/96:
kcat
# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/97:
kcat('AVERAGE GROUP/GENE RULE')

# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/98:
kcat['AVERAGE GROUP/GENE RULE']

# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
207/99:
set(kcat['AVERAGE GROUP/GENE RULE'])

# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
208/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
filePathReactionBounds = Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx'
reactionBounds = pd.read_excel(filePathReactionBounds)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
209/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging
from cobra.flux_analysis import flux_variability_analysis

Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx)
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
210/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model

Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
210/2:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'mean_gene_expression.xlsx' )

# load SysGO classification
fileNameGeneSysGO = 'SysGO.xlsx' # SysGO classification 
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / fileNameGeneSysGO)

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# normalise gene expression to sum of all gene expression per sample 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
210/3:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# normalise gene expression to sum of all gene expression per sample 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
210/4:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# normalise gene expression to sum of all gene expression per sample 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat.drop(['Class','AVERAGE GROUP/GENE RULE'],axis=1), how = 'inner') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
210/5:
set(kcat['AVERAGE GROUP/GENE RULE'])

# ruleTable.kcat(ATPaseCount) = sum([ruleTable.kcat_s_1_(ATPaseCount), ruleTable.kcat_s_1__1(ATPaseCount)], 'omitnan');
210/6:
# calculate modified values according to gene rules, if there are no gene rules, keep original values
kcat
210/7:
# calculate modified values according to gene rules, if there are no gene rules, keep original values
kcat['Class']
210/8:
# calculate modified values according to gene rules, if there are no gene rules, keep original values
kcat[['Class']]
210/9:
# calculate modified values according to gene rules, if there are no gene rules, keep original values
kcat[['gene'],kcat]
210/10:
# calculate modified values according to gene rules, if there are no gene rules, keep original values
kcat[['gene', 'kcat']]
210/11:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# normalise gene expression to sum of all gene expression per sample 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'inner') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
210/12: sysROT
215/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model

Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTIONS
def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)

mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
215/2:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# normalise gene expression to sum of all gene expression per sample 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct']=sysROT[con]/sum(sysROT[con])*100

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'inner') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
215/3: sysROT
215/4: sysROT[con+'_pct']
215/5: sysROT[conditions+'_pct']
215/6: sysROT[conditions + '_pct']
215/7: [conditions + '_pct']
215/8: [col for col in sysROT.columns if '_pct' in col]
215/9: sysROT[col for col in sysROT.columns if '_pct' in col]
215/10: sysROT[[col for col in sysROT.columns if '_pct' in col]]
215/11: sysROT[[col for col in sysROT.columns if '_pct' in col]]*sysROT['kcat']
215/12: sysROT[[col for col in sysROT.columns if '_pct' in col]].*sysROT['kcat']
215/13: sysROT[[col for col in sysROT.columns if '_pct' in col]]
215/14: sysROT[[col for col in sysROT.columns if '_pct' in col]]*10000
215/15: sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply(10000)
215/16: sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply(sysROT['kcat'])
215/17: sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply([sysROT['kcat']])
215/18: sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply(sysROT['kcat'],axis="index"))
215/19: sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply(sysROT['kcat'],axis="index")
215/20: sysROT[[col for col in sysROT.columns if '_pct' in col]]*(sysROT['kcat'],axis="index")
215/21: sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply(sysROT['kcat'],axis="index")
215/22: sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply(sysROT[['kcat']],axis="index")
215/23: sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply(sysROT['kcat'],axis="index")
215/24:
sysROT[[col for col in sysROT.columns if '_pct' in col]].multiply(sysROT['kcat'],axis="index")

for con in conditions:
    if '_pct*kcat' not in con:
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
        
sysROT
215/25: 0.005692*0.830
215/26:
# SysROT (fill in missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
                
# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'inner') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
                
# normalise gene expression to sum of all gene expression per sample 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
215/27:
      
sysROT
215/28:
# SysROT

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
215/29:
# SysROT

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
215/30: sysROT
215/31:
                
# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT2 = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'inner') # add kcat to sysROT table

sysROT2
215/32:
                
# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT2 = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table

sysROT2
215/33:
# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
        
sysROT
215/34:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
215/35:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
215/36:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
df
215/37:
# map expression to reaction

df = sysROT['gene',[col for col in sysROT.columns if '_pct*kcat' in col]]
df
215/38:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
df
215/39:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
sysROT['gene']
215/40:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
[sysROT['gene'] sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]]
215/41:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
[sysROT['gene'], sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]]
215/42:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
[[sysROT['gene'], sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]]]
215/43:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
[[sysROT['gene'] sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]]]
215/44:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
sysROT['gene', [col for col in sysROT.columns if '_pct*kcat' in col]]
215/45:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
 [col for col in sysROT.columns if '_pct*kcat' in col]
215/46:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
[col for col in sysROT.columns if '_pct*kcat' in col]
215/47:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
['gene',[col for col in sysROT.columns if '_pct*kcat' in col]]
215/48:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
['gene'[col for col in sysROT.columns if '_pct*kcat' in col]]
215/49:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
[col for col in sysROT.columns if '_pct*kcat' in col]
215/50:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a=[col for col in sysROT.columns if '_pct*kcat' in col]

type(a)
215/51:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
215/52:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
215/53:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
a
215/54:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
['gene'].append(['1'])
215/55:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
l=['gene'].append(['1'])
l
215/56:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
l=[['gene']].append(['1'])
l
215/57:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
l=[['gene']].append([['1']])
l
215/58:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
l=[['gene']].append([['1']])
list(l)
215/59:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col]
g=['g']
215/60:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
g=['g']
g.append([''])
215/61:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
g=['g']
g.append([''])
g
215/62:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append([col for col in sysROT.columns if '_pct*kcat' in col])
g=['g']
g.append('')
g
215/63:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append(col for col in sysROT.columns if '_pct*kcat' in col)
g=['g']
g.append('')
g
215/64:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append(col for col in sysROT.columns if '_pct*kcat' in col)
g=['g']
g.append('')
a
215/65:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append(col for col in sysROT.columns if '_pct*kcat' in col)
g=['g']
g.append('')
['g'].append('')
215/66:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]
a= ['gene'].append(col for col in sysROT.columns if '_pct*kcat' in col)
g=['g']
g.append('')
l=['g'].append('')
l
215/67:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]


thislist = ["apple", "banana", "cherry"]
thislist.append("orange")
print(thislist)
215/68:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]


thislist = ["apple", "banana", "cherry"]
thislist.append([col for col in sysROT.columns if '_pct*kcat' in col])
print(thislist)
215/69:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert('g'0)

thislist = ["apple", "banana", "cherry"]
thislist.append([col for col in sysROT.columns if '_pct*kcat' in col])
print(thislist)
215/70:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert('g',0)

thislist = ["apple", "banana", "cherry"]
thislist.append([col for col in sysROT.columns if '_pct*kcat' in col])
print(thislist)
215/71:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'g')

thislist = ["apple", "banana", "cherry"]
thislist.append([col for col in sysROT.columns if '_pct*kcat' in col])
print(thislist)
215/72:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'g')
215/73:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
l= con_cols.insert(0, 'g')
print(l)
215/74:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
l= con_cols.insert(0, 'g')
print(con_cols)
215/75:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'g')
print(con_cols)
215/76:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
[col for col in sysROT.columns if '_pct*kcat' in col].insert(0, 'g')
print(con_cols)
215/77:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
print([col for col in sysROT.columns if '_pct*kcat' in col].insert(0, 'gene'))
print(con_cols)
215/78:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
print([[col for col in sysROT.columns if '_pct*kcat' in col]].insert(0, 'gene'))
print(con_cols)
215/79:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols([[col for col in sysROT.columns if '_pct*kcat' in col]].insert(0, 'gene'))
print(con_cols)
215/80:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols = ([[col for col in sysROT.columns if '_pct*kcat' in col]].insert(0, 'gene'))
print(con_cols)
215/81:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]].insert(0, 'gene')
print(con_cols)
215/82:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols = [col for col in sysROT.columns if '_pct*kcat' in col].insert(0, 'gene')
print(con_cols)
215/83:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols = con_cols.insert(0, 'gene')
print(con_cols)
215/84:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
 con_cols.insert(0, 'gene')
print(con_cols)
215/85:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)
215/86:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

list(filter(lambda x: '_pct*kcat' in x,  sysROT.columns))
215/87:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

list(filter(lambda x: '_pct*kcat' in x,  sysROT.columns)).insert(0,'g')
215/88:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

list(filter(lambda x: '_pct*kcat' in x,  sysROT.columns)).insert(0,'gene')
215/89:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

list(filter(lambda x: '_pct*kcat' in x,  sysROT.columns)).insert(0,'gene')

'gene', 'g'
215/90:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

list(filter(lambda x: '_pct*kcat' in x,  sysROT.columns)).insert(0,'gene')

'gene',con_cols
215/91:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

list(filter(lambda x: '_pct*kcat' in x,  sysROT.columns)).insert(0,'gene')

'gene', tuple(con_cols)
215/92:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

sysROT.loc[:, sysROT.columns.isin('_pct*kcat')]

 sysROT.columns.isin('_pct*kcat')
215/93:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

sysROT.loc[:, sysROT.columns.isin('_pct*kcat')]

sysROT.columns.isin('_pct*kcat')
215/94:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)

sysROT.loc[:, sysROT.columns.isin('_pct*kcat')]

sysROT.columns
215/95:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


sysROT.columns
215/96:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


sysROT.columns.isin('kcat')
215/97:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


sysROT.columns.isin(['kcat'])
215/98:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


sysROT.columns.in(['kcat'])
215/99:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


sysROT.columns.isin(['kcat'])
215/100:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


sysROT.columns
215/101:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


match(sysROT.columns,'*kcat')
215/102:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


match(sysROT.columns,'*kcat')

set(sysROT.columns)
215/103:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


match(sysROT.columns,'*kcat')

set(sysROT.columns).intersection('*kcat')
215/104:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


match(sysROT.columns,'*kcat')

set(sysROT.columns).intersection('kcat')
215/105:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


match(sysROT.columns,'*kcat')

set(sysROT.columns).issubset('kcat')
215/106:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


match(sysROT.columns,'*kcat')

set(sysROT.columns)
215/107:
# map expression to reaction

df = sysROT[[col for col in sysROT.columns if '_pct*kcat' in col]]

con_cols = [col for col in sysROT.columns if '_pct*kcat' in col]
con_cols.insert(0, 'gene')
print(con_cols)


match(sysROT.columns,'*kcat')

set(sysROT.columns).search('kcat')
215/108:
# map expression to reaction

cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
sysROT(cols)
215/109:
# map expression to reaction

cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
sysROT(:,cols)
215/110:
# map expression to reaction

cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
sysROT.iloc(cols)
215/111:
# map expression to reaction

cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
sysROT.loc(cols)
215/112:
# map expression to reaction

cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
sysROT[cols]
215/113:  df.select_dtypes(include=np.number).columns.tolist()
215/114:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
for con in df.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
    con = copy.model_DMEM()
215/115:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
for con in df.select_dtypes(include=np.number).columns.tolist(): # select column names that contain numbers
    con = copy.model_DMEM()
215/116:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
for con in df.select_dtypes(include=np.number).columns.tolist(): # select column names that contain numbers
    con = model_DMEM.copy()
215/117:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
for con in df.select_dtypes(include=np.number).columns.tolist(): # select column names that contain numbers
    con = model_DMEM.copy()
    
con
215/118: cond
215/119: con
215/120: df.select_dtypes(include=np.number).columns.tolist().split(ch, 1)[0]
215/121:  [col for col in df.columns if '_pct*kcat' in col]
215/122: size(df)
215/123: len(df)
215/124: len(df,1)
215/125: len(df.columns)
215/126: conditions(i)
215/127: conditions(0)
215/128: conditions.iloc(0)
215/129: conditions.loc(0)
215/130: conditions
215/131: conditions[1]
215/132: conditions[0]
215/133: conditions[0] = 12
215/134:
conditions[0] = 12

conditions[0]
215/135:
conditions[0] = WT

conditions[0]
215/136:
conditions[0] = WT

conditions
215/137:
conditions[0] = 'WT'

conditions
215/138:
conditions[0] = 'WT'

conditions
conditions(i)
215/139:
conditions[0] = 'WT'

conditions
conditions.loc[0]
215/140:
var_holder = {}
 
for i in range(10):
    var_holder['my_var_' + str(i)] = "iterationNumber=="+str(i)
 
locals().update(var_holder)
 
print(my_var_0)
215/141:
var_holder = {}
 
for i in range(10):
    var_holder['my_var_' + str(i)] = "iterationNumber=="+str(i)
 
locals().update(var_holder)
 
print(my_var_1)
215/142:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
model_name = {}
for i in range(len(df.columns): # select column names that contain numbers
    model_name['model_' + conditions(i)] = i #model_DMEM.copy()
215/143:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
model_name = {}
for i in range(len(df.columns)): # select column names that contain numbers
    model_name['model_' + conditions(i)] = i #model_DMEM.copy()
215/144:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
model_name = {}
for i in range(len(df.columns)): # select column names that contain numbers
    model_name['model_' + {conditions}(i)] = i #model_DMEM.copy()
215/145:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
model_name = {}
for i in range(len(df.columns)): # select column names that contain numbers
    model_name['model_' + conditions[i]] = i #model_DMEM.copy()
215/146:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the model for each condition
model_name = {}
for i in range(len(df.columns)): # select column names that contain numbers
    model_name['model_' + conditions[i]] = i #model_DMEM.copy()
    
model_1
215/147: model_1
215/148: model_WT
215/149: model_name['model_' + conditions[i]] = i #model_DMEM.copy()
215/150:
i=0
model_name['model_' + conditions[i]] = i #model_DMEM.copy()
215/151:
i=0
model_name['model_' + conditions[i]] = i #model_DMEM.copy()
model_name_WT
215/152:
i=0
model_name['model_' + conditions[i]] = i #model_DMEM.copy()
model_WT
215/153:
i=0
model_name['model_' + conditions[i]] = i #model_DMEM.copy()
conditions[0]
215/154:
i=0
model_name['model_' + conditions[i]] = i #model_DMEM.copy()
'model_'+conditions[0]
215/155:
i=0
model_name['model_' + conditions[i]] = i #model_DMEM.copy()


model_name={}
model_name['model_'+conditions[0]]
215/156:
var = "a"
val = 4
dict1 = {var: val}
print(dict1["a"])
215/157:
var = "a"
val = 4
dict1 = {var: val}
print(dict1["a"])
a
215/158:
var = "a"
val = 4
dict1 = {var: val}
print(a)
a
215/159:
var = "a"
val = 4
dict1 = {var: val}
print(a)
215/160:
var = "a"
val = 4
dict1 = {var: val}
print(dict1)
215/161:
var = "a"
val = 4
dict1 = {var: val}
print(dict1.a)
215/162: cond
215/163: conditions
215/164:
conditions
dict(conditions)
215/165:
conditions
dict(conditions)
215/166:
conditions
type(conditions)
215/167:
conditions
type(conditions)
conditions[0]
215/168:
conditions
type(conditions)
{conditions[0],0}
215/169:
conditions
type(conditions)
a={conditions[0],0}
a
215/170:
conditions
type(conditions)
a={conditions[0],0}
WT
215/171:
conditions
type(conditions)
a={conditions[0],0}
0
215/172:
conditions
type(conditions)
a={conditions[0],0}
a
215/173:
conditions
type(conditions)
a={conditions[0],0}
a.WT
215/174:
conditions
type(conditions)
a={conditions[0],0}
a.0
215/175: 'model_' + conditions[i]
215/176:
var_holder = {}
 
for i in range(4):
    var_holder['model_' + conditions[i]] = "iterationNumber=="+str(i)
 
locals().update(var_holder)
 
print(my_var_0)
215/177:
var_holder = {}
 
for i in range(4):
    var_holder['model_' + conditions[i]] = "iterationNumber=="+str(i)
 
locals().update(var_holder)
 
print(model_WT)
215/178:
model_names = {}
 
for i in range(4):
    model_names['model_' + conditions[i]] = model_DMEM.copy()
 
locals().update(var_holder)
 
print(model_WT)
215/179: model_WT
215/180: locals().update(model_names)
215/181:
locals().update(model_names)
model_WT
215/182:
locals().update(model_names)
model_G12D
215/183:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the DMEM model for each condition
model_names = {}
for i in range(len(df.columns)): # select column names that contain numbers
    
    model_names['model_' + conditions[i]] = model_DMEM.copy()
    
    
locals().update(model_names)
215/184: len(df.columns)
215/185:
len(df.columns)
len(conditions)
215/186:
len(df.columns)
conditions
215/187: model_closed
215/188: model_closed.gene[0]
215/189: model_closed.genes[0]
215/190: model_closed.genes[1]
215/191: model_closed.genes[2]
215/192: model_closed.genes[4]
215/193: model_closed.reactions[4]
215/194: model_closed.reactions
215/195: model_closed.reactions[1]
215/196: model_closed.reactions[0]
215/197: model_closed.reactions[2]
215/198: model_closed.reactions[6]
215/199: model_closed.genes[6]
215/200: model_closed.genes[10]
215/201: model_closed.reactions[10]
215/202: model_closed.sinks
215/203: model_closed.repair
215/204: model_closed
215/205: model_closed.metabolites
215/206: model_closed.metabolites[1]
215/207: model_closed.metabolites[0]
215/208: model_closed.genes[0]
215/209:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the DMEM model for each condition
model_names = {}
for i in range(len(conditions)): # select column names that contain numbers
    model_temp = model_DMEM.copy()
    for g in df['gene']:
        
    model_names['model_' + conditions[i]] = model_temp # name model
    
locals().update(model_names)
215/210:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the DMEM model for each condition
model_names = {}
for i in range(len(conditions)): # select column names that contain numbers
    model_temp = model_DMEM.copy()
    for g in df['gene']:
        
        
    model_names['model_' + conditions[i]] = model_temp # name model
    
locals().update(model_names)
215/211:
# map expression to reaction

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the DMEM model for each condition
model_names = {}
for i in range(len(conditions)): # select column names that contain numbers
    model_temp = model_DMEM.copy()
    #for g in df['gene']:
        
        
    model_names['model_' + conditions[i]] = model_temp # name model
    
locals().update(model_names)
215/212:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
215/213:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes
215/214:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301']
215/215:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]
215/216:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

model.genes.get_by_id(genes['Recon3D301'][0])
215/217:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]
215/218:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

model.genes[0]
215/219:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

model.genes.get_by_id['8639.1']
215/220:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

model.genes.get_by_id[8639.1]
215/221:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

model.genes.get_by_id([8639.1])
215/222:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

model.genes.get_by_id(['8639.1]')
215/223:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

model.genes.get_by_id(['8639.1'])
215/224:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

model.genes.get_by_any(['8639.1'])
215/225:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

g = model.genes.get_by_any(['8639.1'])
g
215/226:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

g = model.genes.get_by_any(['8639.1'])
mode.genes
215/227:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

g = model.genes.get_by_any(['8639.1'])
model.genes
215/228:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

g = model.genes.get_by_any(['8639.1'])
model.genes[0]
215/229:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

g = model.genes.get_by_any('8639.1')
model.genes[0]
215/230:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

genes['Recon3D301'][0]

g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')
215/231:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')

model.genes.get_by_id(genes['Recon3D301'][0])
215/232:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')

genes['Recon3D301'][0]
215/233:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')

g = genes['Recon3D301'][0]
215/234:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')

g = genes['Recon3D301'][0]
type(g)
215/235:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')

g = genes['Recon3D301'][0]
type([g])
215/236:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')

g = genes['Recon3D301'][0]
[g]
215/237:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id(['8639.1'])

g = genes['Recon3D301'][0]
215/238:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')

g = genes['Recon3D301'][0]
[g]
215/239:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )


g = model.genes.get_by_any('8639.1')
model.genes[0]

model.genes.get_by_id('8639.1')

g = genes['Recon3D301'][0]
model.genes.get_by_id(str(g))
215/240: genes['gene']
215/241: model
215/242: len(model.genes)
215/243:
print(len(model.genes))
model.genes[0]
215/244:
print(len(model.genes))
model.reactions[0]
215/245:
print(len(model.genes))
model.reactions[1]
215/246:
print(len(model.genes))
model.reactions[13]
215/247:
print(len(model.genes))
model.reactions[12]
215/248:
print(len(model.genes))
model.reactions[12]
cobra.core.gene.GPRWalker('8639.1')
215/249:
print(len(model.genes))
model.reactions[12]
cobra.core.gene.GPRWalker
215/250:
print(len(model.genes))
model.reactions[12]
cobra.GPRWalker
215/251:
print(len(model.genes))
model.reactions[12]
cobra.io.GPRWalker
215/252:
print(len(model.genes))
model.reactions[12]
io.GPRWalker
215/253:
print(len(model.genes))
model.reactions[12]
215/254:
print(len(model.genes))
model.reactions[12]
cobra.core.GPR.from_string('8639.1')
215/255:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
cobra.core.GPR.from_string('8639.1')
215/256:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
cobra.core.GPR.from_string('13DAMPPOX')
215/257:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
cobra.core.GPR
215/258:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
list(cobra.core.GPR)
215/259:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
tyoe(cobra.core.GPR)
215/260:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
type(cobra.core.GPR)
215/261:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
cobra.core.GPR
215/262:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
cobra.core.GPR.eval
215/263:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[0]
215/264:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12]
215/265:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12].GPR
215/266:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12]
215/267:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12]['GPR']
215/268:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12]
215/269:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12][0]
215/270:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12].query
215/271:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12]
215/272:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12].lb
215/273:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12]
215/274:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12].bounds
215/275:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
hasattr(model.reactions[12])
215/276:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
getmembers(model.reactions[12])
215/277:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
model.reactions[12].getmembers()
215/278:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])
215/279:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
215/280:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule()
215/281:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
215/282:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions.gene_reaction_rule
215/283:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
215/284:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))
215/285:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

dir(model.genes.get_by_id(str(8639.1)))
215/286:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

model.genes.get_by_id(str(8639.1)).reactions()
215/287:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

model.genes.get_by_id(str(8639.1)).reactions
215/288:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

set(model.genes.get_by_id(str(8639.1)).reactions)
215/289:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

(model.genes.get_by_id(str(8639.1)).reactions)
215/290:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

dir(model.genes.get_by_id(str(8639.1)).reactions)
215/291:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)
215/292:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions
215/293:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0']
215/294:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]
215/295:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]
model.reactions[0].gene_reaction_rule
215/296:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]

for rxn in model.reactions:
    if rxn.gene_reaction_rule ~== '':
        print(rxn.gene_reaction_rule)
215/297:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]

for rxn in model.reactions:
    if rxn.gene_reaction_rule ~= '':
        print(rxn.gene_reaction_rule)
215/298:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]

for rxn in model.reactions:
    if rxn.gene_reaction_rule is not '':
        print(rxn.gene_reaction_rule)
215/299:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]

for rxn in model.reactions:
    if rxn.gene_reaction_rule is not '':
        print(rxn.gene_reaction_rule)
        # extract genes

model.reactions[13].gene_reaction_rule
215/300:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]

for rxn in model.reactions:
    if rxn.gene_reaction_rule is not '':
        rxn.gene_reaction_rule
        # extract genes

model.reactions[13].gene_reaction_rule
215/301:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]

for rxn in model.reactions:
    if rxn.gene_reaction_rule is not '':
        print(rxn.gene_reaction_rule)
        # extract genes
215/302: model.reactions[13].gene_reaction_rule
215/303: model.reactions[12].gene_reaction_rule
215/304: strip(model.reactions[12].gene_reaction_rule)
215/305: model.reactions[12].gene_reaction_rule.strip()
215/306:
gpr = model.reactions[12].gene_reaction_rule

gpr
215/307:
gpr = model.reactions[12].gene_reaction_rule

strip(gpr)
215/308:
gpr = model.reactions[12].gene_reaction_rule

gpr.strip()
215/309:
gpr = model.reactions[12].gene_reaction_rule

gpr.locals()
215/310:
gpr = model.reactions[12].gene_reaction_rule

locals(gpr)
215/311:
gpr = model.reactions[12].gene_reaction_rule

gpr
222/1:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
222/2:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
222/3:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
222/4:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
222/5:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
222/6:
gpr = model.reactions[12].gene_reaction_rule

gpr
222/7:
print(len(model.genes))
print(model.reactions[12])
print(model.reactions[0])
dir(model.reactions[12])

model.reactions[12].gene_reaction_rule
model.genes.get_by_id(str(8639.1))

# dir(model.genes.get_by_id(str(8639.1)).reactions)

model.reactions[0]

for rxn in model.reactions:
    if rxn.gene_reaction_rule is not '':
        print(rxn.gene_reaction_rule)
        # extract genes
222/8:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the DMEM model for each condition
model_names = {}
for i in range(len(conditions)): # select column names that contain numbers
    model_temp = model_DMEM.copy()
    #for g in df['gene']:
        
        
    model_names['model_' + conditions[i]] = model_temp # name model
    
locals().update(model_names)
222/9:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
model.genes.get_by_id(str(g))
222/10:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
222/11:
gpr = model.reactions[12].gene_reaction_rule

split(gpr)
222/12:
gpr = model.reactions[12].gene_reaction_rule

gpr.split()
222/13:
gpr = model.reactions[12].gene_reaction_rule

for r in gpr.split():
    print(r)
222/14:
gpr = model.reactions[12].gene_reaction_rule

for r in gpr.split():
    print(r)
    
gpr.split()[0]
222/15:
gpr = model.reactions[12].gene_reaction_rule

for r in gpr.split():
    print(r)
    
gpr.split()[0]

model.genes.get_by_id(gpr.split()[0])
222/16: model.reaxctions[12].gene_reaction_rule
222/17: model.reactions[12].gene_reaction_rule
222/18: model.reactions[12].gene_reaction_rule.split()
222/19: gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
222/20:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test.split()
222/21:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test.remove('(','')
gpr_test.split()
222/22:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test.replace('(','')
gpr_test.split()
222/23:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test.replace('()','')
gpr_test.split()
222/24:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
print(gpr_test.replace('()',''))
gpr_test.split()
222/25:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
print(gpr_test.replace('(',''))
gpr_test.split()
222/26:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
print(gpr_test.replace(['(',')'],''))
gpr_test.split()
222/27:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
print(gpr_test.replace(['('],''))
gpr_test.split()
222/28:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
print(gpr_test.replace('(',''))
gpr_test.split()
222/29:
str = "Engineering"
   
 
print ("Original string: " + str) 
   
 
res_str = str.replace('e', '') 
   
 
# removes all occurrences of 'e' 
print ("The string after removal of character: " + res_str) 
   
# Removing 1st occurrence of e 
 
res_str = str.replace('e', '', 1) 
    
print ("The string after removal of character: " + res_str)
222/30:
res_str = "Engineering"
res_str = str.replace('e', '') 
   
 
# removes all occurrences of 'e' 
print ("The string after removal of character: " + res_str) 
   
# Removing 1st occurrence of e 
 
res_str = str.replace('e', '', 1) 
    
print ("The string after removal of character: " + res_str)
222/31:
res_str = "Engineering"
res_str = res_str.replace('e', '') 
   
 
# removes all occurrences of 'e' 
print ("The string after removal of character: " + res_str) 
   
# Removing 1st occurrence of e 
 
res_str = str.replace('e', '', 1) 
    
print ("The string after removal of character: " + res_str)
222/32:
res_str = "Engineering"
res_str = res_str.replace('e', '') 
   
 
# removes all occurrences of 'e' 
print ("The string after removal of character: " + res_str) 
   
# Removing 1st occurrence of e 
 
res_str = res_str.replace('e', '', 1) 
    
print ("The string after removal of character: " + res_str)
222/33:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','')
gpr_test.split()
222/34:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(',')','','')
gpr_test.split()
222/35:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace(['(',')'],['',''])
gpr_test.split()
222/36:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()
222/37:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x is not 'or' and is not 'and':
        print(x)
222/38:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x is not 'or' or 'and':
        print(x)
222/39:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x is not 'or' and 'and':
        print(x)
222/40:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x is not ['or', 'and']:
        print(x)
222/41:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
   # if x is not ['or', 'and']:
        print(x)
222/42:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x is not ('or' or 'and'):
        print(x)
222/43:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x is not ('or' or 'and'):
        print(x)
        
gpr_test.split[1] is not 'or'
222/44:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x is not ('or' != 'and'):
        print(x)
        
gpr_test.split[1] is not 'or'
222/45:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
        print(x)
        
gpr_test.split[1] is not 'or'
222/46:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
        print(x)
222/47: gpr_test.split[1] is not 'or'
222/48: gpr_test.split[1] != 'or'
222/49: gpr_test.split[1] = 'or'
222/50: gpr_test.split[1] ~= 'or'
222/51: gpr_test.split[1] is 'or'
222/52: gpr_test.split[1] == 'or'
222/53:
gpr_test.split[1] 

#gpr_test.split[1] == 'or'
222/54:
gpr_test.split[1] 

#gpr_test.split[1] == 'or'
222/55:
gpr_test.split()[1]

#gpr_test.split[1] == 'or'
222/56:
gpr_test.split()[1]

gpr_test.split[1]() == 'or'
222/57:
gpr_test.split()[1]

gpr_test.split[1]() is 'or'
222/58: gpr_test.split()[1] is 'or'
222/59: gpr_test.split()[1] == 'or'
222/60:
gpr_test.split()[1] == 'or'

gpr_test.split()[1] != 'or'
222/61:
gpr_test.split()[1] == 'or'

gpr_test.split()[1] != 'or' | gpr_test.split()[1] != 'and'
222/62:
gpr_test.split()[1] == 'or'

gpr_test.split()[1] != 'or' or gpr_test.split()[1] != 'and'
222/63:
gpr_test.split()[1] == 'or'

gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and'
222/64:
gpr_test.split()[1] == 'or'

~gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and'
222/65:
gpr_test.split()[1] == 'or'

! gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and'
222/66:
gpr_test.split()[1] == 'or'

!gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and'
222/67:
gpr_test.split()[1] == 'or'

gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and'
222/68:
gpr_test.split()[1] == 'or'

is not gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and'
222/69:
gpr_test.split()[1] == 'or'

(gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and')
222/70:
gpr_test.split()[1] == 'or'

!(gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and')
222/71:
gpr_test.split()[1] == 'or'

(gpr_test.split()[1] == 'or' or gpr_test.split()[1] == 'and')
222/72:
gpr_test.split()[1] == 'or'

(gpr_test.split()[1] != 'or' and gpr_test.split()[1] != 'and')
222/73:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and gpr_test.split()[1] != 'and':
        print(x)
222/74:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' or gpr_test.split()[1] != 'and':
        print(x)
222/75:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and gpr_test.split()[1] != 'and':
        print(x)
222/76:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and if gpr_test.split()[1] != 'and':
        print(x)
222/77:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' | gpr_test.split()[1] != 'and':
        print(x)
222/78:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and gpr_test.split()[1] != 'and':
        print(x)
222/79:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'and' and gpr_test.split()[1] != 'or':
        print(x)
222/80:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'and' and gpr_test.split()[1] != 'or':
        print(x)
222/81:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and gpr_test.split()[1] != 'or':
        print(x)
222/82:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and gpr_test.split()[1] != 'and':
        print(x)
222/83: gpr_test.split()[1] == 'or'
222/84:
gpr_test.split()[1] == 'or'

gpr_test.split()[5]
222/85:
gpr_test.split()[1] == 'or'

gpr_test.split()[5] == 'and'
222/86:
gpr_test.split()[1] == 'or'

gpr_test.split()[5] != 'and'
222/87:
gpr_test.split()[1] == 'or'

gpr_test.split()[5] != 'and' and gpr_test.split()[5] != 'or'
222/88:
gpr_test.split()[1] == 'or'

gpr_test.split()[5] == 'and' and gpr_test.split()[5] == 'or'
222/89:
gpr_test.split()[1] == 'or'

gpr_test.split()[5] == 'and' or gpr_test.split()[5] == 'or'
222/90:
gpr_test.split()[1] == 'or'

gpr_test.split()[5] != 'or' and gpr_test.split()[5] == 'and'
222/91:
gpr_test.split()[1] == 'or'

gpr_test.split()[5] != 'or' and gpr_test.split()[5] != 'and'
222/92:
gpr_test.split()[1] == 'or'

gpr_test.split()[5] != 'or' and gpr_test.split()[5] != 'and'
gpr_test.split()[1] != 'or' and gpr_test.split()[1] != 'and'
222/93:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()



for x in gpr_test.split():
    if x != 'or' and x != 'and':
        print(x)
222/94:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
g
222/95:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes
222/96:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
set(genes['Recon3D301'])
222/97:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
set(genes['Recon3D301']).intersection('')
222/98:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
set(genes['Recon3D301']).intersection('130.1')
222/99:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
set(genes['Recon3D301']).pop('130.1')
222/100:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['gene'].iloc('130.1')
222/101:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['gene'].loc('130.1')
222/102:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['gene']
222/103:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes.iloc('130.1')
222/104:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301'].iloc('130.1')
222/105:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301'].loc('130.1')
222/106:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301']
222/107:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301'].loc('8639.1')
222/108:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301'].iloc('8639.1')
222/109:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301']
222/110:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301']
222/111:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301'].index
222/112:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301'].index('130.0'
222/113:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301'].index('130.0')
222/114:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301'].index('130.1')
222/115:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

g = genes['Recon3D301'][0]
genes['Recon3D301']
222/116:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301']==8639.1
222/117:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301'].index(8639.1)
222/118:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301'].index('8639.1')
222/119:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301'] == '8639.1'
222/120:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301']
222/121:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'])
222/122:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301']
222/123:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301'] 
fs = [str(x) for x in genes['Recon3D301']]
222/124:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301']
222/125:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301'] 
str(g)
222/126:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301'] 
str10g)
222/127:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301'] 
str(10)
223/1:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
223/2:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
223/3:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
223/4:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
223/5:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
223/6:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
genes['Recon3D301'] 
str(10)
223/7:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        print(x)
223/8:
gpr = model.reactions[12].gene_reaction_rule

for rxn in model.reactions:
    if rxn.gene_reaction_rule is not '':
        gpr = rxn.gene_reaction_rule.split()
        for x in gpr:
            if
    
gpr.split()[0]

model.genes.get_by_id(gpr.split()[0])
223/9:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'])
223/10:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
223/11:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
fs = [str(x) for x in g]
223/12:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        str(x)
223/13:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        x = str(x)
        print(x)
223/14:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
223/15:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        x = x.astype(float)
        print(x)
223/16:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        x = np.astype(x,float)
        print(x)
223/17:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        x = x.np.astypefloat)
        print(x)
223/18:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        x = x.np.astype)float)
        print(x)
223/19:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        x = x.np.astype(float)
        print(x)
223/20:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        x = np.x.astype(float)
        print(x)
223/21:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        x = float(x)
        print(x)
223/22:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
g
223/23:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
g == 8639.1
223/24:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
str(genes['Recon3D301']== 8639.1
223/25:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
str(genes['Recon3D301'] == 8639.1
223/26:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
genes['Recon3D301'] == 8639.1
223/27:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
genes['Recon3D301'][genes['Recon3D301'] == 8639.1]
223/28:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
genes['gene'][genes['Recon3D301'] == 8639.1]
223/29:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == x
        print(g)
223/30:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == x]
        print(g)
223/31:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == x]
        print(x)
223/32:
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
genes['gene'][genes['Recon3D301'] == 130.1]
223/33:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)]
        print(x)
223/34:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)]
        print(g)
223/35:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]


#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
genes['gene'][genes['Recon3D301'] == 130.1]
223/36:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table
        print(g)
        
g
223/37:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table
        print(g)
        
g[1]
223/38:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table
        print(g)
        
g
223/39:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table
        print(g)
        
print(g)
223/40:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
223/41:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g[0]
223/42:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g[0])
223/43:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
223/44:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
223/45:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
223/46:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df
223/47:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df['gene']==g
223/48:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df['gene'].str.match(g)
223/49:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df['gene'].str.match('ADH1C')
223/50:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df['gene']df['gene'].str.match('ADH1C')
223/51:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df['gene'].str.match('ADH1C')
223/52:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df[df['gene'].str.match('ADH1C')]
223/53: str(g)
223/54: g
223/55:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)].astype('str') # get matching gene symbol from table

        
print(g)
type(g)
g
df[df['gene'].str.match('ADH1C')]
223/56: g
223/57:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)].astype('str') # get matching gene symbol from table

        
print(g)
type(g)
g
df[df['gene'].str.match('ADH1C')]
223/58: g.astype('str')
223/59: g.astype('str')
223/60: g.applymap(str)
223/61: g
223/62: str(g)
223/63: split(g)
223/64: (g)
223/65: g
223/66: dict(g)
223/67: list(g)
223/68: str(list(g))
223/69: list(g)
223/70:
list(g)

df[df['gene'].str.match(list(g))]
223/71: list(g)
223/72: str(list(g))
223/73: list(g)
223/74: g
223/75:
g
g[0}
223/76:
g
g[0]
223/77:
g
g
223/78:
g
g['gene']
223/79:
g
g
223/80:
g
g.astype(string)
223/81:
g
g.astype(str)
223/82:
g
dic(g.astype(str))
223/83:
g
dict(g.astype(str))
223/84:
g
dict(g)
223/85:
g
[(g)]
223/86:
g
{(g)}
223/87:
g
{g}
223/88: g
223/89: str(g)
223/90: g.to_string
223/91: str(g.to_string)
223/92: g
223/93:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]


#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
genes['gene'].as_string
genes['gene'][genes['Recon3D301'] == 130.1]
223/94:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]


#  8639.1
g = genes['Recon3D301'][0]
str(genes['Recon3D301'][0])
genes['gene'][genes['Recon3D301'] == 130.1]
223/95: g
223/96: g = genes['gene'][genes['Recon3D301'] == 130.1]
223/97:
g = genes['gene'][genes['Recon3D301'] == 130.1]
g
223/98:
g = genes['gene'][genes['Recon3D301'] == 130.1]
print(g)
223/99:
g = genes['gene'][genes['Recon3D301'] == 130.1]
print(g.astype('string'))
223/100:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df[df['gene'].astype('string').str.match('ADH1C')]
223/101:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
df[df['gene'].astype('string').str.match('ADH1C')]
df
223/102:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table

        
print(g)
type(g)
g
d=df[df['gene'].astype('string').str.match('ADH1C')]
d
223/103:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
223/104:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
g = genes['gene'][genes['Recon3D301'] == 130.1]
print(g.astype('string'))
223/105:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()
g = genes['gene'][genes['Recon3D301'] == 130.1]
print(g.astype('string'))
223/106:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test = gpr_test.split()[0]
g = genes['gene'][genes['Recon3D301'] == 130.1]
print(g.astype('string'))
223/107:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test = gpr_test.split()[0]
g = genes['gene'][genes['Recon3D301'] == float(gpr_test)]
print(g.astype('string'))
223/108:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test = gpr_test.split()[0]
g = genes['gene'][genes['Recon3D301'] == float(gpr_test)]
print(g.astype('string'))
g
223/109:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table
        print(g)
        
print(g)
type(g)
g
d=df[df['gene'].astype('string').str.match('ADH1C')]
d
223/110:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()

for x in gpr_test.split():
    if x != 'or' and x != 'and':
        g = genes['gene'][genes['Recon3D301'] == float(x)] # get matching gene symbol from table
        g = g.astype('string')
        
print(g)
type(g)
g
d=df[df['gene'].astype('string').str.match('ADH1C')]
d
223/111: df
223/112: df['gene']
223/113: df['gene'].astype('string')
223/114: df['gene'].astype('string').str.match(g)
223/115: df['gene'].astype('string')
223/116:
df['gene'].astype('string')
g
223/117:
df['gene'].astype('string').str.contains(g)
g
223/118:
df['gene'].astype('string')==g
g
223/119: df['gene']==g
223/120: df['gene']
223/121: genes
223/122:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

df
223/123:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df = pd.merge(df, genes, how = 'inner')
223/124:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df = pd.merge(df, genes, how = 'inner')
df
223/125:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df = pd.merge(genes,df, how = 'inner')
df
223/126:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df = pd.merge(genes,df, how = 'inner')
df
223/127:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df = pd.merge(genes,df, how = 'inner')
sysROT
223/128:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df = pd.merge(genes,df, how = 'inner')
genes
223/129:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df = pd.merge(genes,df, how = 'inner')
df
223/130:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = pd.merge(genes,sysROT[cols], how = 'inner')
223/131:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = pd.merge(genes,sysROT[cols], how = 'inner')
df
223/132:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col].insert(0, 'gene')
df = pd.merge(genes,sysROT[cols], how = 'inner')
df
223/133:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
df['gene']
223/134:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
set(df['gene'])
223/135:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
set(df['gene'])
set(genes['gene'])
223/136:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
set(df['gene']).symmetric_difference(set(genes['gene']))
223/137:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
set(df['gene']).symmetric_difference((genes['gene']))
223/138:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
set(df['gene']).symmetric_difference(genes['gene'])
223/139:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
set(df['gene']).symmetric_difference(genes['gene'])
genes['gene']
223/140:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
set(df['gene']).symmetric_difference(genes['gene'])
print(len(genes['gene']))
223/141:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 
set(df['gene']).symmetric_difference(genes['gene'])
print(len(genes['gene']))
print(len(df['gene']))
223/142:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])
print(a)
print(b)

print(len(genes['gene']))
print(len(df['gene']))
223/143:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))
223/144:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

(df['gene']).duplicated()
223/145:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df['gene'].duplicated()
223/146:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df['gene'].duplicated()
genes['gene'].duplicated()
223/147:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df['gene'].duplicated()
genes['Recon3D301'].duplicated()
223/148:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df['gene'].duplicated()
genes[genes['Recon3D301'].duplicated()]
223/149:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df[df['gene'].duplicated()]
genes[genes['Recon3D301'].duplicated()]
223/150:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df[df['gene'].duplicated()]
#genes[genes['Recon3D301'].duplicated()]
223/151:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df[df['gene'].duplicated()]
genes[genes['Recon3D301'].duplicated()]
223/152:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df[df['gene'].duplicated()]
genes[Recon3D301][genes['Recon3D301'].duplicated()]
223/153:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df[df['gene'].duplicated()]
genes['Recon3D301'][genes['Recon3D301'].duplicated()]
223/154:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df[df['gene'].duplicated(cols='gene')]
genes['Recon3D301'][genes['Recon3D301'].duplicated()]
223/155:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))

df[df.duplicated(cols='gene')]
genes['Recon3D301'][genes['Recon3D301'].duplicated()]
223/156:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes['Recon3D301'][genes['Recon3D301'].duplicated()]

df.duplicated(cols='gene')
223/157:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes['Recon3D301']
223/158:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes['Recon3D301'].duplicated()
223/159:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes['Recon3D301'].duplicated(keep=false)
223/160:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes['Recon3D301'].duplicated(keep=False)
223/161:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes['Recon3D301'].duplicated(keep=True)
223/162:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes['Recon3D301'].duplicated()
223/163:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['Recon3D301'].duplicated()]
223/164:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['Recon3D301'].duplicated(keep=False)]
223/165:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['Recon3D301'].duplicated(keep=False)]
df[df['gene'].duplicated(keep=False)]
223/166:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['Recon3D301'].duplicated(keep=False)]
df[df['Recon3D301'].duplicated(keep=False)]
223/167:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['Recon3D301'].duplicated(keep=False)]
df[df['Recon3D301'].duplicated(keep=False)]

sysROT[sysROT['gene'].duplicated(keep=False)]
223/168:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['Recon3D301'].duplicated(keep=False)]
genes[genes['gene'].duplicated(keep=False)]
223/169:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]
223/170:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]
223/171:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]
223/172:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
223/173:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes[genes['Recon3D301'].duplicated(keep=False)]
223/174:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes[genes['Recon3D301'].duplicated(keep=False)]
223/175:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes[genes['Recon3D301']
223/176:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes['Recon3D301']
223/177:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes['Recon3D301']=='8639.1'
223/178:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes['Recon3D301']==8639.1
223/179:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes['Recon3D301']==8639.1

genes[genes['Recon3D301'].duplicated(keep=False)]
223/180:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes['Recon3D301']==8639.1

genes[genes['Recon3D301'].duplicated(keep=False)]
223/181:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

a = set(df['gene'])
b = set(genes['gene'])

print(len(a))
print(len(b))


genes[genes['gene'].duplicated(keep=False)]
genes[genes['Recon3D301'].duplicated(keep=False)]

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes['Recon3D301']==8639.1

genes[genes['gene'].duplicated(keep=False)]
223/182:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'outer') 

# load Recon3D gene IDs to match them to gene names in the dataset
df
223/183:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner') 

# load Recon3D gene IDs to match them to gene names in the dataset
df
223/184:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'outer') 

# load Recon3D gene IDs to match them to gene names in the dataset
df
223/185:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'outer').dropna()

# load Recon3D gene IDs to match them to gene names in the dataset
df
223/186:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'outer')

# load Recon3D gene IDs to match them to gene names in the dataset
df
223/187:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')

# load Recon3D gene IDs to match them to gene names in the dataset
df
223/188:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')

# load Recon3D gene IDs to match them to gene names in the dataset
df['gne'].duplicates
223/189:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')

# load Recon3D gene IDs to match them to gene names in the dataset
df['gene'].duplicates
223/190:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')

# load Recon3D gene IDs to match them to gene names in the dataset
df['gene'].duplicates()
223/191:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')

# load Recon3D gene IDs to match them to gene names in the dataset
df['gene']
223/192:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')

# load Recon3D gene IDs to match them to gene names in the dataset
df['gene'].duplicated()
223/193:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')

# load Recon3D gene IDs to match them to gene names in the dataset
df[df['gene'].duplicated()]
223/194:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner').reset_index()

# load Recon3D gene IDs to match them to gene names in the dataset
df[df['gene'].duplicated()]
223/195:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner').reset_index()

# load Recon3D gene IDs to match them to gene names in the dataset
df[df['gene'].duplicated()]
df
223/196:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# combine expression data and Recon3D301 gene IDs from 'Recon3D_genes.xlsx' into 1 data frame
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')

# load Recon3D gene IDs to match them to gene names in the dataset
df[df['gene'].duplicated()]
df
223/197:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
223/198:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()
223/199:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test.split()[0]
223/200:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test_0 = gpr_test.split()[0]
df['Recon3D301'] == gpr_test_0
223/201:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test_0 = gpr_test.split()[0]
df[df['Recon3D301'] == gpr_test_0]
223/202:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test_0 = gpr_test.split()[0]
df[df['Recon3D301'] == float(gpr_test_0)]
223/203:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test_0 = gpr_test.split()[0]
df[df['Recon3D301'] == float(gpr_test_0)]

df[sysROT[con+'_pct*kcat']]
223/204:
gpr_test = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr_test = gpr_test.replace('(','').replace(')','')
gpr_test_0 = gpr_test.split()[0]
df[df['Recon3D301'] == float(gpr_test_0)]

df[con+'_pct*kcat']
223/205:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','')

for x in gpr:
    if x != 'or' and x != 'and':
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(x)]
223/206:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','')

for x in gpr:
    if x != 'or' and x != 'and':
        print(x)
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(x)]
223/207:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','')
print(gpr)
for x in gpr:
    if x != 'or' and x != 'and':
        print(x)
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(x)]
223/208:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
for x in gpr:
    if x != 'or' and x != 'and':
        print(x)
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(x)]
223/209:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
for x in gpr:
    if x != 'or' and x != 'and':
        print(x)
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(x)]
223/210:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
for i in len(gpr):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(x)]
223/211:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
223/212:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in len(gpr):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(x)]
223/213:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in len(gpr):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/214:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in len(gpr):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/215:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/216:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/217:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/218:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/219:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/220:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in len(gpr):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/221:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/222:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        £minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/223:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'and':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/224:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'and' and x != 'and':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/225:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'and' and x != 'or':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/226:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and x != 'or':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/227:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        print(gpr[i])
        #minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/228:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        print(gpr[i])
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
223/229:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
        pint(minsum)
223/230:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0
len(gpr)
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
        print(minsum)
223/231:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = 0


for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum[i] = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/232:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = []
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum[i] = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/233:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum[i] = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/234:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/235:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum[i] = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/236:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum.append = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/237:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = ''
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum.append = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/238:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = ()
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum.append = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/239:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum.append = df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])]
print(minsum)
223/240:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] != 'or' and gpr[i] != 'and':
        minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
print(minsum)
223/241:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)

gpr().from_string()
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] == 'or':
        minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
print(minsum)  
    
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
223/242:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
cobra.core.gene.parse_gpr(gpr)
223/243:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
cobra.core.gene._symbolic_gpr(gpr)
223/244:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr._symbolic_gpr
223/245:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
dict(_symbolic_gpr)
223/246:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
dict(cobra.core.gene.parse_gpr(gpr))
223/247:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
dic(cobra.core.gene.parse_gpr(gpr))
223/248:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
dir(cobra.core.gene.parse_gpr(gpr))
223/249: gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
223/250:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)

GPR().from_string()
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] == 'or':
        minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
print(minsum)  
    
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
223/251:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)

GPR().from_string()
minsum = ['']
for i in range(len(gpr)):
    if gpr[i] == 'or':
        minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
    
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
223/252:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)

GPR().from_string()
minsum = ['']
#for i in range(len(gpr)):
    
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
223/253:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()
print(gpr)


minsum = ['']
#for i in range(len(gpr)):
    
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
226/1:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr = gpr_test.replace('(','').replace(')','').split()

cobra.core.gene.eval_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
226/2:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.eval_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
226/3:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
229/1:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
229/2:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
229/3:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
229/4:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
229/5:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
229/6:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
229/7:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
229/8:
# map expression to reaction 

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]

# create a copy of the DMEM model for each condition
model_names = {}
for i in range(len(conditions)): # select column names that contain numbers
    model_temp = model_DMEM.copy()
    con = conditions[i]
    for rxn in model.reactions:
        if rxn.gene_reaction_rule is not '':
            gpr = rxn.gene_reaction_rule.replace('(','').replace(')','').split()
            for x in gpr:
                if x != 'or' and x != 'and':
                    df[con+'_pct*kcat'][df['Recon3D301'] == float(x)]
                
    model_names['model_' + con] = model_temp # name model
    locals().update(model_names)
229/9: cobra.core.gene.parse_gpr(gpr)
229/10:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
229/11:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
229/12:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.eval_gpr(gpr)
229/13:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
229/14:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
gpr._eval_gpr
229/15:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
gpr._eval_gpr()
229/16:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
model.reactions.gene_reaction_rule ._eval_gpr()
229/17:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
model.reactions[0].gene_reaction_rule._eval_gpr()
229/18:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
dir(model.reactions[0].gene_reaction_rule)
229/19:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
GPR
229/20:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
dir(model.reactions[0].gene_reaction_rule)
229/21:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
model.reactions[0].gene_reaction_rule
229/22:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gpr = gpr.replace('(','').replace(')','').split()

cobra.core.gene.parse_gpr(gpr)
print(gpr)

minsum = ['']
#for i in range(len(gpr)):
    #if gpr[i] != 'or' and gpr[i] != 'and':
    #    minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr[i])])
#print(minsum)
cobra.core.gene.parse_gpr(gpr)
model.reactions[12].gene_reaction_rule
229/23: gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
229/24:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.split()
229/25:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.split("),(")
229/26:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.split("),(")
229/27:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.split('(')
229/28:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.split('(',')')
229/29:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.split('()')
229/30:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.split('(')
229/31:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.split('(').split(')')
229/32:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr.replace('(','split').replace(')','split')
gpr.split('(').split(')')
229/33:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr.replace('(','split').replace(')','split')
gpr.split('(')
229/34:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace('(','split').replace(')','split')
gpr.split('(')
229/35:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace('(','split').replace(')','split')
gpr.split('split')
229/36:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace(' (','split').replace(') ','split')
gpr.split('split')
229/37:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace(' (','split').replace(') ','split').replace('or','')
gpr.split('split')
229/38:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace(' (','split').replace(') ','split').replace(' or ','')
gpr.split('split')
229/39:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace(' or ','').replace(' (','split').replace(') ','split')
gpr.split('split')
229/40:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace(' or ','').replace('(','split').replace(')','split')
gpr.split('split')
229/41:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace(' or ',' ').replace('(','split').replace(')','split')
gpr.split('split')
229/42:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace('(','split').replace(')','split')
gpr.split('split')
229/43:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gpr = gpr.replace(' (','split').replace(') ','split')
gpr.split('split')
229/44:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs.split('split')

#for gpr in gprs
229/45:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split').split('split')
gprs.split('split')

#for gpr in gprs
229/46:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs.split('split')

#for gpr in gprs
229/47:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs.split('split')

minsum = 0
for gpr in gprs:
    print(gpr)
229/48:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs.split('split')

minsum = 0
for i in range(len(gprs)):
    print(gpr[i])
229/49:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs.split('split')

minsum = 0
for i in range(len(gprs)):
    print(gprs[i])
229/50:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs.split('split')

gprs
229/51:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs
229/52:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

for gpr in gprs:
    print(gpr)
229/53:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

for gpr in gprs:
    print(gpr)
    
gpr
229/54:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

for gpr in gprs:
    print(gpr)
    
gprs[0]
229/55:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

for gpr in gprs:
    print(gpr)
    
gprs[0].contains('g')
229/56:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

for gpr in gprs:
    print(gpr)
    
'130' is in gprs[0]
229/57:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

for gpr in gprs:
    print(gpr)
    
'130' in gprs[0]
229/58:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

for gpr in gprs:
    print(gpr)
    
'or' in gprs[0]
229/59:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

for gpr in gprs:
    print(gpr)
    
'and' in gprs[0]
229/60:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'or' in gprs[0]:
        gpr = gpr.replace('or','')
        print(gpr)
229/61:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'or' in gprs[0]:
        gpr = gpr.replace('or','')
        
        print(gpr.split())
229/62:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'or' in gprs[0]:
        gpr = gpr.replace('or','')
        for g in gpr.split():
            df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]
            print(df)
229/63:
# map expression to reaction 

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
229/64:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'or' in gprs[0]:
        gpr = gpr.replace('or','')
        for g in gpr.split():
            df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]
            print(df)
229/65:
# map expression to reaction 

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
[df['Recon3D301']
229/66:
# map expression to reaction 

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df['Recon3D301']
229/67:
# map expression to reaction 

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# select cols from sysROT
cols = [col for col in sysROT.columns if '_pct*kcat' in col]
cols.insert(0, 'gene')
df = sysROT[cols]
df
229/68:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
229/69:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'or' in gprs[0]:
        gpr = gpr.replace('or','')
        for g in gpr.split():
            df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]
            print(df)
229/70:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'or' in gprs[0]:
        gpr = gpr.replace('or','')
        for g in gpr.split():
            gv = df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]
            print(gv)
229/71:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'or' in gpr:
        gpr = gpr.replace('or','')
        for g in gpr.split():
            gv = df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]
            print(gv)
229/72:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'and' in gpr:
        gpr = gpr.replace('and','')
        for g in gpr.split():
            gv = df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]
            print(gv)
    if 'or' in gpr:
        gpr = gpr.replace('or','')
        for g in gpr.split():
            gv = df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]
            print(gv)
229/73:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = 0
for gpr in gprs:
    if 'and' in gpr:
        gpr = gpr.replace('and','')
        for g in gpr.split():
            gv.append = df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]
229/74:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')
229/75:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')
229/76:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')
gprs
229/77:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(','split').replace(')','split')
gprs = gprs.split('split')
gprs
229/78:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(','split').replace(')','split')
gprs = gprs.split('split')
gprs

import re

my_str = "hello<one!two>three.four!five'six"

my_list = re.split(r'[`!@#$%^&*()_+\-=\[\]{};\':"\\|,.<>\/?~]', my_str)
229/79:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(','split').replace(')','split')
gprs = gprs.split('split')
229/80:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(','split').replace(')','split')
gprs = gprs.split('split')
gprs
229/81:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(','split').replace(')','split')
gprs = gprs.split('split')
gprs

gprs[0].split()
229/82:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(','split').replace(')','split')
gprs = gprs.split('split')
gprs

gprs[1].split()
229/83:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(','split').replace(')','split')
gprs = gprs.split('split')
gprs

gprs[0].split()
229/84:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.split('or')
gprs

gprs[0].split()
229/85:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.split('or')
gprs
229/86:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs
229/87:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

for g in gprs:
    if 'and' in g:
        g = g.replace('and','')
        print(g)
229/88:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

for g in gprs:
    if 'and' in g:
        g = g.replace('and','')
        g = g.split()
        print(g)
229/89:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

for g in gprs:
    if 'and' in g:
        g = g.replace('and','')
        g = g.split()
            for x in g:
                print(x)
229/90:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

for g in gprs:
    if 'and' in g:
        g = g.replace('and','')
        g = g.split()
        for x in g:
            print(x)
229/91:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

for g in gprs:
    if 'and' in g:
        g = g.replace('and','')
        g = g.split()
        for x in g:
            print(df[con+'_pct*kcat'][df['Recon3D301'] == float(x)])    
            print(x)
229/92:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

for g in gprs:
    if 'and' in g:
        g = g.replace('and','')
        g = g.split()
        for x in g:
            print(df[con+'_pct*kcat'][df['Recon3D301'] == float(x)])
229/93:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs
229/94:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
229/95:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]
229/96:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]
229/97:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   
value
229/98: import ast
229/99:
import ast
ast.literal_eval(gprs)
229/100:
import ast
ast.ast.parse(gprs)
229/101:
import ast
ast.parse(gprs)
229/102:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
ast.parse(gprs)
229/103:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
print(ast.parse(gprs))
229/104:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
list(ast.parse(gprs))
229/105:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
(ast.literal_eval(gprs))
229/106:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
(ast.eval(gprs))
229/107:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
(eval(gprs))
229/108:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
eval(gprs)
229/109:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
list(eval(gprs))
229/110:
import ast

gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
print(eval(gprs))
229/111:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]
229/112:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

gprs[0]
229/113:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   
float(gprs[0])
229/114:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

[df['Recon3D301'] == float(gprs[0])
229/115:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

df['Recon3D301'] == float(gprs[0])
229/116:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

df[df['Recon3D301'] == float(gprs[0])]
229/117:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]
229/118:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])])
229/119:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=0
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])])
229/120:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])])
229/121:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])])
minsum
229/122:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])])
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[1])])
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[2])])
minsum
229/123:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])])
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[1])])

minsum
229/124:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
minsum.append(list(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]))
minsum.append(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[1])])

minsum
229/125:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
minsum.append(list(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]))
minsum.append(list(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[1])]))

minsum
229/126:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
minsum.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]))
minsum.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[1])]))

minsum
229/127:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = []
for gpr in gprs:
    if 'and' is not in gpr:
        for g in gpr.split():
            minsum.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[1])]))
229/128: gprs
229/129: gprs[0]
229/130: len(gprs[0])
229/131: len(gprs[2])
229/132: (gprs[2])
229/133: and in (gprs[2])
229/134: 'and' in (gprs[2])
229/135: 'and' not in (gprs[2])
229/136:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
for gpr in gprs
    if 'and' not in gpr:
        minsum.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))

minsum
229/137:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
for gpr in gprs:
    if 'and' not in gpr:
        minsum.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))

minsum
229/138:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
for gpr in gprs:
    if 'and' not in gpr:
        minsum.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
        

minsum
sum(minsum)
229/139:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

minsum=[]
for gpr in gprs:
    if 'and' not in gpr:
        minsum.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
        sum_g = sum(minsum)
        

minsum
229/140: gprs[2]
229/141: gprs[2].split()
229/142: gprs[2].replace('and','')
229/143: gprs[2].replace('and','').split()
229/144: gprs[2].replace('and','').split()
229/145: gprs[2].replace('and','').split()[1]
229/146:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split()
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))  
            print(min_g)
        

print(sum_g)
print(min_g)
sum_g = sum(minsum)
229/147:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))  
            print(min_g)
        

print(sum_g)
print(min_g)
sum_g = sum(minsum)
229/148:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
            print(min_g)
        

print(sum_g)
print(min_g)
sum_g = sum(minsum)
229/149:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
            
        print(min_g)
        

print(sum_g)
print(min_g)
sum_g = sum(minsum)
229/150:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
            
        print(sum(min_g))
        

print(sum_g)
print(min_g)
sum_g = sum(minsum)
229/151:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
            
        sum_g.append(sum(min_g))
        

print(sum_g)
print(min_g)
sum_g = sum(minsum)
229/152:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

gprs[0]
value = df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[0])]   

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
            
        sum_g.append(sum(min_g))
        

print(sum_g)
229/153:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))
minsum = sum(sum_g)
    
print(minsum)
229/154:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

gprs
229/155:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

gprs
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1
229/156:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

gprs
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1]
229/157:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1)
229/158:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])
229/159:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])
229/160:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1])
229/161:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1])
229/162:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ ...
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1])
229/163:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1])
229/164:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1])
229/165:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))
229/166:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))
229/167:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))
print(sum)
229/168:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))
print(sum_g)
229/169:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))
229/170: del(sum)
229/171:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))
229/172:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))
229/173:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 124.1]))
229/174:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

min_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]) + \


print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 124.1]))
229/175:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

min_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]) + \


print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 124.1]))
229/176:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

min_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1])


print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 124.1]))
229/177:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

min_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1])


print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]))
229/178:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

min_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1])


print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]))
229/179:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(sum(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

min_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1])


print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]))

print(sum_g+min_g)
229/180:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))

minsum = sum(sum_g)
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

min_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1])


print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]))

print(sum_g+min_g)
229/181:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000
    
print(minsum)

print(gprs)

sum_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 130.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 127.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] ==  131.1]+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 128.1])+ \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 137872.1]))

min_g = \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]) + \
float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1])


print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 125.1]))
print(float(df[con+'_pct*kcat'][df['Recon3D301'] == 126.1]))

print(sum_g+min_g)
229/182:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000
229/183:
# create a copy of the DMEM model for each condition
model_names = {}
for i in range(len(conditions[0])): # select column names that contain numbers
    model_temp = model_DMEM.copy()
    con = conditions[i]
    for rxn in model.reactions:
        if rxn.gene_reaction_rule is not '':
            sum_g = []
            for gpr in gprs:
                if 'and' not in gpr:
                    sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
                if 'and' in gpr:
                    min_g = []
                    for g in gpr.replace('and','').split():
                        min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
                    sum_g.append(min(min_g))
            minsum = sum(sum_g)*1000
    print(rxn.bounds)            
    model_names['model_' + con] = model_temp # name model
    locals().update(model_names)
229/184:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = []
for gpr in gprs:
    if 'and' is not in gpr:
        for g in gpr.split():
            minsum.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gprs[1])]))
229/185:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = []
   for gpr in gprs:
                if 'and' not in gpr:
                    sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
                if 'and' in gpr:
                    min_g = []
                    for g in gpr.replace('and','').split():
                        min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
                    sum_g.append(min(min_g))
            minsum = sum(sum_g)*1000
229/187:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
        f 'and' in gpr:
            min_g = []
            for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
            sum_g.append(min(min_g))

minsum = sum(sum_g)*1000
229/188:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
        if 'and' in gpr:
            min_g = []
            for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
            sum_g.append(min(min_g))

minsum = sum(sum_g)*1000
229/189:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace(' (','split').replace(') ','split')
gprs = gprs.split('split')

gprs

minsum = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
        if 'and' in gpr:
            min_g = []
            for g in gpr.replace('and','').split():
                min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
                sum_g.append(min(min_g))

minsum = sum(sum_g)*1000
229/190:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000
229/191:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/1:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
235/2:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
235/3:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
235/4:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
235/5:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
235/6:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
235/7:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/8:
# # create a copy of the DMEM model for each condition
# model_names = {}
# for i in range(len(conditions[0])): # select column names that contain numbers
#     model_temp = model_DMEM.copy()
#     con = conditions[i]
#     for rxn in model.reactions:
#         if rxn.gene_reaction_rule is not '':
#             sum_g = []
#             for gpr in gprs:
#                 if 'and' not in gpr:
#                     sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#                 if 'and' in gpr:
#                     min_g = []
#                     for g in gpr.replace('and','').split():
#                         min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                     sum_g.append(min(min_g))
#             minsum = sum(sum_g)*1000
#     print(rxn.bounds)            
#     model_names['model_' + con] = model_temp # name model
#     locals().update(model_names)
235/9:
# # map expression to reaction 

# # load Recon3D gene IDs to match them to gene names in the dataset
# genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# # select cols from sysROT
# cols = [col for col in sysROT.columns if '_pct*kcat' in col]
# cols.insert(0, 'gene')
# df = sysROT[cols]

# # create a copy of the DMEM model for each condition
# model_names = {}
# for i in range(len(conditions)): # select column names that contain numbers
#     model_temp = model_DMEM.copy()
#     con = conditions[i]
#     for rxn in model.reactions:
#         if rxn.gene_reaction_rule is not '':
#             sum_g = []
#             for gpr in gprs:
#                 if 'and' not in gpr:
#                     sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#                 if 'and' in gpr:
#                     min_g = []
#                     for g in gpr.replace('and','').split():
#                         min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                     sum_g.append(min(min_g))
#             minsum = sum(sum_g)*1000
#     print(rxn.bounds)            
#     model_names['model_' + con] = model_temp # name model
#     locals().update(model_names)
235/10:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
235/11:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
nodes = [node for node in ast.walk(gprs)]
print(nodes)
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/12:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
import ast
nodes = [node for node in ast.walk(gprs)]
print(nodes)
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/13:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
import ast
nodes = [node for node in gprs.walk(gprs)]
print(nodes)
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/14:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
import ast
nodes = [node for node in gprs.walk(tree)]
print(nodes)
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/15:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
nodes = [node for node in gprs.walk(tree)]
print(nodes)
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/16:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
import ast
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/17:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
import ast

ast.node_or_string(gprs)
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/18:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
import ast

gprs.node_or_string()
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')
gprs

sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/19:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

GPR(string_gpr=gprs)
235/20:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

cobra.core.GPR(string_gpr=gprs)
235/21:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

print(cobra.core.GPR(string_gpr=gprs))
235/22:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

list(cobra.core.GPR(string_gpr=gprs))
235/23:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=gprs))
235/24:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=gprs))
type(a)
235/25:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

model.reactions[12].gpr
a = (cobra.core.GPR(string_gpr=gprs))
type(a)
235/26:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

model.reactions[12].gpr
a = (cobra.core.GPR(string_gpr=gprs))
type(a)
235/27:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')


a = (cobra.core.GPR(string_gpr=gprs))
type(a)

model.reactions[12].gpr
235/28:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')


a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

model.reactions[12].gpr
235/29:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(model.reactions[12].gpr)
235/30:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(gprs)
235/31:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(gprs)
cobra.core.gene.parse_gpr(model.reactions[12].gpr)
235/32:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(gprs)
cobra.core.gene.parse_gpr(string(model.reactions[12].gpr))
235/33:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(gprs)
cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
235/34:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
235/35:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
str(model.reactions[12].gpr)
235/36:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
235/37:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D_genes']
235/38:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301']
235/39:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'].as_string()
235/40:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
str(df['Recon3D301'])
235/41:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'].astype(str)
235/42:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)
235/43:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
df['Recon3D301'][0]
235/44:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
df['Recon3D301'].duplicate()
235/45:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
df['Recon3D301']
235/46:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
df['Recon3D301'].duplicated()
235/47:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
df[df['Recon3D301'].duplicated()]
235/48:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
genes
235/49:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
genes.astype(dict)
235/50:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
dict(genes)
235/51:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
{genes}
235/52:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
to_dict(genes)
235/53:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
pd.to_dict(genes)
235/54:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
pd.genes.to_dict()
235/55:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
genes.to_dict()
235/56:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
dict(df['Recon3D301'],df['gene'])
235/57:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
dict(df['Recon3D301']:df['gene'])
235/58:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
{df['Recon3D301']:df['gene']}
235/59:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
#{df['Recon3D301']:df['gene']} 
frozenlist(df)
235/60:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
#{df['Recon3D301']:df['gene']} 
dict(zip(df.Recon3D301, df.gene))
235/61:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes_dict = dict(zip(df.Recon3D301, df.gene))
# create data frame with expression data for genes in Recon3D
# cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
# cols.insert(0, 'gene') # ad gene column names
# df = pd.merge(genes,sysROT[cols], how = 'inner')
235/62:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
df['Recon3D301'] = df['Recon3D301'].astype(str)  
#{df['Recon3D301']:df['gene']}
235/63:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']}
235/64:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
genes_dixct(cobra.core.gene.parse_gpr(gprs))
235/65:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
genes_dict(cobra.core.gene.parse_gpr(gprs))
235/66:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes_dict = dict(zip(df.Recon3D301, df.gene))
# create data frame with expression data for genes in Recon3D
# cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
# cols.insert(0, 'gene') # ad gene column names
# df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict['130.1']
235/67:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)
235/68:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

gpr_list
235/69:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

list(gpr_list)
235/70:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs))

print(gpr_list)
235/71:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs))

genes_dict[gpr_list]
235/72:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = (cobra.core.gene.parse_gpr(gprs))

genes_dict[gpr_list]
235/73:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = frozenset(cobra.core.gene.parse_gpr(gprs))

genes_dict[gpr_list]
235/74:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = frozenset(cobra.core.gene.parse_gpr(gprs))

type(gpr_list)
235/75:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

type(gpr_list)
235/76:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

[d[key] for key in gprs]
235/77:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

[genes_dict[key] for key in gprs]
235/78:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

[print(key) for key in gprs]
235/79:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

[print(key) for key in gpr_list]
235/80:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs))

[print(key) for key in gpr_list]
235/81:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs))

gpr_list
235/82:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs))

gpr_list[1]
235/83:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs))

gpr_list[1][1]
235/84:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs))

gpr_list[0]
235/85:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = (cobra.core.gene.parse_gpr(gprs))

gpr_list[0]
235/86:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = (cobra.core.gene.parse_gpr(gprs))

gpr_list[1]
235/87:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

gpr_list[1]
235/88:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

type(gpr_list)
235/89:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

type(gpr_list)

gpr_list
235/90:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

type(gpr_list)

gpr_list[1]
235/91:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

type(gpr_list)

gpr_list[1][1]
235/92:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

type(gpr_list)

type(gpr_list[1])
235/93:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)

type(gpr_list)

list(gpr_list[1])
235/94:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)[1]

type(gpr_list)

list(gpr_list[1])
235/95:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = cobra.core.gene.parse_gpr(gprs)[1]

type(gpr_list)
235/96:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs)[1])

type(gpr_list)
235/97:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs)[1])

[genes_dict[key] for key in gpr_list]
235/98:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes_dict = dict(zip(df.Recon3D301, df.gene))
# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict['130.1']
235/99:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs)[1])

[genes_dict[key] for key in gpr_list]

df
235/100:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs)[1])

[genes_dict[key] for key in gpr_list]
235/101:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs)[1])

{gpr_list: [genes_dict[key] for key in gpr_list]}
235/102:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = list(cobra.core.gene.parse_gpr(gprs)[1])

{gpr_list:[genes_dict[key] for key in gpr_list]}
235/103:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_list = tuple(cobra.core.gene.parse_gpr(gprs)[1])

{gpr_list:[genes_dict[key] for key in gpr_list]}
235/104:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

[genes_dict[key] for key in gpr_tup]
235/105:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

tuple([genes_dict[key] for key in gpr_tup])
235/106:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

{gpr_tup:tuple([genes_dict[key] for key in gpr_tup])}
235/107:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

{gpr_tup:tuple([genes_dict[key] for key in gpr_tup]' )}
235/108:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

tuple([genes_dict[key] for key in gpr_tup]
235/109:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

tuple([genes_dict[key] for key in gpr_tup])
235/110:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

tuple([genes_dict[key] for key in gpr_tup])
gpr_tup
235/111:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

gpr_tup2 = tuple([genes_dict[key] for key in gpr_tup])
gpr_tup
235/112:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])

gpr_tup2 = tuple([genes_dict[key] for key in gpr_tup])
gpr_tup
df[gpr_tup]
235/113:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')

a = (cobra.core.GPR(string_gpr=model.reactions[12].gpr))
type(a)

cobra.core.gene.parse_gpr(str(model.reactions[12].gpr))
cobra.core.gene.parse_gpr(gprs)
#{df['Recon3D301']:df['gene']} 
gpr_tup = tuple(cobra.core.gene.parse_gpr(gprs)[1])
tuple([genes_dict[key] for key in gpr_tup])
235/114:
i=0
con = conditions[i]
    for rxn in model.reactions:
        if rxn.gene_reaction_rule is not '':
            sum_g = []
            for gpr in gprs:
                if 'and' not in gpr:
                    sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
                if 'and' in gpr:
                    min_g = []
                    for g in gpr.replace('and','').split():
                        min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
                    sum_g.append(min(min_g))
            minsum = sum(sum_g)*1000
235/115:
i=0
con = conditions[i]
for rxn in model.reactions:
    if rxn.gene_reaction_rule is not '':
        sum_g = []
        for gpr in gprs:
            if 'and' not in gpr:
                sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
            if 'and' in gpr:
                min_g = []
                for g in gpr.replace('and','').split():
                    min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
                sum_g.append(min(min_g))
        minsum = sum(sum_g)*1000
235/116:
i=0
con = conditions[i]
for rxn in model.reactions
    g_tup1 = tuple(cobra.core.gene.parse_gpr(gprs)[1]) # genes in gpr rules
    g_tup2 = tuple([genes_dict[key] for key in gpr_tup]) # looks up gene IDs for used in table

# for rxn in model.reactions:
#     if rxn.gene_reaction_rule is not '':
#         sum_g = []
#         for gpr in gprs:
#             if 'and' not in gpr:
#                 sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#             if 'and' in gpr:
#                 min_g = []
#                 for g in gpr.replace('and','').split():
#                     min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                 sum_g.append(min(min_g))
#         minsum = sum(sum_g)*1000
235/117:
i=0
con = conditions[i]
for rxn in model.reactions:
    g_tup1 = tuple(cobra.core.gene.parse_gpr(gprs)[1]) # genes in gpr rules
    g_tup2 = tuple([genes_dict[key] for key in gpr_tup]) # looks up gene IDs for used in table

# for rxn in model.reactions:
#     if rxn.gene_reaction_rule is not '':
#         sum_g = []
#         for gpr in gprs:
#             if 'and' not in gpr:
#                 sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#             if 'and' in gpr:
#                 min_g = []
#                 for g in gpr.replace('and','').split():
#                     min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                 sum_g.append(min(min_g))
#         minsum = sum(sum_g)*1000
235/118:
i=0
con = conditions[i]
for rxn in model.reactions[12]:
    g_tup1 = tuple(cobra.core.gene.parse_gpr(gprs)[1]) # genes in gpr rules
    g_tup2 = tuple([genes_dict[key] for key in gpr_tup]) # looks up gene IDs for used in table

# for rxn in model.reactions:
#     if rxn.gene_reaction_rule is not '':
#         sum_g = []
#         for gpr in gprs:
#             if 'and' not in gpr:
#                 sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#             if 'and' in gpr:
#                 min_g = []
#                 for g in gpr.replace('and','').split():
#                     min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                 sum_g.append(min(min_g))
#         minsum = sum(sum_g)*1000
235/119:
i=0
con = conditions[i]
for rxn in model.reactions:
    g_tup1 = tuple(cobra.core.gene.parse_gpr(gprs)[1]) # genes in gpr rules
    g_tup2 = tuple([genes_dict[key] for key in gpr_tup]) # looks up gene IDs for used in table

# for rxn in model.reactions:
#     if rxn.gene_reaction_rule is not '':
#         sum_g = []
#         for gpr in gprs:
#             if 'and' not in gpr:
#                 sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#             if 'and' in gpr:
#                 min_g = []
#                 for g in gpr.replace('and','').split():
#                     min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                 sum_g.append(min(min_g))
#         minsum = sum(sum_g)*1000
235/120:
i=0
con = conditions[i]

values = sysROT[con+'_pct*kcat']
235/121:
i=0
con = conditions[i]

values = sysROT[con+'_pct*kcat']
values
235/122:
i=0
con = conditions[i]

values = sysROT[con+'_pct*kcat']
values_dict = dict(zip(sysROT.gene, values))
235/123:
i=0
con = conditions[i]

values = sysROT[con+'_pct*kcat']
values_dict = dict(zip(sysROT.gene, values))
values_dict
235/124:
i=0
con = conditions[i]
values = sysROT[con+'_pct*kcat']
values_dict = dict(zip(sysROT.gene, values)) # dictionary of genes and values of condition i
for rxn in model.reactions:
    g_tup1 = tuple(cobra.core.gene.parse_gpr(gprs)[1]) # genes in gpr rules
    g_tup2 = tuple([genes_dict[key] for key in gpr_tup1]) # looks up gene IDs for used in table
    values = tuple([values_dict[key] for key in g_tup2])
# for rxn in model.reactions:
#     if rxn.gene_reaction_rule is not '':
#         sum_g = []
#         for gpr in gprs:
#             if 'and' not in gpr:
#                 sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#             if 'and' in gpr:
#                 min_g = []
#                 for g in gpr.replace('and','').split():
#                     min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                 sum_g.append(min(min_g))
#         minsum = sum(sum_g)*1000
values
235/125:
i=0
con = conditions[i]
values = sysROT[con+'_pct*kcat']
values_dict = dict(zip(sysROT.gene, values)) # dictionary of genes and values of condition i
for rxn in model.reactions:
    g_tup1 = tuple(cobra.core.gene.parse_gpr(gprs)[1]) # genes in gpr rules
    g_tup2 = tuple([genes_dict[key] for key in g_tup1]) # looks up gene IDs for used in table
    values = tuple([values_dict[key] for key in g_tup2])
# for rxn in model.reactions:
#     if rxn.gene_reaction_rule is not '':
#         sum_g = []
#         for gpr in gprs:
#             if 'and' not in gpr:
#                 sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#             if 'and' in gpr:
#                 min_g = []
#                 for g in gpr.replace('and','').split():
#                     min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                 sum_g.append(min(min_g))
#         minsum = sum(sum_g)*1000
values
235/126:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes_dict = dict(zip(df.Recon3D301, df.gene))
# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
df
235/127:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes_dict = dict(zip(df.Recon3D301, df.gene))
# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
df.index=['Recon3D301']
235/128:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes_dict = dict(zip(df.Recon3D301, df.gene))
# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
df.set_index('Recon3D301')
235/129: df['8639.1']
235/130: cobra.core.gene.parse_gpr(gprs)[1]
235/131:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
tuple(cobra.core.gene.parse_gpr(gprs)[1])
235/132:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
df.loc(tuple(cobra.core.gene.parse_gpr(gprs)[1]))
235/133:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
df.iloc(tuple(cobra.core.gene.parse_gpr(gprs)[1]))
235/134:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
df.iloc(list(cobra.core.gene.parse_gpr(gprs)[1]))
235/135:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
df.iloc(tuple(cobra.core.gene.parse_gpr(gprs)[1]))
235/136:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
df.iloc((cobra.core.gene.parse_gpr(gprs)[1]))
235/137:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
df.index((cobra.core.gene.parse_gpr(gprs)[1]))
235/138:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
df.index(list(cobra.core.gene.parse_gpr(gprs)[1]))
235/139:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
df.iloc[list(cobra.core.gene.parse_gpr(gprs)[1])]
235/140:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
235/141:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
df.iloc['125.1']
235/142:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
df
235/143:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
df.set_index('Recon3D301')
df
235/144:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
df = df.set_index('Recon3D301')
df
235/145:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

df = df.set_index('Recon3D301')
df.iloc[list(cobra.core.gene.parse_gpr(gprs)[1])]
235/146:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
df = df.set_index('Recon3D301')
df.iloc['130.1']
235/147:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
df = df.set_index('Recon3D301')
df.iloc[1]
235/148:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
df = df.set_index('Recon3D301')
df
235/149:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
df.iloc[list(cobra.core.gene.parse_gpr(gprs)[1])]
235/150:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
df.iloc[130.1]
235/151:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
df.iloc['130.1]
235/152:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
df.iloc['130.1']
235/153:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
df.loc['130.1']
235/154:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
df.iloc[1]
235/155:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
df.iloc[0]
235/156:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes_dict = dict(zip(df.Recon3D301, df.gene))
# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
df.set_index('Recon3D301')
235/157:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )
genes_dict = dict(zip(df.Recon3D301, df.gene))
# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
235/158:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict = dict(zip(df.Recon3D301, df.gene))
235/159:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
235/160:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)
235/161:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)

import ast
from pprint import pprint

tree = ast.parse("""
def add(a, b):
  return a + b
""")
pprint(ast.dump(tree))
235/162:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)

import ast
from pprint import pprint

tree = ast.parse("""
def add(a, b):
  return a + b
""")
print(tree)
235/163:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)

import ast
from pprint import pprint

tree = ast.parse("""
def add(a, b):
  return a + b
""")
pprint(tree)
235/164:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)

import ast
from pprint import pprint

tree = ast.parse("""
def add(a, b):
  return a + b
""")
pprint(ast.dump(tree))
235/165:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)

import ast
from pprint import pprint

tree = ast.parse("""
def add(a, b):
  return a + b
""")
pprint(ast.dump(gprs))
235/166:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)

import ast
from pprint import pprint

tree = ast.parse(gprs)
pprint(ast.dump(tree))
235/167:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)

import ast
from pprint import pprint

tree = ast.parse(gprs)
pprint(ast.dump(tree))

ast.literal_eval(gprs)
235/168:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

split(gprs)
235/169:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs.split()
235/170:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs.split('(')
235/171:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs.split('(').split(')')
235/172:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs.split('(')
235/173:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')
list(cobra.core.gene.parse_gpr(gprs)[1])
# df = df.set_index('Recon3D301')
ast.parse(gprs)

import ast
from pprint import pprint

tree = ast.parse(gprs)
pprint(ast.dump(tree))
235/174:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
235/175:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
gprs
235/176:
# Python3 code to demonstrate working of
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
 
# initializing string
test_str = "[(234, ), 4, (432, )]"
 
# printing original string
print("The original string is : " + test_str)
 
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
res = [str(idx) for idx in eval(test_str) if isinstance(idx, tuple)]
 
# printing result
print("The element between brackets : " + str(res))
235/177:
# Python3 code to demonstrate working of
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
 
# initializing string
test_str = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
 
# printing original string
print("The original string is : " + test_str)
 
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
res = [str(idx) for idx in eval(test_str) if isinstance(idx, tuple)]
 
# printing result
print("The element between brackets : " + str(res))
235/178:
# Python3 code to demonstrate working of
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
 
# initializing string
test_str = "'130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'"
 
# printing original string
print("The original string is : " + test_str)
 
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
res = [str(idx) for idx in eval(test_str) if isinstance(idx, tuple)]
 
# printing result
print("The element between brackets : " + str(res))
235/179:
# Python3 code to demonstrate working of
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
 
# initializing string
test_str = "130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)"
 
# printing original string
print("The original string is : " + test_str)
 
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
res = [str(idx) for idx in eval(test_str) if isinstance(idx, tuple)]
 
# printing result
print("The element between brackets : " + str(res))
235/180:
# Python3 code to demonstrate working of
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
 
# initializing string
test_str = "[(234, ), 4, (432, )]"
 
# printing original string
print("The original string is : " + test_str)
 
# Extract substrings between brackets
# Using list comprehension + eval() + isinstance()
res = [str(idx) for idx in eval(test_str) if isinstance(idx, tuple)]
 
# printing result
print("The element between brackets : " + str(res))
235/181:
string = "This is a [sentence]"


first = string.find("[")


second = string.find("]")


print(string[first + 1:second])
235/182:
string =  '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'


first = string.find("(")


second = string.find(")")


print(string[first + 1:second])
235/183:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
gprs = gprs.remove(' ')
235/184:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
gprs = gprs.delete(' ')
235/185:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
gprs = gprs.replace(' ','')
235/186:
del(list)
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
gprs = gprs.replace(' ','')
235/187:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
235/188:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
gprs
235/189:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
[print(gprs for gpr in gprs]
match(gprs,'and')
235/190:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
print(gprs for gpr in gprs)
match(gprs,'and')
235/191:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')
print(gprs for gpr in gprs)
match(gprs,'and')
match(gprs,'or')
235/192:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')

match(gprs,'and')
match(gprs,'or')
235/193:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')

ands = match(gprs,'and')
ors  = match(gprs,'or')

ands
235/194:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')

ands = match(gprs,'and')
ors  = match(gprs,'or')

list(ands)
235/195:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')

ands = match(gprs,'and')
ors  = match(gprs,'or')

ands.replace('and')
235/196:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')

ands = match(gprs,'and')
ors  = match(gprs,'or')

[and_i.replace('and ', '') for and_i in ands]
235/197:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')

ands = match(gprs,'and')
ors  = match(gprs,'or')

[and_i.replace('and ', '') for and_i in ands]
[or_i.replace('or ', '') for or_i in ors]
235/198:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

def match(lst, query):
     # find partial string matches in a list: # e.g.: print(match(lst, 'str'))
    return list(filter(lambda x: query in x, lst))

gprs = gprs.replace('(',':').replace(')',':')
gprs = gprs.split(':')

ands = match(gprs,'and')
ors  = match(gprs,'or')

[and_i.replace('and ', '') for and_i in ands]
[or_i.replace('or', '') for or_i in ors]
235/199: df
235/200:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


gprs
235/201:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum
235/202:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs
235/203:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs
df[con+'_pct*kcat'][df['Recon3D301']
235/204:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs
df[con+'_pct*kcat'][df['Recon3D301']== float(gpr)
235/205:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs
df[con+'_pct*kcat'][df['Recon3D301']== float(gpr)]
235/206:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []
for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs
df[con+'_pct*kcat']
235/207:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []

v = df[con+'_pct*kcat'] # values
g = df['Recon3D301'] # genes

g[v=='130.1']

for gpr in gprs:
    g_ID = float(gpr)
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == g_ID]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == g_ID]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs
235/208:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []

v = df[con+'_pct*kcat'] # values
g = df['Recon3D301'] # genes

g[v=='130.1']

for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs
235/209:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []


for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs
235/210:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []


for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs


float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)])
235/211:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []


for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs


(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)])
235/212:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []


for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs


(df[con+'_pct*kcat'][df['Recon3D301'] == (g)])
235/213:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
#gprs = gprs.replace('(','split').replace(')','split')
#gprs = gprs.split('split')

gprs = gprs.replace('(','').replace(')','')
gprs = gprs.split('or')


sum_g = []


for gpr in gprs:
    if 'and' not in gpr:
        sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
    if 'and' in gpr:
        min_g = []
        for g in gpr.replace('and','').split():
            min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
        sum_g.append(min(min_g))
minsum = sum(sum_g)*1000


minsum

gprs


(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)])
235/214: gprs
235/215: gprs[0]
235/216: (df['gene'][df['Recon3D301'] == float(gprs[0]))
235/217: (df['gene'][df['Recon3D301'] == float(gprs[0])
235/218: df['gene'][df['Recon3D301'] == float(gprs[0])
235/219: df['gene'][df['Recon3D301'] == float(gprs[0])]
235/220:
df['gene'][df['Recon3D301'] == float(gprs[0])]
df['gene'][df['Recon3D301'] == float(gprs[1])]
235/221:
df['gene'][df['Recon3D301'] == float(gprs[0])]
df['gene'][df['Recon3D301'] == float(gprs[1])]
df['gene'][df['Recon3D301'] == float(gprs[2])]
235/222:
df['gene'][df['Recon3D301'] == float(gprs[0])]
df['gene'][df['Recon3D301'] == float(gprs[1])]
gprs[2].replace('and','').split():
235/223:
df['gene'][df['Recon3D301'] == float(gprs[0])]
df['gene'][df['Recon3D301'] == float(gprs[1])]
gprs[2].replace('and','').split()
241/1:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
241/2:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
241/3:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
241/4:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
241/5:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
241/6:
# map expression to reaction

# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict = dict(zip(df.Recon3D301, df.gene))
241/7:
import ast
from ast import parse as ast_parse
from ast import (And, BitAnd, BitOr, BoolOp, Expr, Name, NodeTransformer, Or)

def get_value(dictionary: dict, name: str) -> float:
return dictionary[name]

def ast_analysis(exp: ast.AST, dictionary: dict) -> float:
    value: float = 0.0

    # Analyse expression
    if isinstance(exp, ast.Expression):
        value = ast_analysis(exp.body, dictionary)

    # and/or
    elif isinstance(exp, ast.BoolOp):

        # get values according to operation. It will call itself recursively

        if isinstance(exp.op, ast.Or):
            temp_or = []
            for item in exp.values:
                try:
                    temp_or.append(ast_analysis(item, dictionary))
                    value = sum(filter(None, temp_or))
                except ValueError:
                    continue

        elif isinstance(exp.op, ast.And):
            temp_and = []
            for item in exp.values:
                try:
                    temp_and.append(ast_analysis(item, dictionary))
                    value = min(filter(None, temp_and))
                except ValueError:
                    continue

        else:
            raise Exception(
                f"Expression: {exp} cannot be interpreted.\n{ast.dump(exp)}"
            )

    # get the value
    elif isinstance(exp, ast.Constant):
        pass
    elif isinstance(exp, ast.Name):

        # Expression ends up here and will either go back in the recursion or
        # ends here.

        # Replace with function
        if exp.id in dictionary:
            value = get_value(dictionary, exp.id)
        elif exp.id not in dictionary:
            value = None

    else:
        raise Exception(
            f"Expression: {exp} is not an BoolOp or Name.\n{ast.dump(exp)}"
        )

    return value
241/8:
import ast
from ast import parse as ast_parse
from ast import (And, BitAnd, BitOr, BoolOp, Expr, Name, NodeTransformer, Or)

def get_value(dictionary: dict, name: str) -> float:
    return dictionary[name]

def ast_analysis(exp: ast.AST, dictionary: dict) -> float:
    value: float = 0.0

    # Analyse expression
    if isinstance(exp, ast.Expression):
        value = ast_analysis(exp.body, dictionary)

    # and/or
    elif isinstance(exp, ast.BoolOp):

        # get values according to operation. It will call itself recursively

        if isinstance(exp.op, ast.Or):
            temp_or = []
            for item in exp.values:
                try:
                    temp_or.append(ast_analysis(item, dictionary))
                    value = sum(filter(None, temp_or))
                except ValueError:
                    continue

        elif isinstance(exp.op, ast.And):
            temp_and = []
            for item in exp.values:
                try:
                    temp_and.append(ast_analysis(item, dictionary))
                    value = min(filter(None, temp_and))
                except ValueError:
                    continue

        else:
            raise Exception(
                f"Expression: {exp} cannot be interpreted.\n{ast.dump(exp)}"
            )

    # get the value
    elif isinstance(exp, ast.Constant):
        pass
    elif isinstance(exp, ast.Name):

        # Expression ends up here and will either go back in the recursion or
        # ends here.

        # Replace with function
        if exp.id in dictionary:
            value = get_value(dictionary, exp.id)
        elif exp.id not in dictionary:
            value = None

    else:
        raise Exception(
            f"Expression: {exp} is not an BoolOp or Name.\n{ast.dump(exp)}"
        )

    return value
241/9:  gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
241/10:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
GPRS
241/11:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gprs
241/12:
gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gprs.ast_analysis()
241/13:  model.reactions[0].id
241/14:  model.reactions[13].id
241/15: gpr = model.reactions.get_by_id( model.reactions[13].id).gene_reaction_rule
241/16:
gpr = model.reactions.get_by_id( model.reactions[13].id).gene_reaction_rule
gpr
241/17:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr
241/18:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
value = ast_analysis(expression, exp_data_dict)
bound_vals[reaction.id] = value
241/19:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
241/20:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
expression
241/21:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[i] +'_pct*kcat'
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



value = ast_analysis(expression, exp_data_dict)
bound_vals[reaction.id] = value
241/22:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[i] +'_pct*kcat'

condition
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/23:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

condition
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/24:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

df[condition]
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/25:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
expression
df
241/26:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

zip(df['Recon3D301'], df[condition])
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/27:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

list(zip(df['Recon3D301'], df[condition])(
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/28:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

list(zip(df['Recon3D301'], df[condition]))
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/29:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = {list(zip(df['Recon3D301'], df[condition]))}
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/30:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = {(zip(df['Recon3D301'], df[condition]))}
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/31:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = {(frozenset(df['Recon3D301'], df[condition]))}
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/32:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = {(list(df['Recon3D301'], df[condition]))}
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/33:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/34:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(df['Recon3D301'], df[condition]))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/35:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = (list(df['Recon3D301'], df[condition]))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/36:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = list(zip(df['Recon3D301'], df[condition]))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/37:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/38:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = {(list(zip(df['Recon3D301'], df[condition])))}
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/39:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition



# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/40:
gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/41:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/42:
gpr = '130.1 sf 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/43:
gpr = '130.1 or 12asddaa7.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/44:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value
241/45:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

ast.expression()
241/46:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

expression
241/47:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

expression.AST
241/48:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

expression.body
241/49:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression):
241/50:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

ast.Expression
241/51:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
241/52:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
241/53:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
expression.op
241/54:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
# Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
expression.Or
241/55:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
print(exp_data_dict)
ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
241/56:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
head(exp_data_dict)
ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
241/57:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
print(exp_data_dict.head())
ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
241/58:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
(exp_data_dict.head())
ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
241/59:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
241/60:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict
ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
241/61:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict

expression
241/62:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict

expression.body
241/63:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict

expression.body

expression.BoolOp
242/1:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
242/2:
quadratic_formula_plus = Divide(Add(Negate(Variable('b')), Sqrt(Subtract(Multiply(Variable('b'), Variable('b')), Multiply(Constant(4), Multiply(Variable('a'), Variable('c')))))), Multiply(Constant(2), Variable('a')))
quadratic_formula_minus = Divide(Subtract(Negate(Variable('b')), Sqrt(Subtract(Multiply(Variable('b'), Variable('b')), Multiply(Constant(4), Multiply(Variable('a'), Variable('c')))))), Multiply(Constant(2), Variable('a')))
242/3:
print(to_string(quadratic_formula_plus))
print(to_string(quadratic_formula_minus))
242/4:
coefficients = {'a': 2, 'b': 3, 'c': -1}
x_0 = evaluate(quadratic_formula_minus, coefficients)
x_1 = evaluate(quadratic_formula_plus, coefficients)
print(x_0)
print(x_1)
242/5:
# Check Vieta's formulas
print(f'{x_0*x_1} == {coefficients["c"]/coefficients["a"]}')
print(f'{x_0+x_1} == {-coefficients["b"]/coefficients["a"]}')
242/6:
(to_string(quadratic_formula_plus))
(to_string(quadratic_formula_minus))
241/64:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
expression.left
241/65:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
expression
241/66:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
expression
dir(expression)
241/67:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
expression.body
241/68:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
dir(expression.body)
241/69:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
dir(expression.body.values)
241/70:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values)
241/71:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[1])
241/72:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[0])
241/73:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
dir(expression.body.values[0])
241/74:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
dir(expression.body.values[0].value)
241/75:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[0].value)
241/76:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[1].value)
241/77:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].value)
241/78:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[3].value)
241/79:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values.value)
241/80:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[1].value)
241/81:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
dir(expression.body)
241/82:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
dir(expression.body.op)
241/83:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.op)
241/84:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.op[0])
241/85:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.op)
241/86:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body)
241/87:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
dir(expression.body)
241/88:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
dir(expression.body.lineno)
241/89:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.lineno)
241/90:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body)
241/91:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.valeus)
241/92:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values)
241/93:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[1])
241/94:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[1].value)
241/95:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].value)
241/96:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[3].value)
241/97:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[4].value)
241/98:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values.value)
241/99:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values)
241/100:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2])
241/101:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].body)
241/102:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values)
241/103:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[1])
241/104:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[1]value)
241/105:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[1].value)
241/106:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)
241/107:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)
dir(expression)
241/108:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)
242/7:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
242/8:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
    
    
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
evaluate(gpr)
241/109:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

eval_gpr(expression)
241/110:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

(expression.eval_gpr())
241/111:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

expression.eval_gpr()
241/112:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(expression)
241/113:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)
241/114:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)
cobra.core.gene.eval_gpr(expression)
241/115:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)
cobra.core.gene.eval_gpr(expression,'')
241/116:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)
cobra.core.gene.eval_gpr(expression,knockouts='')
241/117:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'



#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)
cobra.core.gene.eval_gpr(expression)
242/9:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
    
    
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.replace('or','').replace('and','').replace('(','').replace(')','')
242/10:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
    
    
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
gpr.replace('or','').replace('and','').replace('(','').replace(')','').split()
242/11:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
    
    
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
242/12:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
    
    
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
evaluate(gpr,set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split()))
242/13:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
    
    
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
evaluate(gpr,(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split()))
242/14:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
    
    
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
evaluate(gpr,list(set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())))
241/118:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)
cobra.core.gene.eval_gpr(expression)

split(gpr)
241/119:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

split(gpr)
241/120:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

gpr.split()
241/121:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

if isinstance(gpr, and):
    return evaluate(expr.left, variables)*evaluate(expr.right, variables)
241/122:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

if isinstance(gpr, 'and'):
    return evaluate(expr.left, variables)*evaluate(expr.right, variables)
241/123:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr
241/124:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr

isinstance(gpr,'and')
241/125:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr

isinstance(gpr.split(),'and')
241/126:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
gpr2 = gpr.replace('(','').replace(')','').split())
gpr2


#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr

isinstance(gpr.split(),'and')
241/127:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr

isinstance(gpr.split(),'and')
241/128:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr2
241/129:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
gpr_split = gpr.replace('(','').replace(')','').split()




#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr2
241/130:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
gpr_split = gpr.replace('(','').replace(')','').split()




#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr_split
241/131:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())


gpr_split = gpr.replace('(',')').replace(')','').split(,')')




#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr_split
241/132:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())


gpr_split = gpr.replace('(',')').replace(')','').split(')')




#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr_split
241/133:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())


gpr_split = gpr.replace('(',')').split(')')




#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr_split
241/134:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
gpr_split = gpr.replace('(','').replace(')','').split()




#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr
241/135:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
expression
241/136:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
expression
ast.compile(expression)
241/137:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
expression
import ast
ast.compile(expression)
241/138:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
expression
import ast
ast.parse(expression)
241/139:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
expression
241/140:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
241/141:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
241/142:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.dump(expression))
241/143:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.walk(expression))
241/144:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.dump(expression))
241/145:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.dump(expression))

ast.walk(expression)
241/146:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.dump(expression))

print(ast.walk(expression)_
241/147:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.dump(expression))

print(ast.walk(expression))
241/148:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.dump(expression))

print(ast.walk(expression)[0])
241/149:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.dump(expression))

for node in (ast.walk(expression))
241/150:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)
print(ast.dump(expression))

for node in (ast.walk(expression)):
    print(node)
241/151:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
241/152:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
    node.value
241/153:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
241/154:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
expression
241/155:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
dir(expression)
241/156:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
dir(expression.body)
241/157:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
dir(expression.body.values)
241/158:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)
241/159:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr
241/160:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','')
241/161:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','')
gpr2
241/162:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2
241/163:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2

for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1],gpr2[i+1])
241/164:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1],gpr2[i+1])
241/165:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1]).append(gpr2[i+1])
241/166:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
241/167:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        
min_gpr
241/168:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
gpr_split = gpr.replace('(','').replace(')','').split()

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr
241/169:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
gpr_split = gpr.replace('(','').replace(')','').split()

#gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
expression = ast.parse(gpr, mode  ="eval")
condition = conditions[0] +'_pct*kcat'

exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
exp_data_dict

ast_analysis(expression, exp_data_dict)

# value = ast_analysis(expression, exp_data_dict)
# bound_vals[reaction.id] = value

isinstance(expression, ast.Expression)
ast_analysis(expression.body,exp_data_dict)
exp_data_dict
(expression.body.values[2].values[0].value)

cobra.core.gene.parse_gpr(gpr)

# if isinstance(gpr, 'and'):
#     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

gpr
241/170:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if gpr2[i+2] != 'and':
            min_gpr.append(gpr2[i+1])
        
min_gpr
241/171:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        while len(gpr2)>=i+2
        if gpr2[i+2] != 'and':
            min_gpr.append(gpr2[i+1])
        
min_gpr
241/172:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        while len(gpr2)>=i+:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
min_gpr
241/173:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        while len(gpr2)>=i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
min_gpr
241/174:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])

min_gpr
241/175:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
min_gpr
241/176:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if gpr2[i+2] != 'and':
            min_gpr.append(gpr2[i+1])
        
min_gpr
241/177:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+3
        if gpr2[i+2] != 'and':
            min_gpr.append(gpr2[i+1])
        
min_gpr
241/178:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+3:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
min_gpr
241/179:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
min_gpr
241/180:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "this is a [ki_te] message"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group(1))
241/181:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "this is a [ki_te] messag[e]"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group(1))
241/182:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "this is a [ki_te] messag[e]"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group(2))
241/183:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "this is a [ki_te] messag[e"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result)
241/184:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "this is a [ki_te] messag[e"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group())
241/185:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "this is a [ki_te] messag[e}"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group())
241/186:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "this is a [ki_te] messag[e]"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group())
241/187:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "thi[s i]s a [ki_te] messag[e]"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group())
241/188:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "thi[si]s a [ki_te] messag[e]"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group())
241/189:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "thi[s i]s a [ki_te] messag[e]"

result = re.search(r"\[([A-Za- z0-9_]+)\]", a_string)

print(result.group())
241/190:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "thi[si]s a [ki_te] messag[e]"

result = re.search(r"\[([A-Za- z0-9_]+)\]", a_string)

print(result.group())
241/191:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2


min_gpr=[]
for i in range(len(gpr2)):
    if gpr2[i] == 'and':
        min_gpr.append(gpr2[i-1])
        if len(gpr2)>i+2:
            if gpr2[i+2] != 'and':
                min_gpr.append(gpr2[i+1])
        
        
min_gpr

import re
a_string = "thi[si]s a [ki_te] messag[e]"

result = re.search(r"\[([A-Za-z0-9_]+)\]", a_string)

print(result.group())
241/192:
gpr = model.reactions.get_by_id( model.reactions[12].id).gene_reaction_rule
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
expression = ast.parse(gpr, mode="eval")
ast.dump(expression)


for node in (ast.walk(expression)):
    print(node)
(expression.body.values)

gpr2 = gpr.replace('(','').replace(')','').split()
gpr2
241/193:
gpr2 = gpr.replace('(','').replace(')','').split()
gpr2
241/194:
gpr2 = gpr.replace('(',')').split(')')
gpr2
241/195:
gpr2 = gpr.replace('(',')').split(')')
gpr2.contains('or')
241/196:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)
241/197:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

[x for x in gpr2]
241/198:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

[print(x)if 'and' in x for x in gpr2]
241/199:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

[print(x) if 'and' in x for x in gpr2]
241/200:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

[print(x) for x in gpr2 if 'and' in x ]
241/201:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

[x for x in gpr2 if 'and' in x ]
241/202:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

[print(x) for x in gpr2 if 'and' in x ]
241/203:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

[list(x) for x in gpr2 if 'and' in x ]
241/204:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

[x for x in gpr2 if 'and' in x ]
241/205:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
241/206:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_and
241/207:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
241/208:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_or
241/209:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_or.remove('or')
241/210:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_or.del('or')
241/211:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_or.replace('or','').split()
241/212:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_or.replace('or','')
241/213:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','').split() for x in gpr2 if 'or' in x]
gpr_or
241/214:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','') for x in gpr2 if 'or' in x]
gpr_or
241/215:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','') for x in gpr2 if 'or' in x]
gpr_or.split()
241/216:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','').split for x in gpr2 if 'or' in x]
241/217:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','').split for x in gpr2 if 'or' in x]
241/218:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','').split for x in gpr2 if 'or' in x]
gpr_or
241/219:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','') for x in gpr2 if 'or' in x]
gpr_or
241/220:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','') for x in gpr if 'or' in x]
gpr_or
241/221:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','') for x in gpr2 if 'or' in x]
gpr_and
241/222:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x.replace('or','') for x in gpr2 if 'or' in x]
gpr_and
gpr2
241/223:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr2
241/224:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_or
241/225:
gpr2 = gpr.replace('(',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_or
242/15:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
243/1:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+show_expression(expr.left)+'+'+show_expression(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+show_expression(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+show_expression(expr.left)+'-'+show_expression(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+show_expression(expr.left)+'*'+show_expression(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+show_expression(expr.left)+'/'+show_expression(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+show_expression(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
243/2:
quadratic_formula_plus = Divide(Add(Negate(Variable('b')), Sqrt(Subtract(Multiply(Variable('b'), Variable('b')), Multiply(Constant(4), Multiply(Variable('a'), Variable('c')))))), Multiply(Constant(2), Variable('a')))
quadratic_formula_minus = Divide(Subtract(Negate(Variable('b')), Sqrt(Subtract(Multiply(Variable('b'), Variable('b')), Multiply(Constant(4), Multiply(Variable('a'), Variable('c')))))), Multiply(Constant(2), Variable('a')))
243/3:
print(to_string(quadratic_formula_plus))
print(to_string(quadratic_formula_minus))
244/1:
class Tweet:
    pass
244/2: a = Tweet()
244/3: b = Tweet()
244/4: a
244/5: a.message = 'instance object message'
244/6: b.message = 'instance object message'
244/7: a
244/8: a.message
244/9: b.message
244/10:
class Tweet:
    def __init__(self):
        print('Hi')
244/11: Tweet
244/12: a
244/13: a = Tweet('sgsf')
244/14: a = Tweet('someting)
244/15: a = Tweet('someting')
244/16: a = Tweet()
244/17: a = Tweet()
244/18:
class Tweet:
    def __init__(self):
        self.x = message
244/19: a = Tweet()
244/20: a = Tweet('Something')
244/21:
class Tweet:
    def __init__(self,message):
        self.x = message
244/22: Tweet(a)
244/23: Tweet('af')
244/24:
class Tweet:
    def __init__(self,message):
        self.x = message
    def print_tweet():
        print(self.message)
244/25: Tweet('af')
244/26: a = Tweet('Something')
244/27: a = Tweet()
244/28:
class Tweet:
    def __init__(self,message):
        self.message = message
    def print_tweet():
        print(self.message)
244/29: Tweet('af')
244/30: a = Tweet('Something')
244/31: t = Tweet('I am a Tweet')
244/32: t.print_tweet
244/33: t.print_tweet()
244/34:
class Tweet:
    def __init__(self,message):
        self.message = message
    def print_tweet():
        print(self.message)
244/35: t.print_tweet()
244/36:
class Tweet:
    def __init__(self,message):
        self.message = message
    def print_tweet(self):
        print(self.message)
244/37: t = Tweet('I am a Tweet')
244/38: t.print_tweet()
245/1:
import math

class Expression:
    pass

class Add(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Negate(Expression):
    def __init__(self, expr):
        self.expr = expr
        
class Subtract(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Multiply(Expression): 
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Divide(Expression):
    def __init__(self, left, right):
        self.left = left
        self.right = right
        
class Sqrt(Expression):
    def __init__(self, expr):
        self.expr = expr

class Variable(Expression):
    def __init__(self, name):
        self.name = name

class Constant(Expression):
    def __init__(self, value):
        self.value = value
        
def to_string(expr):
    if isinstance(expr, Add):
        return '('+to_string(expr.left)+'+'+to_string(expr.right)+')'
    if isinstance(expr, Negate):
        return '(-'+to_string(expr.expr)+')'
    if isinstance(expr, Subtract):
        return '('+to_string(expr.left)+'-'+to_string(expr.right)+')'
    if isinstance(expr, Multiply):
        return '('+to_string(expr.left)+'*'+to_string(expr.right)+')'
    if isinstance(expr, Divide):
        return '('+to_string(expr.left)+'/'+to_string(expr.right)+')'
    if isinstance(expr, Sqrt):
        return '(sqrt '+to_string(expr.expr)+')'
    if isinstance(expr, Variable):
        return expr.name
    if isinstance(expr, Constant):
        return str(expr.value)
    raise ValueError()
    
def evaluate(expr, variables):
    if isinstance(expr, Add):
        return evaluate(expr.left, variables)+evaluate(expr.right, variables)
    if isinstance(expr, Negate):
        return -evaluate(expr.expr, variables)
    if isinstance(expr, Subtract):
        return evaluate(expr.left, variables)-evaluate(expr.right, variables)
    if isinstance(expr, Multiply):
        return evaluate(expr.left, variables)*evaluate(expr.right, variables)
    if isinstance(expr, Divide):
        return evaluate(expr.left, variables)/evaluate(expr.right, variables)
    if isinstance(expr, Sqrt):
        return math.sqrt(evaluate(expr.expr, variables))
    if isinstance(expr, Variable):
        return variables[expr.name]
    if isinstance(expr, Constant):
        return expr.value
    raise ValueError()
241/226:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr2 if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_or
241/227:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_or
241/228:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and
241/229:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
gpr_and
241/230:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and.replace('and','')
241/231:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and.replace('and',''):
241/232:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and.replace('and',''):
    print(x)
241/233:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and.replace('and',''):
    print(x)
241/234:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    print(x.replace('and',''))
241/235:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    print(x.replace('and','').split)
241/236:
gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    print(x.replace('and','').split())
241/237:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    print(x.replace('and','').split())
241/238:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = (x.replace('and','').split())
    print(x)
241/239:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    print(x)
241/240:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    
    print(x)

exp_data_dict
241/241:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    exp_data_dict[x]
    print(x)
241/242:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = tuple(x.replace('and','').split())
    exp_data_dict[x]
    print(x)
241/243:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(exp_data_dict[x])
    print(x)
241/244:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print([x])
    print(x)
241/245:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print[x]
    print(x)
241/246:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(x)
    print(x)
241/247:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(x)
241/248:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)
241/249:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)
        


exp_data_dict
241/250:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)
        


exp_data_dict[125.1]
241/251:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)
        exp_data_dict[xi]
241/252:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)
241/253:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)

        
exp_data_dict[125.1]
241/254:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)

        
exp_data_dict[124.1]
241/255:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)
        print(exp_data_dict[124.1])
241/256:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    for xi in x:
        print(xi)
        print(exp_data_dict[float(xi)])
241/257:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_min = []
    for xi in x:
        print(xi)
        x_min = x_min.append(exp_data_dict[float(xi)])
    print(x_min)
241/258:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_min = ()
    for xi in x:
        print(xi)
        x_min = x_min.append(exp_data_dict[float(xi)])
    print(x_min)
241/259:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_min = 0
    for xi in x:
        print(xi)
        x_min = x_min.append(exp_data_dict[float(xi)])
    print(x_min)
241/260:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_min = []
    for xi in x:
        print(xi)
        x_min = x_min.append(exp_data_dict[float(xi)])
    print(x_min)
241/261:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_min = []
    for xi in x:
        print(xi)
        #x_min = x_min.append(exp_data_dict[float(xi)])
    print(x_min)

        
dir(x_min)
241/262:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_min = []
    for xi in x:
        print(xi)
        x_min = x_min.append(exp_data_dict[float(xi)])
    print(x_min)

        
dir(x_min)
241/263:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    [exp_data_dict[float(xi)] for xi in x]
    
    
    for xi in x:
        print(xi)
        #x_min = x_min.append(exp_data_dict[float(xi)])
    print(x_min)

        
dir(x_min)
241/264:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    [exp_data_dict[float(xi)] for xi in x]|    
    for xi in x:
        print(xi)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/265:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    [exp_data_dict[float(xi)] for xi in x]
    for xi in x:
        print(xi)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/266:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    print([exp_data_dict[float(xi)] for xi in x])
    for xi in x:
        print(xi)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/267:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    print([exp_data_dict[float(xi)] for xi in x])
    print(x)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/268:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    dict(x,([exp_data_dict[float(xi)] for xi in x]))
    print(x)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/269:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    dict(list(x,([exp_data_dict[float(xi)] for xi in x])))
    print(x)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/270:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    {x,([exp_data_dict[float(xi)] for xi in x]}
    print(x)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/271:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    [exp_data_dict[float(xi)] for xi in x]
    print(x)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/272:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    print(x)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/273:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    print(x, x_val)
        #x_min = x_min.append(exp_data_dict[float(xi)])

        
dir(x_min)
241/274:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    print(x, x_val)
        #x_min = x_min.append(exp_data_dict[float(xi)])
print(x)
        
dir(x_min)
241/275:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    print(x, x_val)
    dict(x,x_val)
        #x_min = x_min.append(exp_data_dict[float(xi)])
dir(x_min)
241/276:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    print(x, x_val)
    dict(x:x_val)
        #x_min = x_min.append(exp_data_dict[float(xi)])
dir(x_min)
241/277:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    print(x, x_val)
    dict(zip(x,x_val))
        #x_min = x_min.append(exp_data_dict[float(xi)])
dir(x_min)
241/278:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    print(x, x_val)
    print(dict(zip(x,x_val)))
        #x_min = x_min.append(exp_data_dict[float(xi)])
dir(x_min)
241/279:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    print(dict(zip(x,x_val)))
        #x_min = x_min.append(exp_data_dict[float(xi)])
dir(x_min)
241/280:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
        #x_min = x_min.append(exp_data_dict[float(xi)])
dir(x_min)
241/281:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    print(x_dict.values)
241/282:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    print(x_dict.values())
241/283:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    print(min(x_dict, key=x_dict.get))
    print(x_dict.values())
241/284:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    print(min(x_dict, key=x_dict.get))
    print(x_dict)
241/285:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

x_min = []
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get))
    print(x_dict)
241/286:

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))

gpr2 = gpr.replace('(',')').split(')')
gpr3 = gpr.replace('',')').split(')')
dir(gpr2)

gpr_or = [x for x in gpr2 if 'or' in x]
gpr_and
gpr_and

gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]

x_min = []
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get))
    print(x_dict)
x_min
241/287: gpr_or = [x for x in gpr2 if 'or' in x]
241/288:
gpr_or = [x for x in gpr2 if 'or' in x]
gpr_or
241/289:
gpr_or = [x.replace('or',''') for x in gpr2 if 'or' in x]
gpr_or
241/290:
gpr_or = [x.replace('or','') for x in gpr2 if 'or' in x]
gpr_or
241/291:
gpr_or = [x.replace('or','').split for x in gpr2 if 'or' in x]
gpr_or
241/292:
gpr_or = [x.replace('or','').split() for x in gpr2 if 'or' in x]
gpr_or
241/293:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
gpr_or = [x.replace('or','').split() for x in gpr2 if 'or' in x]
gpr_or
241/294:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
gpr_or = [x.replace('or','').split() for x in gpr if 'or' in x]
gpr_or
241/295:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
gpr_or = [gpr.replace('or','').split() for x in gpr if 'or' in x]
gpr_or
241/296:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
gpr_or = [x.replace('or','').split() for x in gpr if 'or' in gpr]
gpr_or
241/297:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

gpr_or
241/298:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

gpr
241/299:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr
241/300:
gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or
241/301:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or
241/302:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

    # min
    x_min = []
    gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
    for x in gpr_and:
        x = x.replace('and','').split()
        x_val = [exp_data_dict[float(xi)] for xi in x]
        x_dict = dict(zip(x,x_val))
        x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    x_min
241/303:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
241/304:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

x_dict
241/305:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
241/306:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

exp_data_dict[2977.1]
241/307:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

exp_data_dict[2983.1]
241/308:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = set(gpr.replace('(','').replace(')','').replace('and','').replace('or','')
gpr_genes = [genes for genes in gpr]
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

exp_data_dict[2983.1]
241/309:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = set(gpr.replace('(','').replace(')','').replace('and','').replace('or',''))
gpr_genes = [genes for genes in gpr]
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

exp_data_dict[2983.1]
241/310:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = set(gpr.replace('(','').replace(')','').replace('and','').replace('or',''))
gpr_genes = [genes for genes in gpr]
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/311:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split)
gpr_genes = [genes for genes in gpr]
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/312:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = set(gpr.replace('(','').replace(')','').replace('and','').replace('or',''))

gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/313:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = (gpr.replace('(','').replace(')','').replace('and','').replace('or',''))

gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/314:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = (gpr.replace('(','').replace(')','').replace('and','').replace('or','').split())

gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/315:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split())

gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/316:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/317:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [genes_dict_gpr[gpr_genes] for genes_dict_gpr in genes_dict]
              
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/318:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
              
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/319:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
              
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
241/320:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
              
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
genes_dict_gpr[gpr_genes[0]]
241/321:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
              
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
genes_dict[gpr_genes[0]]
241/322:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
              
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
genes_dict[gpr_genes[1]]
241/323:
# map expression to reaction
gpr = model.reactions.get_by_id(reaction.id).gene_reaction_rule
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict = dict(zip(df.Recon3D301, df.gene))
241/324:
# map expression to reaction
gpr = model.reactions.get_by_id(reaction.id).gene_reaction_rule
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict = dict(zip(df.Recon3D301, df.gene))
241/325:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
241/326:
# map expression to reaction
gpr = model.reactions.get_by_id(reaction.id).gene_reaction_rule
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict = dict(zip(df.Recon3D301, df.gene))
241/327:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
241/328:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
241/329:
# map expression to reaction
#gpr = model.reactions.get_by_id(reaction.id).gene_reaction_rule
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict = dict(zip(df.Recon3D301, df.gene))
241/330:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
              
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
genes_dict[gpr_genes[1]]
241/331:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
              
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
genes_dict[2977.1]
241/332:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
genes_dict[2977.1]
241/333:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
exp_data_dict[2977.1]
241/334:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
exp_data_dict[2977.1]
241/335:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
exp_data_dict[2977.1]
241/336:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
   # x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
exp_data_dict[2977.1]
gpr_and
241/337:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
exp_data_dict[2977.1]
gpr_and
241/338:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
exp_data_dict[2974.1]
gpr_and
241/339:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    #x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
exp_data_dict[2974.1]
gpr_and
241/340:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    #x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
exp_data_dict[2974.1]
gpr_and

# 2974.1
df
241/341:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    #x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
241/342:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
241/343:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    try:
        x_val = [exp_data_dict[float(xi)] for xi in x]
    except KeyError:
          pass
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
241/344:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    try:
        x_val = [exp_data_dict[float(xi)] for xi in x]
    except KeyError:
          pass
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
241/345:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    try:
        x_val = [exp_data_dict[float(xi)] for xi in x]
    except KeyError:
          pass
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
241/346:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
#gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    try:
        x_val = [exp_data_dict[float(xi)] for xi in x]
    except KeyError:
          pass
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
241/347: exp_data_dict
241/348: 26.1 in exp_data_dict
241/349:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [exp_data_dict[gpr_gene] for gpr_gene in gpr_genes if gpr_gene in exp_data_dict]
241/350:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_values = [exp_data_dict[gpr_gene] for gpr_gene in gpr_genes if gpr_gene in exp_data_dict]
exp_data_dict
241/351:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_values = [exp_data_dict[gpr_gene] for gpr_gene in gpr_genes if gpr_gene in exp_data_dict]
gpr_values
241/352:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [exp_data_dict[gpr_gene] for gpr_gene in gpr_genes if gpr_gene in exp_data_dict]
gpr_values
241/353:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [exp_data_dict[gpr_gene] for gpr_gene in gpr_genes if gpr_gene in exp_data_dict]
exp_data_dict
241/354:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [exp_data_dict[gpr_gene] for gpr_gene in gpr_genes if gpr_gene in exp_data_dict]
2983.1 in exp_data_dict
241/355:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [exp_data_dict[gpr_gene] for gpr_gene in gpr_genes if gpr_gene in exp_data_dict]
2974.1 in exp_data_dict
241/356:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [exp_data_dict[gpr_gene] for gpr_gene in gpr_genes if gpr_gene in exp_data_dict]
exp_data_dict[2977.1]
241/357:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
241/358:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))



gpr_genes
241/359:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




gpr_genes in genes_dict
241/360:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[gpr_genes for gpr_genes in genes_dict]
241/361:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[gpr_genes for gpr_genes if in genes_dict]
241/362:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[g for g in gpr_genes if in genes_dict]
241/363:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[g for g in gpr_genes if g in genes_dict]
241/364:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[g for g in gpr_genes if g in exp_data_dict]
241/365:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[g for g in gpr_genes if g in exp_data_dict.keys]
241/366:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[g for g in gpr_genes if g in exp_data_dict]
exp_data_dict
241/367:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[g for g in gpr_genes if g in exp_data_dict]
exp_data_dict.keys()
241/368:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[g for g in gpr_genes if g in exp_data_dict.keys()]
exp_data_dict.keys()
241/369:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))




[g for g in gpr_genes if g in exp_data_dict.keys()]
241/370:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

[g for g in gpr_genes if g in exp_data_dict.keys()]

gpr_genes[0] in exp_data_dict.keys()
241/371:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

[g for g in gpr_genes if g in exp_data_dict.keys()]

gpr_genes[1] in exp_data_dict.keys()
241/372:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

[g for g in gpr_genes if g in exp_data_dict.keys()]

2977.1 in exp_data_dict.keys()
241/373:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

[g for g in gpr_genes if float(g) in exp_data_dict.keys()]



2977.1 in exp_data_dict.keys()
241/374:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

[g for g in gpr_genes if float(g) in exp_data_dict.keys()]
241/375:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr)
241/376:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)
241/377:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_values = [genes_dict_gpr[gpr_gene] for gpr_gene in gpr_genes]
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
241/378:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
241/379:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    #x_dict = dict(zip(x,x_val))
    #x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
241/380:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
241/381:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
print(x_min)
241/382:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)

x_dict
241/383:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)

x_dict.get
241/384:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)

min(x_dict.get)
241/385:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)

x_dict.get
241/386:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)

min(x_dict, key=x_dict.get)
241/387:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)

min(x_dict)
241/388:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)

min(x_dict)
max(x_dict)
241/389:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    x_dict = dict(zip(x,x_val))
    print(x_dict)
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
print(x_min)
241/390:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    x_dict = dict(zip(x,x_val))
    print(x_dict)
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
print(x_min)
241/391:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    x_dict = dict(zip(x,x_val))
    print(x_dict)
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
print(gpr_or)
241/392:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    x_dict = dict(zip(x,x_val))
    print(x_dict)
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
print(gpr_and)
241/393:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    x_dict = dict(zip(x,x_val))
    print(x_dict)
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    print(x)
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
print(gpr_and)
241/394:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    print(x_val)
    x_dict = dict(zip(x,x_val))
    print(x_dict)
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
print(x_min)
241/395:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    print(x_dict)
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

gpr_genes
gpr_and

# 2974.1
df
x_min
print(x_min)
241/396:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min (and)
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min

# sum (or)
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
241/397:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    print(x)
x_min

# sum (or)
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
241/398:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    x_min_genes.append(x)
x_min

# sum (or)
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
241/399:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    x_min_genes.append(x)
x_min

# sum (or)
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
x_min_genes
241/400:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min

# sum (or)
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
x_min_genes
241/401:
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr_or = [x for x in gpr.replace('(',')').split(')') if 'or' in x ]
gpr_or

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min

# sum (or)
x_min = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
set(x_min_genes)
241/402:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []
gpr_and = [gpr_and for gpr_and in gpr_genes if gpr_and not in gpr_min_genes]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min
241/403:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes if gpr_and not in gpr_min_genes]
241/404:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes if gpr_and not in x_min_genes]
241/405:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes if gpr_and not in x_min_genes]

gpr_and
241/406:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes]

gpr_and
241/407:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes]

gpr_genes
241/408:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes]

gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
241/409:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes]

gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes
241/410:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes]

gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes
x_min_genes
241/411:
condition = conditions[0] +'_pct*kcat'
exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# min (and)
x_min = []
x_min_genes = []
gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
    [x_min_genes.append(xi) for xi in x]
x_min_genes = set(x_min_genes)

# sum (or)
x_sum = []

for x in gpr_and:
    x = x.replace('and','').split()
    x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
    x_dict = dict(zip(x,x_val))
    x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
x_min


gpr_and = [gpr_and for gpr_and in gpr_genes]

gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print(gpr_genes)
print(x_min_genes)
241/412:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

print([g for g in gpr_genes if float(g) in exp_data_dict.keys()])
print(gpr_genes)

min(x_dict)
max(x_dict)
241/413:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_split = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
241/414:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_split = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_split
241/415:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_split
241/416:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules
241/417:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_genes.split()
241/418:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_genes
241/419:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr.split()
241/420:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [rules for rules in gpr.split() if 'and' or if 'or']
241/421:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [rules for rules in gpr.split() if 'and' and if 'or']
241/422:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [rules for rules in gpr.split() if in 'and' or if in 'or']
241/423:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [rules for rules in gpr.split() if is 'and' or if is 'or']
241/424:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [rules for rules in gpr.split() if is 'and']
241/425:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes == 'and
241/426:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes == 'and'
241/427:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes[1'] == 'and'
241/428:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes[1] == 'and'
241/429:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes[1] is 'and'
241/430:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [x in gpr.split()]
241/431:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [x in gpr.split()]
gpr_rules
241/432:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [x in gpr.split()]
gpr_rules
241/433:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [x for x in gpr.split()]
gpr_rules
241/434:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [x for x in gpr.split() if x == 'and']
gpr_rules
241/435:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [x for x in gpr.split() if x == 'and' or if x == 'or']
gpr_rules
241/436:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_rules = [x for x in gpr.split() if x == 'and' or x == 'or']
gpr_rules
241/437:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = [x for x in gpr.split() if x == 'and' or x == 'or']
print(gpr_rules)
241/438:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = [x for x in gpr.split() if x == 'and' or x == 'or']
print(gpr_rules)
print(gpr_genes)
241/439:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = [x for x in gpr.split() if x == 'and' or x == 'or']
print(gpr_rules)
print(gpr_genes)

len(gpr_rules)
241/440:
gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
gpr_rules = [x for x in gpr.split() if x == 'and' or x == 'or']
print(gpr_rules)
print(gpr_genes)

len(gpr_genes)
246/1: S = Matrix([[-1, 2, -1, -1, 0],[-2, 2, -1, 1, -1],[1, -1, 0, -1, 0][0, -1, 2, 3, 1]])
246/2:
# Sympy is a library in python for 
# symbolic Mathematics
from sympy import Matrix
S = Matrix([[-1, 2, -1, -1, 0],[-2, 2, -1, 1, -1],[1, -1, 0, -1, 0][0, -1, 2, 3, 1]])
246/3:
# Sympy is a library in python for 
# symbolic Mathematics
from sympy import Matrix
S = Matrix([[-1, 2, -1, -1, 0],[-2, 2, -1, 1, -1],[1, -1, 0, -1, 0],[0, -1, 2, 3, 1]])
246/4:
# Sympy is a library in python for 
# symbolic Mathematics
from sympy import Matrix
S = Matrix([[-1, 2, -1, -1, 0],[-2, 2, -1, 1, -1],[1, -1, 0, -1, 0],[0, -1, 2, 3, 1]])
S
246/5:
# Null Space of A
NullSpace = S.nullspace()   # Here NullSpace is a list
246/6:
# Null Space of A
NullSpace = S.nullspace()   # Here NullSpace is a list
NullSpace
246/7:
# Null Space of A
NullSpace = S.nullspace()   # Here NullSpace is a list
print("Null Space : ", NullSpace)
  
# checking whether NullSpace satisfies the
# given condition or not as A * NullSpace = 0
# if NullSpace is null space of A
print(A * NullSpace)
246/8:
# Null Space of A
NullSpace = S.nullspace()   # Here NullSpace is a list
print("Null Space : ", NullSpace)
  
# checking whether NullSpace satisfies the
# given condition or not as A * NullSpace = 0
# if NullSpace is null space of A
print(S * NullSpace)
252/1:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
252/2:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
252/3:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
253/1:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
253/2:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
253/3:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
253/4:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
253/5:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
253/6:
# map expression to reaction
#gpr = model.reactions.get_by_id(reaction.id).gene_reaction_rule
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict = dict(zip(df.Recon3D301, df.gene))
253/7:
# gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
# gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
# gpr_rules = [x for x in gpr.split() if x == 'and' or x == 'or']
# print(gpr_rules)
# print(gpr_genes)

# len(gpr_genes)

# for i in range(len(gpr_rules)):
#     while gpr_rules[i] == 'and'
#     min_g = sum_g
253/8:
# condition = conditions[0] +'_pct*kcat'
# exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
# gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
# gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# # min (and)
# x_min = []
# x_min_genes = []
# gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
# for x in gpr_and:
#     x = x.replace('and','').split()
#     x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
#     x_dict = dict(zip(x,x_val))
#     x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
#     [x_min_genes.append(xi) for xi in x]
# x_min_genes = set(x_min_genes)

# # sum (or)
# x_sum = []

# for x in gpr_and:
#     x = x.replace('and','').split()
#     x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
#     x_dict = dict(zip(x,x_val))
#     x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
# x_min


# gpr_and = [gpr_and for gpr_and in gpr_genes]

# gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
# gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# print(gpr_genes)
# print(x_min_genes)
253/9:

# condition = conditions[0] +'_pct*kcat'
# exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))


# def gpr_minsum(gpr,gene_expr_dict):
#     # min
#     x_min = []
#     gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
#     for x in gpr_and:
#         x = x.replace('and','').split()
#         x_val = [exp_data_dict[float(xi)] for xi in x]
#         x_dict = dict(zip(x,x_val))
#         x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
#     x_min

#     # sum 
#     gpr_or = [x for x in gpr2 if 'or' in x]
253/10:
# gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

# GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
# gpr_split = gpr.replace('(','').replace(')','').split()

# #gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
# expression = ast.parse(gpr, mode  ="eval")
# condition = conditions[0] +'_pct*kcat'

# exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
# exp_data_dict

# ast_analysis(expression, exp_data_dict)

# # value = ast_analysis(expression, exp_data_dict)
# # bound_vals[reaction.id] = value

# isinstance(expression, ast.Expression)
# ast_analysis(expression.body,exp_data_dict)
# exp_data_dict
# (expression.body.values[2].values[0].value)

# cobra.core.gene.parse_gpr(gpr)

# # if isinstance(gpr, 'and'):
# #     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

# gpr
253/11:
# import ast
# from ast import parse as ast_parse
# from ast import (And, BitAnd, BitOr, BoolOp, Expr, Name, NodeTransformer, Or)

# def get_value(dictionary: dict, name: str) -> float:
#     return dictionary[name]

# def ast_analysis(exp: ast.AST, dictionary: dict) -> float:
#     value: float = 0.0

#     # Analyse expression
#     if isinstance(exp, ast.Expression):
#         value = ast_analysis(exp.body, dictionary)

#     # and/or
#     elif isinstance(exp, ast.BoolOp):

#         # get values according to operation. It will call itself recursively

#         if isinstance(exp.op, ast.Or):
#             temp_or = []
#             for item in exp.values:
#                 try:
#                     temp_or.append(ast_analysis(item, dictionary))
#                     value = sum(filter(None, temp_or))
#                 except ValueError:
#                     continue

#         elif isinstance(exp.op, ast.And):
#             temp_and = []
#             for item in exp.values:
#                 try:
#                     temp_and.append(ast_analysis(item, dictionary))
#                     value = min(filter(None, temp_and))
#                 except ValueError:
#                     continue

#         else:
#             raise Exception(
#                 f"Expression: {exp} cannot be interpreted.\n{ast.dump(exp)}"
#             )

#     # get the value
#     elif isinstance(exp, ast.Constant):
#         pass
#     elif isinstance(exp, ast.Name):

#         # Expression ends up here and will either go back in the recursion or
#         # ends here.

#         # Replace with function
#         if exp.id in dictionary:
#             value = get_value(dictionary, exp.id)
#         elif exp.id not in dictionary:
#             value = None

#     else:
#         raise Exception(
#             f"Expression: {exp} is not an BoolOp or Name.\n{ast.dump(exp)}"
#         )

#     return value
253/12:
# def e_flux(model, expression_data, condition):
# # '''
# # The function returns the context-specific version of the model passed as an argument.

# # parameters
# # ----------
# # model: a metabolic model
# # expression_data: the expression data in the type of a data frame 
# # *** the gene names must be in the first column in the excel file ***
# # condition: the condition of interest (here time-points) in the form of string
# # '''

# # Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition
#     exp_data_dict = dict()
#     for name, value in zip(expression_data.iloc[:, 0], expression_data[condition]):
#         exp_data_dict[name] = value

#     bound_vals = {reaction.id: 0 for reaction in model.reactions}

#     for reaction in model.reactions:
#         gpr = model.reactions.get_by_id(reaction.id).gene_reaction_rule
#         if gpr != '':

#             try:
#                 expression = ast.parse(gpr, mode="eval")
#                 value = ast_analysis(expression, exp_data_dict)
#                 bound_vals[reaction.id] = value

#             except KeyError:
#                 return gpr

#     # Filtering the None values pertaining to reactions with no equivalent in the expression data
#     filtered_bound_vals = {k: v for k,
#                            v in bound_vals.items() if v is not None}

#     # Getting the maximum value for data normalization
#     max_val = max(filtered_bound_vals.values())

#     # Modifying the bounds and calculating the growth
#     for reaction, value, key in zip(model.reactions, bound_vals.values(), bound_vals):
#         rxn_id = reaction.id

#         if rxn_id == key:
#             if value != 0 and value != None:
#                 # normalizing the values to 1000 (model bounds)
#                 normalized_val = (value/max_val)*1000

#                 if reaction.lower_bound == 0.0 and reaction.upper_bound == 0:
#                     continue

#                 elif reaction.lower_bound == 0.0:
#                     reaction.upper_bound = normalized_val

#                 elif reaction.upper_bound == 0.0:
#                     reaction.lower_bound = - normalized_val
#                 else:
#                     reaction.bounds = -(normalized_val, normalized_val)

#     return model
253/13:
# gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
# #gprs = gprs.replace('(','split').replace(')','split')
# #gprs = gprs.split('split')

# gprs = gprs.replace('(','').replace(')','')
# gprs = gprs.split('or')


# for gpr in gprs:
#     if 'and' not in gpr:
#         sum_g.append(df['gene'][df['Recon3D301'] == float(gpr)])
#     if 'and' in gpr:
#         min_g = []
#         for g in gpr.replace('and','').split():
#             []
#             min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#         sum_g.append(min(min_g))
# minsum = sum(sum_g)*1000
# minsum

# gprs
253/14:
# gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
# #gprs = gprs.replace('(','split').replace(')','split')
# #gprs = gprs.split('split')

# gprs = gprs.replace('(','').replace(')','')
# gprs = gprs.split('or')


# sum_g = []
# for gpr in gprs:
#     if 'and' not in gpr:
#         sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#     if 'and' in gpr:
#         min_g = []
#         for g in gpr.replace('and','').split():
#             min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#         sum_g.append(min(min_g))
# minsum = sum(sum_g)*1000
# minsum

# gprs
253/15:
# # create a copy of the DMEM model for each condition
# model_names = {}
# for i in range(len(conditions[0])): # select column names that contain numbers
#     model_temp = model_DMEM.copy()
#     con = conditions[i]
#     for rxn in model.reactions:
#         if rxn.gene_reaction_rule is not '':
#             sum_g = []
#             for gpr in gprs:
#                 if 'and' not in gpr:
#                     sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#                 if 'and' in gpr:
#                     min_g = []
#                     for g in gpr.replace('and','').split():
#                         min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                     sum_g.append(min(min_g))
#             minsum = sum(sum_g)*1000
#     print(rxn.bounds)            
#     model_names['model_' + con] = model_temp # name model
#     locals().update(model_names)
253/16:
# # map expression to reaction 

# # load Recon3D gene IDs to match them to gene names in the dataset
# genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# # select cols from sysROT
# cols = [col for col in sysROT.columns if '_pct*kcat' in col]
# cols.insert(0, 'gene')
# df = sysROT[cols]

# # create a copy of the DMEM model for each condition
# model_names = {}
# for i in range(len(conditions)): # select column names that contain numbers
#     model_temp = model_DMEM.copy()
#     con = conditions[i]
#     for rxn in model.reactions:
#         if rxn.gene_reaction_rule is not '':
#             sum_g = []
#             for gpr in gprs:
#                 if 'and' not in gpr:
#                     sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#                 if 'and' in gpr:
#                     min_g = []
#                     for g in gpr.replace('and','').split():
#                         min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                     sum_g.append(min(min_g))
#             minsum = sum(sum_g)*1000
#     print(rxn.bounds)            
#     model_names['model_' + con] = model_temp # name model
#     locals().update(model_names)
253/17:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
253/18:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
253/19:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
fba(model_closed)
253/20:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize().objective_value
253/21:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
253/22:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
summary(model)
255/1: Reaction()
255/2: Reaction('rxn1')
255/3: reaction = Reaction('rxn1')
255/4:
from cobra import Model, Reaction, Metabolite
reaction = Reaction('rxn1')
255/5:
from cobra import Model, Reaction, Metabolite

model = Model('Beard2002')

reaction = Reaction('rxn1')
reaction.name = 'rxn1'
reaction.subsystem = 'c'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default

create_reaction('rxn1','rxn1','c',-1,1)

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound.  
    reaction.upper_bound = upper_bound.  
    return: reaction
255/6:
from cobra import Model, Reaction, Metabolite

model = Model('Beard2002')

reaction = Reaction('rxn1')
reaction.name = 'rxn1'
reaction.subsystem = 'c'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default

create_reaction('rxn1','rxn1','c',-1,1)

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return: reaction
255/7:
from cobra import Model, Reaction, Metabolite

model = Model('Beard2002')

reaction = Reaction('rxn1')
reaction.name = 'rxn1'
reaction.subsystem = 'c'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default

create_reaction('rxn1','rxn1','c',-1,1)

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction
255/8:
from cobra import Model, Reaction, Metabolite

model = Model('Beard2002')

reaction = Reaction('rxn1')
reaction.name = 'rxn1'
reaction.subsystem = 'c'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default

create_reaction('rxn1','rxn1','c',-1,1)

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction
255/9:
from cobra import Model, Reaction, Metabolite

model = Model('Beard2002')

reaction = Reaction('rxn1')
reaction.name = 'rxn1'
reaction.subsystem = 'c'
reaction.lower_bound = 0.  # This is the default
reaction.upper_bound = 1000.  # This is the default


def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

create_reaction('rxn1','rxn1','c',-1,1)
255/10:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
255/11:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
model
255/12:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
model = create_reaction('rxn1','rxn1','c',-1,1)
255/13:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
model = create_reaction('rxn1','rxn1','c',-1,1)
model
255/14:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
model
255/15:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
model.reaction
255/16:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
model.reactions
255/17:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
model.reactions = create_reaction('rxn1','rxn1','c',-1,1)
255/18:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
model.reactions = create_reaction('rxn1','rxn1','c',-1,1)
model
255/19:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
model.add_reactions([reaction])
255/20:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
model.add_reactions([reaction])
model
255/21:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
model.add_reactions([reaction])
model.reactions
255/22:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
model.add_reactions([reaction])
model.reactions[0]
255/23:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
create_reaction('rxn2','rxn2','c',-1,1)
model.add_reactions([reaction])
model.reactions[0]
255/24:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
create_reaction('rxn2','rxn2','c',-1,1)
model.add_reactions([reaction])
model.reactions
255/25:
from cobra import Model, Reaction, Metabolite



def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
create_reaction('rxn1','rxn1','c',-1,1)
create_reaction('rxn2','rxn2','c',-1,1)
model.add_reactions([reaction])
model.reactions
255/26:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
model.add_reactions([rxn1 rxn2])
model.reactions
255/27:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
model.add_reactions([rxn1, rxn2])
model.reactions
255/28:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
model.add_reactions([rxn1, rxn2])
model.reactions
255/29:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model.reactions
255/30:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = 'c'
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model.reactions[0]
255/31:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = ''
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name,formula,compartment):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment)
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')

A
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
255/32:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = ''
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name,formula,compartment):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment)
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')


model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
255/33:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = ''
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name,formula,compartment):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')


model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
255/34:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = ''
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name,formula='',compartment):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
255/35:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = ''
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name,formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
255/36:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = ''
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name,formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

model
255/37:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name,subsystem,lower_bound,upper_bound):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = ''
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name,formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

A
255/38:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem = ''
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

A
255/39:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')
rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

A
255/40:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2 C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1 C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1 C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1 C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

A
255/41:
from cobra import Model, Reaction, Metabolite

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

A
255/42:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

A
255/43:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

A
259/1:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

A
259/2:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])
259/3:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model
259/4:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions(A)
259/5:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions[A]
259/6:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions['A']
259/7:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions[A]
259/8:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])
259/9:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions[1]
259/10:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions.rxn2
259/11:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions.A
259/12:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions.EX_A
259/13:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions.EX_A.lower_bound
259/14:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions.EX_A.lower_bound = 1
259/15:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions.EX_A.lower_bound = 1
model.reactions.EX_A
259/16:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})

model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.reactions.EX_A.lower_bound = -1
model.reactions.EX_A
259/17: model.reactions.EX_A.lower_bound
259/18:
model.reactions.EX_A
model.reactions.EX_A.lower_bound
259/19: model.reactions.EX_A
259/20:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
259/21:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
259/22: model.reactions.EX_A
259/23:
model.reactions.EX_A.lower_bound = -1
A = model.optimize()
model.reactions.EX_A.lower_bound = 0

model.reactions.EX_B.lower_bound = -1
A = model.optimize()
model.reactions.EX_B.lower_bound = 0
259/24:
model.reactions.EX_A.lower_bound = -1
A = model.optimize()
model.reactions.EX_A.lower_bound = 0

model.reactions.EX_B.lower_bound = -1
B = model.optimize()
model.reactions.EX_B.lower_bound = 0

B
259/25:
model.reactions.EX_A.lower_bound = -1
A = model.optimize()
model.reactions.EX_A.lower_bound = 0

model.reactions.EX_B.lower_bound = -1
B = model.optimize()
model.reactions.EX_B.lower_bound = 0

A
259/26:
model.reactions.EX_A.lower_bound = -1
A = model.optimize()
model.reactions.EX_A.lower_bound = 0

model.reactions.EX_B.lower_bound = -1
B = model.optimize()
model.reactions.EX_B.lower_bound = 0

model.reactions.EX_C.lower_bound = -1
C = model.optimize()
model.reactions.EX_C.lower_bound = 0
259/27:
model.reactions.EX_A.lower_bound = -1
A = model.optimize()
model.reactions.EX_A.lower_bound = 0

model.reactions.EX_B.lower_bound = -1
B = model.optimize()
model.reactions.EX_B.lower_bound = 0

model.reactions.EX_C.lower_bound = -1
C = model.optimize()
model.reactions.EX_C.lower_bound = 0

A
259/28: B
259/29: C
260/1:
def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
260/2:
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
model.reactions.EX_A.lower_bound = 0

model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
model.reactions.EX_B.lower_bound = 0

model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
model.reactions.EX_C.lower_bound = 0
260/3: A
260/4: FBA_C
260/5: FBA_D
260/6: FBA_A
261/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
261/2:
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
model.reactions.EX_A.lower_bound = 0
FBA_A
261/3:
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
model.reactions.EX_B.lower_bound = 0

model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
model.reactions.EX_C.lower_bound = 0
261/4:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,0)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,0)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
261/5:
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
model.reactions.EX_A.lower_bound = 0
FBA_A
261/6:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,0)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
261/7:
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
model.reactions.EX_A.lower_bound = 0
FBA_A
261/8:
model.solver = 'glpk'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
model.reactions.EX_A.lower_bound = 0
FBA_A
261/9:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
model.reactions.EX_A.lower_bound = 0
FBA_A
261/10:
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
model.reactions.EX_C.lower_bound = 0
261/11:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
262/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,0)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
262/2:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
262/3:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
262/4:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
262/5:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
263/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,0)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
263/2:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
263/3:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
263/4:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
263/5:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
264/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','A',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
264/2:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
264/3:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
264/4:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
264/5: model.reactions.C
264/6: model.reactions.EX_C
264/7: model.reactions.EX_B
264/8: model.reactions.EX_A
264/9: model.reactions.EX_B
264/10: model.reactions.EX_C
264/11: model.reactions.EX_A
264/12: model.reactions.EX_B
264/13: model.reactions.rxn1
264/14:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
265/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:-2, B:-2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
265/2:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
265/3:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
265/4: model.reactions.rxn1
265/5: model.reactions.rxn2
265/6: model.reactions.rxn4
265/7: model.reactions.rxn3
265/8: model.reactions.rxn2
266/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
266/2:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
266/3:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
266/4: model.reactions.rxn2
266/5: model.reactions.rxn2
266/6: model.reactions.rxn1
266/7: model.reactions.rxn2
266/8: model.reactions.rxn3
266/9: model.reactions.rxn4
266/10: model.reactions.rxn5
266/11: model.reactions.EX_A
266/12: model.reactions.EX_B
266/13: model.reactions.EX_C
266/14: model.reactions.EX_D
266/15:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
model.summary()
266/16:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
266/17:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
model.summary()
266/18:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
model.summary()
267/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
267/2:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
267/3:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
267/4:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
267/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
267/6:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
267/7:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
pFBA_B = cobra.flux_analysis.pfba(model)
pFBA_B
268/1:
# Create model
import cobra

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
268/2:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
268/3:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
pFBA_B = cobra.flux_analysis.pfba(model)
pFBA_B
268/4:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
268/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
pFBA_B = cobra.flux_analysis.pfba(model)
FBA_B
268/6:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
268/7: model
268/8: model.reactions[0]
268/9: model.reactions[1]
268/10: model.reactions[5]
268/11: model.reactions[8]
268/12:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
274/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
274/2: model.reactions[8]
274/3:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
274/4:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
pFBA_solution = cobra.flux_analysis.pfba(model)
FBA_B
275/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
275/2: model.reactions[8]
275/3:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
275/4:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
pFBA_solution = cobra.flux_analysis.pfba(model)
FBA_B
275/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
275/6:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
275/7: model.reactions[7]
275/8: model
275/9: cobra.util.array.create_stoichiometric_matrix(model)
275/10:
import cobra
cobra.util.array.create_stoichiometric_matrix(model)
275/11:
import cobra
cobra.util.array.create_stoichiometric_matrix(model)
cobra.util.array.nullspace(model)
275/12:
import cobra
cobra.util.array.create_stoichiometric_matrix(model)
cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model))
275/13:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model))
275/14:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
275/15:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
S = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)
275/16:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
S = matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)
275/17:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)
275/18:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

S.nullspace()
275/19:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

full(S.nullspace())
275/20:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

S.nullspace()
275/21:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

dir(S)
275/22:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

import numpy
linalg.svd(S)
275/23:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

import linalg from numpy
linalg.svd(S)
275/24:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

from numpy import linalg 
linalg.svd(S)
275/25:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

from numpy as np
np.linalg.svd(S)
275/26:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

s.nullspace()_
275/27:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)

S.nullspace()
275/28:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)
S.nullspace(rcond=None)
275/29:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)
S.nullspace()
scipy.linalg.null_space(S, rcond=None)
275/30:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)
S.nullspace()
import scipy
scipy.linalg.null_space(S, rcond=None)
275/31:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
type(S)
S.nullspace()
import scipy
scipy.linalg.null_space(cobra.util.array.create_stoichiometric_matrix(model), rcond=None)
275/32:
model.solver = 'gurobi'

model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
275/33:
model.solver = 'gurobi'
model.reactions.EX_A.upper_bound = 1
FBA_A = model.optimize()
FBA_A
275/34: model
275/35: model.reactions
275/36: model.reactions[0].bounds
275/37: model.reactions[6].bounds
275/38:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
275/39: model.reactions
275/40: [rxn.bounds for rxn in model.reactions]
275/41:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
275/42: [rxn.bounds for rxn in model.reactions]
275/43:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
275/44:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
[{rxn.name:rxn.bounds} for rxn in model.reactions]
FBA_A
275/45:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
print([{rxn.name:rxn.bounds} for rxn in model.reactions])
FBA_A
275/46:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
print(list([{rxn.name:rxn.bounds} for rxn in model.reactions]))
FBA_A
275/47:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
print(list(zip(([{rxn.name:rxn.bounds} for rxn in model.reactions])))
FBA_A
275/48:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
print(list(zip(([{rxn.name:rxn.bounds} for rxn in model.reactions])))
FBA_A
275/49:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
print(list(zip([{rxn.name:rxn.bounds} for rxn in model.reactions])))
FBA_A
275/50:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
print([{rxn.name:rxn.bounds} for rxn in model.reactions])
FBA_A
275/51:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
275/52:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
275/53: FBA_C.summary()
275/54: dir(FBA_C)
275/55: FBA_C.fluxes
275/56: FBA_A.fluxes
275/57:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()

model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])

model.objective = 'EX_D'
275/58:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()
275/59:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
275/60:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
275/61:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})

model
275/62:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

model
275/63:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
model
275/64:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

model
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()
275/65:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

model
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()

from scipy.linalg import null_space
A = cobra.util.array.create_stoichiometric_matrix(model)
ns = null_space(A)
ns * np.sign(ns[0,0])
275/66:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

model
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()

from scipy.linalg import null_space
import numpy as np
A = cobra.util.array.create_stoichiometric_matrix(model)
ns = null_space(A)
ns * np.sign(ns[0,0])
275/67:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

model
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
print(S.nullspace())

from scipy.linalg import null_space
import numpy as np
A = cobra.util.array.create_stoichiometric_matrix(model)
ns = null_space(A)
ns * np.sign(ns[0,0])
275/68:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
275/69:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))

Matrix(cobra.util.array.create_stoichiometric_matrix(model))
275/70:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))

Matrix(cobra.util.array.create_stoichiometric_matrix(model)).nulspace()
275/71:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
S
275/72:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
S.nulspace()_
275/73:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))

S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
S.nulspace()
275/74:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
S.nulspace()
275/75:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace())
275/76:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()
275/77:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()
275/78:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace(
275/79:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()
275/80:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
275/81:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
model
275/82:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
275/83:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
from sympy import Matrix
S = Matrix(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
# the null space
S.nullspace()
275/84:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
275/85:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
model
275/86:
import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
279/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
print(cobra.util.array.create_stoichiometric_matrix(model))
# the null space
print(cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model)))
279/2:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
cobra.util.array.create_stoichiometric_matrix(model)
# the null space
cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model))
279/3:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_null = cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model))
279/4:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
cobra.util.array.create_stoichiometric_matrix(model)
279/5:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
print([{rxn.name:rxn.bounds} for rxn in model.reactions])
279/6:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
print([{rxn.name:rxn.bounds} for rxn in model.reactions])
FBA_A
279/7:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
279/8:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
model.summary()
279/9:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
279/10:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize(reduced_costs=none)
FBA_A
279/11:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize(reduced_costs='none')
FBA_A
279/12:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize(reduced_costs='None')
FBA_A
279/13:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
279/14:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_C = model.optimize()
FBA_C
279/15:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = -1
FBA_test = model.optimize()
FBA_test
279/16:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_test = model.optimize()
FBA_test
279/17:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
279/18: FBA_test
279/19: dir(FBA_test)
279/20: FBA_test.fluxes
279/21: FBA_test.fluxes*S
279/22: FBA_test.fluxes'*S
279/23: FBA_test.fluxes
279/24:
FBA_test.fluxes
S
279/25:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
279/26:
FBA_test.fluxes
S
279/27:
print(type(FBA_test.fluxes))
type(S)
279/28: FBA_test['x'].values
279/29: FBA_test.values
279/30: FBA_test
279/31: FBA_test.fluxes
279/32: FBA_test.fluxes[1]
279/33: FBA_test.fluxes
279/34: FBA_test.fluxes*3
279/35: FBA_test.fluxes
279/36: FBA_test.fluxes*3
279/37: FBA_test.fluxes*S
279/38: FBA_test.fluxes*S'
279/39: FBA_test.fluxes*S
279/40: FBA_test.fluxes
279/41:
FBA_test.fluxes
S
279/42:
FBA_test.fluxes
Matrix(S)
279/43:
FBA_test.fluxes
np.multiply(2.0, 4.0)
279/44:
FBA_test.fluxes
import numpy as np
np.multiply(2.0, 4.0)
279/45:
FBA_test.fluxes
import numpy as np
np.multiply(FBA_test.fluxes, 4.0)
279/46:
FBA_test.fluxes
import numpy as np
np.multiply(S, 4.0)
279/47:
FBA_test.fluxes
import numpy as np
np.multiply(S,FBA_test.fluxes)
279/48:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
279/49:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
FBA_test.fluxes
279/50:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
FBA_test.fluxes.transpose()
279/51:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
FBA_test.fluxes
279/52:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
dir(FBA_test.fluxes)
279/53:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
dir(FBA_test.fluxes.values)
279/54:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
FBA_test.fluxes.values
279/55:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
np.multiply(FBA_test.fluxes.values,S)
279/56:
FBA_test.fluxes
import numpy as np
np.multiply(S,2)
np.multiply(FBA_test.fluxes.values,S)
279/57:
FBA_test.fluxes
import numpy as np
np.multiply(FBA_test.fluxes.values,S).transpose()
279/58:
FBA_test.fluxes
import numpy as np
np.multiply(FBA_test.fluxes.values,S).transpose().sum()
279/59:
FBA_test.fluxes
import numpy as np
np.multiply(FBA_test.fluxes.values,S).transpose().sum
279/60:
FBA_test.fluxes
import numpy as np
np.multiply(FBA_test.fluxes.values,S).transpose()
279/61:
FBA_test.fluxes
import numpy as np
type(np.multiply(FBA_test.fluxes.values,S).transpose())
279/62:
FBA_test.fluxes
import numpy as np
type(np.multiply(FBA_test.fluxes.values,S).sum(axis=0))
279/63:
FBA_test.fluxes
import numpy as np
(np.multiply(FBA_test.fluxes.values,S).sum(axis=0))
279/64:
FBA_test.fluxes
import numpy as np
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))
279/65: S_null
279/66: S_null'
279/67: S_null.transpose()
279/68: S_null
281/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_null = cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model))
281/2: S_null
281/3:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
281/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
281/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
281/6:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
281/7:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
281/8:
import numpy as np
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))
281/9:
S_null
S
282/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(cobra.util.array.create_stoichiometric_matrix(model))
282/2: S_in
282/3:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
282/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
282/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
282/6:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
282/7:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
282/8:
import numpy as np
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))
282/9:
S_in
S_in_nul
282/10:
S_in
S_in_null
282/11:
S_in
S_in_null
import numpy as np
(np.multiply(S_in_null,S_in).sum(axis=1))
282/12:
S_in
S_in_null
import numpy as np
(np.multiply(S_in,S_in).sum(axis=1))
282/13:
S_in
S_in_null
import numpy as np
(np.multiply(S_in,S_in_null).sum(axis=1))
282/14:
S_in
S_in_null
import numpy as np
(np.multiply(S_in).sum(axis=1))
282/15:
S_in
S_in_null
282/16:
print(S_in)
print(S_in_null)
282/17:
print(S_in)
print(S_in_null.transpose())
282/18:
print(S_in)
print(S_in_null.transpose())
import numpy as np
(np.multiply((S_in_null.transpose()),S).sum(axis=1))
282/19:
print(S_in)
print(S_in_null.transpose())
import numpy as np
(np.multiply(S,(S_in_null.transpose())).sum(axis=1))
282/20:
print(S_in)
print(S_in_null.transpose())
import numpy as np
ptint(np.multiply(S,(S_in_null.transpose())).sum(axis=1))
282/21:
print(S_in)
print(S_in_null.transpose())
import numpy as np
ptint(np.multiply((S_in_null.transpose()),S).sum(axis=1))
282/22:
print(S_in)
print(S_in_null.transpose())
import numpy as np
print(np.multiply((S_in_null.transpose()),S).sum(axis=1))
282/23:
print(S_in)
print(S_in_null.transpose())
import numpy as np
print(np.multiply(S,(S_in_null.transpose())).sum(axis=1))
282/24:
print(S_in)
print(S_in_null.transpose())
import numpy as np
print(np.multiply(S,(S_in_null.transpose())))
282/25:
print(S_in)
print(S_in_null.transpose())
import numpy as np
print(np.multiply(S_in,S_in_null.transpose()))
282/26:
print(S_in)
print(S_in_null.transpose())
import numpy as np
print(np.multiply(S_in_null.transpose(),S_in))
282/27:
print(S_in)
print(S_in_null.transpose())
import numpy as np
np.multiply(S_in_null.transpose(),S_in)
282/28:
print(S_in)
print(S_in_null.transpose())
import numpy as np
S_in
282/29:
print(S_in)
print(S_in_null)
import numpy as np
S_in
282/30:
print(S_in)
print(S_in_null)
import numpy as np
(np.multiply(S_in,S_in_null).sum(axis=1))
282/31:
print(S_in)
print(S_in_null)
import numpy as np
(np.multiply(S_in,S_in_null))
282/32:
print(S_in)
print(S_in_null)
import numpy as np
np.multiply(S_in,S_in_null)
282/33:
print(S_in)
print(S_in_null)
import numpy as np
np.multiply(S_in_null,S_in)
282/34:
print(S_in)
print(S_in_null)
import numpy as np
np.multiply(S_in,S_in_null)
282/35:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
type(S_in)
282/36:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
type(S_in)
S_in*S_in_null
282/37:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
type(S_in)
S_in_null*S_in
282/38:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
type(S_in)
np.dot(S_in_null,S_in)
282/39:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
type(S_in)
np.dot(S_in,S_in_null)
282/40:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
282/41:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
type(S_in)
np.dot(S_in,S_in_null)
282/42:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
np.linalg.svd(S_in)
282/43:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
print(np.linalg.svd(S_in))

import scipy
scipy.linalg.svd(S_in)
282/44:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
(np.linalg.svd(S_in))

import scipy
scipy.linalg.svd(S_in)
282/45:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
£(np.linalg.svd(S_in))

import scipy
scipy.linalg.svd(S_in)
282/46:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))

import scipy
scipy.linalg.svd(S_in)
282/47:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))

import scipy
scipy.linalg.svd(S_in)
(np.linalg.svd(S_in)
282/48:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))

import scipy
scipy.linalg.svd(S_in)
np.linalg.svd(S_in)
282/49:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))

import scipy
scipy.linalg.svd(S_in)
282/50:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))
scipy.linalg.svd(S_in)
282/51:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))
Matrix(S_in)
282/52:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))
S_in.null_space
282/53:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))
scipy.linalg.null_space(S_in)
282/54:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
282/55:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in).transpose()
282/56:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
282/57:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)
#(np.linalg.svd(S_in))
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
282/58:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
283/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
283/2:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
283/3:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
284/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
284/2:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
type(S_in)
np.dot(S_in,S_in_null)
284/3:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
284/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
284/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
284/6:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
284/7:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
284/8:
import numpy as np
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))
284/9:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
284/10:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)

model.problem
284/11:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)

model.problem.Objective
284/12:

model.problem.Objective
296/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
296/2:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
296/3:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
296/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
296/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
296/6:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
296/7:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
296/8:
import numpy as np
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))
296/9: model.problem.Objective
296/10: dir(model.reactions)
296/11:  model.problem.Constraint
296/12:
 model.problem.Constraint
    same_flux = model.problem.Constraint(
    model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,
    lb=0,
    ub=0)
296/13:
 model.problem.Constraint
same_flux = model.problem.Constraint(
model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,
lb=0,ub=0)
296/14:
model.problem.Constraint
same_flux = model.problem.Constraint(
model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,
lb=0,ub=0)
296/15:
model.problem.Constraint
same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
296/16: model.reactions
296/17: model.flux
296/18: dir(model)
296/19:
model.problem.Constraint

model.reactions[0]
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
296/20:
model.problem.Constraint

model.reactions[0].flux_expression
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
296/21:
model.problem.Constraint

dir(model.reactions[0])
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
296/22:
model.problem.Constraint

dir(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
296/23:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
296/24:
%matplotlib inline
import plot_helper

plot_helper.plot_qp2()
296/25:

import plot_helper

plot_helper.plot_qp2()
296/26:
matplotlib inline
import plot_helper

plot_helper.plot_qp2()
296/27:
import matplotlib
%matplotlib inline
import plot_helper

plot_helper.plot_qp2()
302/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])

import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
302/2:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
302/3:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
302/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
302/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
302/6:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
302/7:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
302/8:
import numpy as np
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))
302/9: dir(model.reactions)
302/10: dir(model)
302/11:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
302/12:
import matplotlib
%matplotlib inline
import plot_helper

plot_helper.plot_qp2()
302/13:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model
302/14:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
302/15:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
null_space(S_in)
302/16:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
null_space(S_in).transpose()
302/17:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
null_space(null_space(S_in).transpose())
302/18:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
K = (null_space(S_in).transpose())
302/19:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
302/20:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
302/21:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
null_space(K)
302/22: solution = model.optimize()
302/23:
solution = model.optimize()
solution.fluxes
302/24: FBA_C.fluxes
302/25: FBA_C.fluxes[0]
302/26: FBA_C.fluxes[range(5)]
302/27: FBA_C.fluxes[range(5)].values
302/28:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4 = symbols('u1 u2 u3 u4')
A = Matrix([[x+x1, x+x2, x+x3]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
302/29:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4 = symbols('u1 u2 u3 u4')
A = Matrix([[u1+u2, u2+u3, u4+u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
302/30:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4 = symbols('u1 u2 u3 u4')
A = Matrix([[u1+u2, u2+u3, u4+u4]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
302/31:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4 = symbols('u1 u2 u3 u4')
A = Matrix([[u1+u2, u2+u3, u4+u4]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)
302/32: Transpose(A)
302/33:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
A = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)
302/34: Transpose(A)
302/35:
from sympy import symbols, Matrix, Transpose
symbols('a0:4')
A = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)
302/36:
from sympy import symbols, Matrix, Transpose

A = Matrix([[symbols('a0:4')]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)
302/37:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
A = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)
symbols('a0:4')
302/38:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
A = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)
symbols('a0:4')
symbols('u1 u2 u3 u4 u5')
302/39:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

u
302/40:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

u'
302/41:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)
302/42:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1 u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)
302/43:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)
302/44:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)*null_space(K)
302/45:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)*null_space(K) ==0
302/46:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)*null_space(K)
302/47: sym.solveset(Transpose(u)*null_space(K))
302/48: sym.solveset(Transpose(u)*null_space(K),('u1 u2 u3 u4 u5'))
302/49: sym.solveset(Transpose(u)*null_space(K),u1 u2 u3 u4 u5)
302/50: sym.solveset(Transpose(u)*null_space(K),u1, u2, u3, u4, u5)
302/51: sym.solveset(Transpose(u)*null_space(K),(u1, u2, u3, u4, u5))
302/52: sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y)))
302/53: sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))
302/54:
from sympy import symbols, Matrix, Transpose
x, x1, x2, x3 = symbols('x x1 x2 x3')
A = Matrix([[x+x1, x+x2, x+x3]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))
302/55:
import sympy as sym
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))
302/56:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))
302/57:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

sym.solve((Transpose(u)*null_space(K)), (u1, u2, u3, u4, u5))
302/58:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

sym.solve(Transpose(Transpose(u)*null_space(K)), (u1, u2, u3, u4, u5))
302/59:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

sym.solve(Transpose(Transpose(u)*null_space(K)), (u1))
302/60:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

sym.solve((Transpose(u)*null_space(K)), (u1))
302/61:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K
302/62:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K.QRsolve([0,0,0,0,0])
302/63:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

Matrix(K).QRsolve([0,0,0,0,0])
302/64:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

Matrix(K)
302/65:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)
L.QRsolve()
302/66:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)
K.QRsolve()
302/67:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)
a = np.array([[1, 2], [3, 5]])

b = np.array([1, 2])

x = np.linalg.solve(a, b)
302/68:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)
a = np.array([[1, 2], [3, 5]])

b = np.array([1, 2])

x = np.linalg.solve(a, b)
x
302/69:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)
a = np.array([[1, 2, 5], [3, 5, 7]])
b = np.array([1, 2])
x = np.linalg.solve(a, b)
x
302/70:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)
a = np.array([[1, 2], [5, 7],[1, 3]])
b = np.array([1, 2])
x = np.linalg.solve(a, b)
x
302/71:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)
a = np.array([[1, 2], [5, 7],[1, 3]])
b = np.array([1, 2])
x = np.linalg.solve(a, b)
K
302/72:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K
302/73:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K.nullspace()
302/74:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

u = K.nullspace()
302/75:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

u = K.nullspace()

u
305/1:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
305/2:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)*null_space(K)
305/3:
import cobra
# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

import numpy as np
import scipy
scipy.linalg.null_space(S_in)
from scipy.linalg import null_space
null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
null_space(K)
305/4:
from sympy import symbols, Matrix, Transpose
u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)*null_space(K)
308/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model
308/2:
print(S_in)
print(S_in_null)
import numpy as np
#np.multiply(S_in,S_in_null)
309/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model
309/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
309/3:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
309/4:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
309/5:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
309/6:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
309/7:
import numpy as np
import cobra
from scipy.linalg import null_space

(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))


S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
309/8:
import numpy as np
import cobra
from scipy.linalg import null_space



S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
309/9:
import numpy as np
import cobra
from scipy.linalg import null_space



S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))
309/10:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))



u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = A * Transpose(A)
# or B = A * A.T
print (B)
print(A)

Transpose(u)*null_space(K)
309/11:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))



u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = u * Transpose(u)
# or B = A * A.T
print (B)
print(u)

Transpose(u)*null_space(K)
309/12:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = u * Transpose(u)
# or B = A * A.T
print (B)
print(u)

Transpose(u)*null_space(K)
309/13:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = u * Transpose(u)
# or B = A * A.T
print (B)
print(u)

null_space(K)
309/14:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = u * Transpose(u)
# or B = A * A.T
print (B)
print(u)

K
309/15:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = u * Transpose(u)
# or B = A * A.T
print (B)
print(u)

S_in
310/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model
310/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
310/3:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
310/4:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
310/5:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
310/6:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
310/7:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = u * Transpose(u)
# or B = A * A.T
print (B)
print(u)

S_in
310/8:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
310/9:

# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)



scipy.linalg.null_space(S_in)

null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
null_space(K)
310/10:

# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
null_space(K)
310/11:

# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
null_space(K)

model_in
310/12:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = copy_model(model)
311/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
311/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
311/3:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
311/4:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
311/5:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
311/6:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
311/7:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
B = u * Transpose(u)
# or B = A * A.T
print (B)
print(u)

S_in
311/8:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
311/9:

# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
null_space(K)

model_in
311/10: FBA_C.fluxes[range(5)].values
311/11:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
311/12:

# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
null_space(K)

K
311/13:

# the stoichiometrix matrix (S)
S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
# the null space
S_in_null = cobra.util.array.nullspace(S_in)

null_space(S_in)
np.linalg.svd(S_in)
K = null_space(S_in).transpose()
K
null_space(K)

K*u
311/14:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])
311/15:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])

L
311/16:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])

K
311/17:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])

K
311/18:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])

K*u
311/19:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]])

u
311/20:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]]).transpose()

u
311/21:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1 u2 u3 u4 u5]]).transpose()

u
311/22:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1, u2, u3, u4, u5]]).transpose()

u
311/23:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]]).transpose()

u
311/24:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

u
311/25:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
311/26:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
modelS
311/27:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
full(model.S)
311/28:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
model.S
311/29:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
model
311/30:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
312/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
312/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
312/3:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
312/4:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
312/5:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
312/6:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
312/7:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
312/8:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
312/9: FBA_C.fluxes[range(5)].values
312/10:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
312/11: model
312/12: model.S
312/13: model
312/14:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S
312/15:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S_in
312/16: S
312/17: from cobra.flux_analysis import flux_variability_analysis
312/18:
from cobra.flux_analysis import flux_variability_analysis
flux_variability_analysis(model)
312/19:
model.solver = 'gurobi'
modelA = model.reactions.EX_A.lower_bound = -1
FBA_A = modelA.optimize()
FBA_A
312/20:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
313/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
313/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
313/3: model
313/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
313/5:
from cobra.flux_analysis import flux_variability_analysis
flux_variability_analysis(model)
313/6:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
313/7: flux_variability_analysis(model)
313/8:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
313/9: flux_variability_analysis(model)
313/10:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
313/11: flux_variability_analysis(model)
313/12:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S_in
313/13:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
313/14: FBA_C.fluxes[range(5)].values
313/15:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
313/16:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
model.reactions[0].lower_bound
313/17:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
[rxn.lower_bound for rxn in model.reactions]
314/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
314/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
314/3: model
314/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
[rxn.lower_bound for rxn in model.reactions]
314/5:
from cobra.flux_analysis import flux_variability_analysis
flux_variability_analysis(model)
314/6:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
314/7: flux_variability_analysis(model)
314/8:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
314/9: flux_variability_analysis(model)
315/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
315/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
315/3: model
315/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
print([rxn.lower_bound for rxn in model.reactions])
print([rxn.upper_bound for rxn in model.reactions])
315/5:
from cobra.flux_analysis import flux_variability_analysis
flux_variability_analysis(model)
315/6:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
315/7: flux_variability_analysis(model)
315/8:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
315/9: flux_variability_analysis(model)
315/10:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
315/11: flux_variability_analysis(model)
315/12:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S_in
315/13:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
315/14: FBA_C.fluxes[range(5)].values
315/15:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
316/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
316/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
316/3: model
316/4:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
print([rxn.lower_bound for rxn in model.reactions])
print([rxn.upper_bound for rxn in model.reactions])
model.reactions
316/5:
from cobra.flux_analysis import flux_variability_analysis
flux_variability_analysis(model)
316/6:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
316/7: flux_variability_analysis(model)
316/8:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
316/9: flux_variability_analysis(model)
316/10:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
316/11: flux_variability_analysis(model)
316/12:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S_in
316/13:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
316/14: FBA_C.fluxes[range(5)].values
316/15:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
317/1:
# set bounds of a single reaction: model.reactions.get_by_id(rxn_id).bounds = (lb,ub)
# set objective: model.objective = rxn_id # set objective
317/2:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
317/3:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
317/4:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
317/5:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
317/6:
# map expression to reaction
#gpr = model.reactions.get_by_id(reaction.id).gene_reaction_rule
# load Recon3D gene IDs to match them to gene names in the dataset
genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# create data frame with expression data for genes in Recon3D
cols = [col for col in sysROT.columns if '_pct*kcat' in col] # select condition column names
cols.insert(0, 'gene') # ad gene column names
df = pd.merge(genes,sysROT[cols], how = 'inner')
genes_dict = dict(zip(df.Recon3D301, df.gene))
317/7:
# gpr = '(2977.1 and 2983.1) or 4882.2 or (2982.1 and 2974.1) or 2986.1 or 4882.1 or 2984.1 or 4881.1 or (2977.1 and 2974.1) or 3000.1 or (2982.1 and 2983.1)'
# gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# gpr_genes = list((gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))
# gpr_rules = [x for x in gpr.split() if x == 'and' or x == 'or']
# print(gpr_rules)
# print(gpr_genes)

# len(gpr_genes)

# for i in range(len(gpr_rules)):
#     while gpr_rules[i] == 'and'
#     min_g = sum_g
317/8:
# condition = conditions[0] +'_pct*kcat'
# exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))          
              
# gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
# gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# # min (and)
# x_min = []
# x_min_genes = []
# gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
# for x in gpr_and:
#     x = x.replace('and','').split()
#     x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
#     x_dict = dict(zip(x,x_val))
#     x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
#     [x_min_genes.append(xi) for xi in x]
# x_min_genes = set(x_min_genes)

# # sum (or)
# x_sum = []

# for x in gpr_and:
#     x = x.replace('and','').split()
#     x_val = [exp_data_dict[float(xi)] for xi in x if float(xi) in exp_data_dict.keys()]
#     x_dict = dict(zip(x,x_val))
#     x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
# x_min


# gpr_and = [gpr_and for gpr_and in gpr_genes]

# gpr = '(3421.2 and 3420.3 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.1 and 3421.1 and 3419.1) or (3420.3 and 3421.1 and 3419.1) or (3421.1 and 3419.1 and 3420.2) or (3421.2 and 3419.1 and 3420.2)'
# gpr_genes = list(set(gpr.replace('(','').replace(')','').replace('and','').replace('or','').split()))

# print(gpr_genes)
# print(x_min_genes)
317/9:

# condition = conditions[0] +'_pct*kcat'
# exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))


# def gpr_minsum(gpr,gene_expr_dict):
#     # min
#     x_min = []
#     gpr_and = [x for x in gpr.replace('(',')').split(')') if 'and' in x ]
#     for x in gpr_and:
#         x = x.replace('and','').split()
#         x_val = [exp_data_dict[float(xi)] for xi in x]
#         x_dict = dict(zip(x,x_val))
#         x_min.append(min(x_dict, key=x_dict.get)) # get gene key corresponding to min expression value
#     x_min

#     # sum 
#     gpr_or = [x for x in gpr2 if 'or' in x]
317/10:
# gpr = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1 and 124.1)'

# GPR_genes = set(gpr.replace('or','').replace('and','').replace('(','').replace(')','').split())
# gpr_split = gpr.replace('(','').replace(')','').split()

# #gpr = model.reactions.get_by_id(model.reactions[12].id).gene_reaction_rule
# expression = ast.parse(gpr, mode  ="eval")
# condition = conditions[0] +'_pct*kcat'

# exp_data_dict = dict(list(zip(df['Recon3D301'], df[condition])))
# exp_data_dict

# ast_analysis(expression, exp_data_dict)

# # value = ast_analysis(expression, exp_data_dict)
# # bound_vals[reaction.id] = value

# isinstance(expression, ast.Expression)
# ast_analysis(expression.body,exp_data_dict)
# exp_data_dict
# (expression.body.values[2].values[0].value)

# cobra.core.gene.parse_gpr(gpr)

# # if isinstance(gpr, 'and'):
# #     return evaluate(expr.left, variables)*evaluate(expr.right, variables)

# gpr
317/11:
# import ast
# from ast import parse as ast_parse
# from ast import (And, BitAnd, BitOr, BoolOp, Expr, Name, NodeTransformer, Or)

# def get_value(dictionary: dict, name: str) -> float:
#     return dictionary[name]

# def ast_analysis(exp: ast.AST, dictionary: dict) -> float:
#     value: float = 0.0

#     # Analyse expression
#     if isinstance(exp, ast.Expression):
#         value = ast_analysis(exp.body, dictionary)

#     # and/or
#     elif isinstance(exp, ast.BoolOp):

#         # get values according to operation. It will call itself recursively

#         if isinstance(exp.op, ast.Or):
#             temp_or = []
#             for item in exp.values:
#                 try:
#                     temp_or.append(ast_analysis(item, dictionary))
#                     value = sum(filter(None, temp_or))
#                 except ValueError:
#                     continue

#         elif isinstance(exp.op, ast.And):
#             temp_and = []
#             for item in exp.values:
#                 try:
#                     temp_and.append(ast_analysis(item, dictionary))
#                     value = min(filter(None, temp_and))
#                 except ValueError:
#                     continue

#         else:
#             raise Exception(
#                 f"Expression: {exp} cannot be interpreted.\n{ast.dump(exp)}"
#             )

#     # get the value
#     elif isinstance(exp, ast.Constant):
#         pass
#     elif isinstance(exp, ast.Name):

#         # Expression ends up here and will either go back in the recursion or
#         # ends here.

#         # Replace with function
#         if exp.id in dictionary:
#             value = get_value(dictionary, exp.id)
#         elif exp.id not in dictionary:
#             value = None

#     else:
#         raise Exception(
#             f"Expression: {exp} is not an BoolOp or Name.\n{ast.dump(exp)}"
#         )

#     return value
317/12:
# def e_flux(model, expression_data, condition):
# # '''
# # The function returns the context-specific version of the model passed as an argument.

# # parameters
# # ----------
# # model: a metabolic model
# # expression_data: the expression data in the type of a data frame 
# # *** the gene names must be in the first column in the excel file ***
# # condition: the condition of interest (here time-points) in the form of string
# # '''

# # Making a dictionary from the expression data, key: gene names, value: expression value of the specified condition
#     exp_data_dict = dict()
#     for name, value in zip(expression_data.iloc[:, 0], expression_data[condition]):
#         exp_data_dict[name] = value

#     bound_vals = {reaction.id: 0 for reaction in model.reactions}

#     for reaction in model.reactions:
#         gpr = model.reactions.get_by_id(reaction.id).gene_reaction_rule
#         if gpr != '':

#             try:
#                 expression = ast.parse(gpr, mode="eval")
#                 value = ast_analysis(expression, exp_data_dict)
#                 bound_vals[reaction.id] = value

#             except KeyError:
#                 return gpr

#     # Filtering the None values pertaining to reactions with no equivalent in the expression data
#     filtered_bound_vals = {k: v for k,
#                            v in bound_vals.items() if v is not None}

#     # Getting the maximum value for data normalization
#     max_val = max(filtered_bound_vals.values())

#     # Modifying the bounds and calculating the growth
#     for reaction, value, key in zip(model.reactions, bound_vals.values(), bound_vals):
#         rxn_id = reaction.id

#         if rxn_id == key:
#             if value != 0 and value != None:
#                 # normalizing the values to 1000 (model bounds)
#                 normalized_val = (value/max_val)*1000

#                 if reaction.lower_bound == 0.0 and reaction.upper_bound == 0:
#                     continue

#                 elif reaction.lower_bound == 0.0:
#                     reaction.upper_bound = normalized_val

#                 elif reaction.upper_bound == 0.0:
#                     reaction.lower_bound = - normalized_val
#                 else:
#                     reaction.bounds = -(normalized_val, normalized_val)

#     return model
317/13:
# gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
# #gprs = gprs.replace('(','split').replace(')','split')
# #gprs = gprs.split('split')

# gprs = gprs.replace('(','').replace(')','')
# gprs = gprs.split('or')


# for gpr in gprs:
#     if 'and' not in gpr:
#         sum_g.append(df['gene'][df['Recon3D301'] == float(gpr)])
#     if 'and' in gpr:
#         min_g = []
#         for g in gpr.replace('and','').split():
#             []
#             min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#         sum_g.append(min(min_g))
# minsum = sum(sum_g)*1000
# minsum

# gprs
317/14:
# gprs = '130.1 or 127.1 or (125.1 and 124.1) or 131.1 or (126.1 and 124.1) or 128.1 or 137872.1 or (125.1 and 126.1)'
# #gprs = gprs.replace('(','split').replace(')','split')
# #gprs = gprs.split('split')

# gprs = gprs.replace('(','').replace(')','')
# gprs = gprs.split('or')


# sum_g = []
# for gpr in gprs:
#     if 'and' not in gpr:
#         sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#     if 'and' in gpr:
#         min_g = []
#         for g in gpr.replace('and','').split():
#             min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#         sum_g.append(min(min_g))
# minsum = sum(sum_g)*1000
# minsum

# gprs
317/15:
# # create a copy of the DMEM model for each condition
# model_names = {}
# for i in range(len(conditions[0])): # select column names that contain numbers
#     model_temp = model_DMEM.copy()
#     con = conditions[i]
#     for rxn in model.reactions:
#         if rxn.gene_reaction_rule is not '':
#             sum_g = []
#             for gpr in gprs:
#                 if 'and' not in gpr:
#                     sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#                 if 'and' in gpr:
#                     min_g = []
#                     for g in gpr.replace('and','').split():
#                         min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                     sum_g.append(min(min_g))
#             minsum = sum(sum_g)*1000
#     print(rxn.bounds)            
#     model_names['model_' + con] = model_temp # name model
#     locals().update(model_names)
317/16:
# # map expression to reaction 

# # load Recon3D gene IDs to match them to gene names in the dataset
# genes = pd.read_excel(Path.cwd() / 'data' / 'Recon3D_genes' / 'Recon3D_genes.xlsx' )

# # select cols from sysROT
# cols = [col for col in sysROT.columns if '_pct*kcat' in col]
# cols.insert(0, 'gene')
# df = sysROT[cols]

# # create a copy of the DMEM model for each condition
# model_names = {}
# for i in range(len(conditions)): # select column names that contain numbers
#     model_temp = model_DMEM.copy()
#     con = conditions[i]
#     for rxn in model.reactions:
#         if rxn.gene_reaction_rule is not '':
#             sum_g = []
#             for gpr in gprs:
#                 if 'and' not in gpr:
#                     sum_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(gpr)]))
#                 if 'and' in gpr:
#                     min_g = []
#                     for g in gpr.replace('and','').split():
#                         min_g.append(float(df[con+'_pct*kcat'][df['Recon3D301'] == float(g)]))  
#                     sum_g.append(min(min_g))
#             minsum = sum(sum_g)*1000
#     print(rxn.bounds)            
#     model_names['model_' + con] = model_temp # name model
#     locals().update(model_names)
317/17:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
summary(model)
316/16:
from cobra.flux_analysis import flux_variability_analysis
flux_variability_analysis(model, loopless=True)
316/17:
from cobra.flux_analysis import flux_variability_analysis

print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
318/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
318/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
318/3:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
print([rxn.lower_bound for rxn in model.reactions])
print([rxn.upper_bound for rxn in model.reactions])
model.reactions
318/4:
from cobra.flux_analysis import flux_variability_analysis

print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
318/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
318/6:
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
318/7:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
318/8:
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
318/9:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
318/10: flux_variability_analysis(model)
318/11:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S_in
318/12:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
318/13: FBA_C.fluxes[range(5)].values
318/14:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
319/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
319/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
# the stoichiometrix matrix (S)
319/3:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
print([rxn.lower_bound for rxn in model.reactions])
print([rxn.upper_bound for rxn in model.reactions])
model.reactions
319/4:
from cobra.flux_analysis import flux_variability_analysis

print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
319/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
319/6:
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
319/7:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
319/8:
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
319/9:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
319/10: flux_variability_analysis(model)
319/11:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S_in
319/12:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
319/13: FBA_C.fluxes[range(5)].values
319/14:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
319/15: model
319/16: model.reactions[0].forward_reaction
319/17: model.reactions[0].forward
319/18: model.reactions[0]
319/19: coefficients[model.reactions[1].forward_variable]
319/20: model.reactions[1].forward_variable
319/21: model.reactions[0].forward_variable
319/22: dict(model.reactions[0].forward_variable)
319/23: [dict(rxn.forward_variable) for rxn in model.reactions]
319/24: [print(rxn.forward_variable) for rxn in model.reactions]
319/25:
[print(rxn.forward_variable) for rxn in model.reactions]

mode.reaxctions[0].forward_variable
319/26:
[print(rxn.forward_variable) for rxn in model.reactions]

model.reaxctions[0].forward_variable
319/27:
[print(rxn.forward_variable) for rxn in model.reactions]

model.reactions[0].forward_variable
319/28:
[print(rxn.forward_variable) for rxn in model.reactions]

print(model.reactions[0].forward_variable)
319/29:
[print(rxn.forward_variable) for rxn in model.reactions]

(model.reactions[0].forward_variable)
319/30:
[print(rxn.forward_variable) for rxn in model.reactions]

(model.reactions[0].forward_variable)
(model.reactions[0].backward_variable)
319/31:
[print(rxn.forward_variable) for rxn in model.reactions]

(model.reactions[0].forward_variable)
(model.reactions[0].reverse_variable
319/32:
[print(rxn.forward_variable) for rxn in model.reactions]

(model.reactions[0].forward_variable)
(model.reactions[0].reverse_variable)
319/33:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
319/34:
[print(rxn.forward_variable) for rxn in model.reactions]

(model.reactions[0].forward_variable)
(model.reactions[0].reverse_variable)
319/35:
[print(rxn.forward_variable) for rxn in model.reactions]
[print(rxn.reverse_variable) for rxn in model.reactions]

(model.reactions[0].forward_variable)
(model.reactions[0].reverse_variable)
319/36:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients
319/37:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients
model.problem.Constraint
319/38:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients
model.problem.Constraint(0)
319/39:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients
model.reactions[0].flux_expression
319/40:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

model.reactions[0].flux_expression
model.reactions[2].flux_expression
319/41:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

[rxn.flux_expression for rxn in model.reactions]
model.reactions[2].flux_expression
319/42:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

[print(rxn.flux_expression) for rxn in model.reactions]
model.reactions[2].flux_expression
319/43:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

[list(rxn.flux_expression) for rxn in model.reactions]


model.reactions[2].flux_expression
319/44:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

fluxes = [rxn.flux_expression for rxn in model.reactions]
print(fluxes)

model.reactions[2].flux_expression
319/45:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

fluxes = [rxn.flux_expression for rxn in model.reactions]
fluxes
319/46:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
fluxes  = [rxn.flux for rxn in model.reactions]
319/47:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
319/48:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.flux
319/49:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0]
319/50:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].flux
319/51:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].forward_flux
319/52:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].forward_fluxes
319/53:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].flux
319/54:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].flux

fluxes = [rxn.flux for rxn in model.reactions]
319/55:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].flux

fluxes = [rxn.flux for rxn in model.reactions]
319/56:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].flux

fluxes = [rxn.flux for rxn in model.reactions]
fluxes
330/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
330/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
330/3:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
print([rxn.lower_bound for rxn in model.reactions])
print([rxn.upper_bound for rxn in model.reactions])
model.reactions
330/4:
from cobra.flux_analysis import flux_variability_analysis

print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
330/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
330/6:
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
330/7:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
330/8:
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
330/9:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
330/10: flux_variability_analysis(model)
330/11:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S_in
330/12:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
330/13: FBA_C.fluxes[range(5)].values
330/14:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
330/15:
[print(rxn.forward_variable) for rxn in model.reactions]
[print(rxn.reverse_variable) for rxn in model.reactions]

(model.reactions[0].forward_variable)
(model.reactions[0].reverse_variable)
330/16:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].flux

fluxes = [rxn.flux for rxn in model.reactions]
fluxes
330/17:


## Some useful imports
import BondGraphTools as bgt
341/1:
# Create model

def create_model(name):
    from cobra import Model
    model = Model('Beard2002')
    return model

def create_reaction(rxn_id,rxn_name='',subsystem='',lower_bound=-1000,upper_bound=1000):
    from cobra import Reaction
    reaction = Reaction(rxn_id)
    reaction.name = rxn_name
    reaction.subsystem =subsystem
    reaction.lower_bound = lower_bound
    reaction.upper_bound = upper_bound
    return reaction

def create_metabolite(met_id,met_name='',formula='',compartment=''):
    from cobra import Metabolite
    metabolite = Metabolite(met_id)
    metabolite.name = met_name
    metabolite.formula = formula
    metabolite.compartment = compartment
    return metabolite

model = create_model('Beard2002')

A = create_metabolite('A','A',compartment = 'c')
B = create_metabolite('B','B',compartment = 'c')
C = create_metabolite('C','C',compartment = 'c')
D = create_metabolite('D','D',compartment = 'c')

rxn1 = create_reaction('rxn1','rxn1','c',-1,1)
rxn1.add_metabolites({A:-1, B:-2, C:1, D:0})
rxn2 = create_reaction('rxn2','rxn2','c',-1,1)
rxn2.add_metabolites({A:2, B:2, C:-1, D:-1})
rxn3 = create_reaction('rxn3','rxn3','c',-1,1)
rxn3.add_metabolites({A:-1, B:-1, C:0, D:2})
rxn4 = create_reaction('rxn4','rxn4','c',-1,1)
rxn4.add_metabolites({A:-1, B:1, C:-1, D:3})
rxn5 = create_reaction('rxn5','rxn5','c',-1,1)
rxn5.add_metabolites({A:0, B:-1, C:0, D:1})
model.add_reactions([rxn1, rxn2, rxn3, rxn4, rxn5])
model_in = model.copy()
341/2:
EX_A = create_reaction('EX_A','EX_A','c',0,1)
EX_A.add_metabolites({A:-1})
EX_B = create_reaction('EX_B','EX_B','c',0,1)
EX_B.add_metabolites({B:-1})
EX_C = create_reaction('EX_C','EX_C','c',0,1)
EX_C.add_metabolites({C:-1})
EX_D = create_reaction('EX_D','EX_D','c',-10,10)
EX_D.add_metabolites({D:-1})
model.add_reactions([EX_A, EX_B, EX_C, EX_D])
model.objective = 'EX_D'
341/3:
model.solver = 'gurobi'
model.reactions.EX_A.lower_bound = -1
FBA_A = model.optimize()
FBA_A
print([rxn.lower_bound for rxn in model.reactions])
print([rxn.upper_bound for rxn in model.reactions])
model.reactions
341/4:
from cobra.flux_analysis import flux_variability_analysis

print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
341/5:
model.reactions.EX_A.lower_bound = 0
model.reactions.EX_B.lower_bound = -1
FBA_B = model.optimize()
FBA_B
341/6:
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
341/7:
model.reactions.EX_B.lower_bound = 0
model.reactions.EX_C.lower_bound = -1
FBA_C = model.optimize()
FBA_C
341/8:
print(flux_variability_analysis(model, loopless=True))
print(flux_variability_analysis(model))
341/9:
model.reactions.EX_A.lower_bound = -1
model.reactions.EX_B.lower_bound = -1
model.reactions.EX_C.lower_bound = 0
FBA_test = model.optimize()
FBA_test
341/10: flux_variability_analysis(model)
341/11:
import numpy as np
import cobra
from scipy.linalg import null_space
from sympy import symbols, Matrix, Transpose
S = cobra.util.array.create_stoichiometric_matrix(model)
S_null = null_space(S)
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

S_in = cobra.util.array.create_stoichiometric_matrix(model_in)
K = null_space(S_in).transpose()
(np.multiply(FBA_test.fluxes.values,S).sum(axis=1))

u1, u2, u3, u4, u5 = symbols('u1 u2 u3 u4 u5')
u = Matrix([[u1], [u2], [u3], [u4], [u5]])

K*u
S_in
341/12:
model.problem.Constraint

(model.reactions[0].flux_expression)
# same_flux = model.problem.Constraint(model.reactions.FBA.flux_expression - model.reactions.NH4t.flux_expression,lb=0,ub=0)
341/13: FBA_C.fluxes[range(5)].values
341/14:
import sympy as sym
x,y = symbols('x y')
sym.solve((x + 5 * y - 2, -3 * x + 6 * y - 15), (x, y))

K = Matrix(K)

K_null = K.nullspace()
341/15:
[print(rxn.forward_variable) for rxn in model.reactions]
[print(rxn.reverse_variable) for rxn in model.reactions]

(model.reactions[0].forward_variable)
(model.reactions[0].reverse_variable)
341/16:
coefficients = dict()
for rxn in model.reactions:
    coefficients[rxn.forward_variable] = 1.
    coefficients[rxn.reverse_variable] = 1.
coefficients

flux_expressions = [rxn.flux_expression for rxn in model.reactions]
# fluxes  = [rxn.flux for rxn in model.reactions]
model.optimize()
model.reactions[0].flux

fluxes = [rxn.flux for rxn in model.reactions]
fluxes
341/17:


## Some useful imports
import BondGraphTools as bgt
347/1: import BondGraphTools
353/1: import BondGraphTools
353/2:
import BondGraphTools
help(BondGraphTools)
353/3:


import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
353/4:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp
353/5:
## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
353/6:
## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
353/7:


## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
353/8:


## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
353/9:


## Control outputs
quiet = True
chemformula = True
353/10:


import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
353/11:
## Maths library
import numpy as np
import scipy
## BG tools
import BondGraphTools as bgt

## BG stoichiometric utilities
import stoich as st

## Stoichiometric conversion
import CobraExtract as Extract
import stoichBondGraph as stbg

## Potentials
import phiData

## Faraday constant
import scipy.constants as con
F = con.physical_constants['Faraday constant'][0]

## Display
import IPython.display as disp

import copy

## Allow output from within functions
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

import importlib as imp

## Units etc
factor = 1
units = ['mV','kJ']

## Control output
quiet = True
computePhi = True
showMu = True
353/12:
## Maths library
import numpy as np
import scipy
## BG tools
import bgt.BondGraphTools as bgt

## BG stoichiometric utilities
import stoich as st

## Stoichiometric conversion
import CobraExtract as Extract
import stoichBondGraph as stbg

## Potentials
import phiData

## Faraday constant
import scipy.constants as con
F = con.physical_constants['Faraday constant'][0]

## Display
import IPython.display as disp

import copy

## Allow output from within functions
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

import importlib as imp

## Units etc
factor = 1
units = ['mV','kJ']

## Control output
quiet = True
computePhi = True
showMu = True
359/1:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
359/2:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
360/1:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
360/2:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
360/3:
bgt.connect(A_store, A_junction)
bgt.connect(A_junction, reaction)
bgt.connect(reaction, B_junction)
bgt.connect(B_junction, B_store)
360/4:
for param_index, (component, parameter_name) in model.params.items():
    if parameter_name in ("T", "R"):
        bgt.set_param(model, param_index, 1)
    elif component is reaction:
        bgt.set_param(model, param_index, None)
360/5: bgt.draw(model)
360/6:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
360/7:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
    
    chain = bgt.new(name="3 Step Chain")
    
substrate = bgt.new("SS", name='S')
product = bgt.new("SS", name="P")
substrate_law = bgt.new("0")
product_law = bgt.new("0")
bgt.add(chain, substrate, product, substrate_law, product_law)

bgt.connect(substrate, substrate_law)
bgt.connect(product_law, product)

bgt.expose(substrate, label='S')
bgt.expose(product, label='P')

reaction_step = enzyme_catalysed_reaction('E1')

bgt.add(chain, reaction_step)
substrate_port, = (port for port in reaction_step.ports if port.name == "S")
bgt.connect(substrate_law, substrate_port)


for i in range(1, 4):
    last_product_port, = (port for port in reaction_step.ports if port.name == "P")
    step_law = bgt.new("0")
    step_ce = bgt.new("Ce", library="BioChem", name=f"A{i}", value={"R":1,"T":1, "k":1})
    reaction_step = enzyme_catalysed_reaction(f"E{i}")

    bgt.add(chain, step_ce, step_law, reaction_step)
    substrate_port, = (port for port in reaction_step.ports if port.name == "S")
    bgt.connect(last_product_port, step_law)
    bgt.connect(step_law, step_ce)
    bgt.connect(step_law, substrate_port)


last_product_port, = (port for port in reaction_step.ports if port.name == "P")
bgt.connect(last_product_port, product_law)


bgt.draw(chain)
360/8:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
360/9:
def enzyme_catalysed_reaction(name):
    """
    This function produces a bond graph model of an basic enzyme catalysed
    reaction of the from `S + E  = E + P` where the substrate and product
    are exposed as external ports.

    Args:
        name (str): The name of the enzyme

    Returns:
        `BondGraph`: The resulting model
    """

    cat_model = bgt.new(name=name)

    # Construct the external ports.
    substrate = bgt.new("SS", name="S")
    product = bgt.new("SS", name="P")

    # Here we build the reaction, again with the rate as a control variable.
    # Again, we assume parameterised have be normalised with respect to
    # pressure and temperature.
    cat_reaction = bgt.new("Re", name="Re", library="BioChem", value={'r':None, 'R':1, 'T':1})

    # We choose 'k' to be 1 for demonstration.
    enzyme = bgt.new("Ce", name="E", library="BioChem", value={'k':1, 'R':1, 'T':1})

    # Substrate + Enzyme flux conservation law
    SE = bgt.new('1')
    # Product + Enzyme flux conservation law
    PE = bgt.new('1')

    # Conservation of enzyme law.
    law_E = bgt.new("0")

    bgt.add(cat_model, substrate, product, enzyme, SE, PE, law_E, cat_reaction)

    connections = [
        (substrate, SE),
        (law_E, SE),
        (law_E, enzyme),
        (SE, cat_reaction),
        (cat_reaction, PE),
        (PE, law_E),
        (PE, product)
    ]
    for tail, head in connections:
        bgt.connect(tail, head)

    bgt.expose(substrate, 'S')
    bgt.expose(product, 'P')

    return cat_model
360/10:
E1 = enzyme_catalysed_reaction("E1")
bgt.draw(E1)
360/11:
E1 = enzyme_catalysed_reaction("E1")
bgt.draw(E1)
bgt.draw(model)
361/1:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
361/2:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
361/3:
bgt.connect(A_store, A_junction)
bgt.connect(A_junction, reaction)
bgt.connect(reaction, B_junction)
bgt.connect(B_junction, B_store)
361/4:
for param_index, (component, parameter_name) in model.params.items():
    if parameter_name in ("T", "R"):
        bgt.set_param(model, param_index, 1)
    elif component is reaction:
        bgt.set_param(model, param_index, None)
361/5: bgt.draw(model)
361/6:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
361/7:
def enzyme_catalysed_reaction(name):
    """
    This function produces a bond graph model of an basic enzyme catalysed
    reaction of the from `S + E  = E + P` where the substrate and product
    are exposed as external ports.

    Args:
        name (str): The name of the enzyme

    Returns:
        `BondGraph`: The resulting model
    """

    cat_model = bgt.new(name=name)

    # Construct the external ports.
    substrate = bgt.new("SS", name="S")
    product = bgt.new("SS", name="P")

    # Here we build the reaction, again with the rate as a control variable.
    # Again, we assume parameterised have be normalised with respect to
    # pressure and temperature.
    cat_reaction = bgt.new("Re", name="Re", library="BioChem", value={'r':None, 'R':1, 'T':1})

    # We choose 'k' to be 1 for demonstration.
    enzyme = bgt.new("Ce", name="E", library="BioChem", value={'k':1, 'R':1, 'T':1})

    # Substrate + Enzyme flux conservation law
    SE = bgt.new('1')
    # Product + Enzyme flux conservation law
    PE = bgt.new('1')

    # Conservation of enzyme law.
    law_E = bgt.new("0")

    bgt.add(cat_model, substrate, product, enzyme, SE, PE, law_E, cat_reaction)

    connections = [
        (substrate, SE),
        (law_E, SE),
        (law_E, enzyme),
        (SE, cat_reaction),
        (cat_reaction, PE),
        (PE, law_E),
        (PE, product)
    ]
    for tail, head in connections:
        bgt.connect(tail, head)

    bgt.expose(substrate, 'S')
    bgt.expose(product, 'P')

    return cat_model
361/8:
E1 = enzyme_catalysed_reaction("E1")
bgt.draw(E1)
bgt.draw(model)
361/9: bgt.draw(model)
362/1:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
362/2:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
362/3:
bgt.connect(A_store, A_junction)
bgt.connect(A_junction, reaction)
bgt.connect(reaction, B_junction)
bgt.connect(B_junction, B_store)
362/4:
for param_index, (component, parameter_name) in model.params.items():
    if parameter_name in ("T", "R"):
        bgt.set_param(model, param_index, 1)
    elif component is reaction:
        bgt.set_param(model, param_index, None)
362/5: bgt.draw(model)
362/6: bgt.draw(model)
362/7:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
362/8:
def enzyme_catalysed_reaction(name):
    """
    This function produces a bond graph model of an basic enzyme catalysed
    reaction of the from `S + E  = E + P` where the substrate and product
    are exposed as external ports.

    Args:
        name (str): The name of the enzyme

    Returns:
        `BondGraph`: The resulting model
    """

    cat_model = bgt.new(name=name)

    # Construct the external ports.
    substrate = bgt.new("SS", name="S")
    product = bgt.new("SS", name="P")

    # Here we build the reaction, again with the rate as a control variable.
    # Again, we assume parameterised have be normalised with respect to
    # pressure and temperature.
    cat_reaction = bgt.new("Re", name="Re", library="BioChem", value={'r':None, 'R':1, 'T':1})

    # We choose 'k' to be 1 for demonstration.
    enzyme = bgt.new("Ce", name="E", library="BioChem", value={'k':1, 'R':1, 'T':1})

    # Substrate + Enzyme flux conservation law
    SE = bgt.new('1')
    # Product + Enzyme flux conservation law
    PE = bgt.new('1')

    # Conservation of enzyme law.
    law_E = bgt.new("0")

    bgt.add(cat_model, substrate, product, enzyme, SE, PE, law_E, cat_reaction)

    connections = [
        (substrate, SE),
        (law_E, SE),
        (law_E, enzyme),
        (SE, cat_reaction),
        (cat_reaction, PE),
        (PE, law_E),
        (PE, product)
    ]
    for tail, head in connections:
        bgt.connect(tail, head)

    bgt.expose(substrate, 'S')
    bgt.expose(product, 'P')

    return cat_model
362/9: bgt.draw(model)
362/10:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
362/11:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
362/12:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
362/13:
bgt.connect(A_store, A_junction)
bgt.connect(A_junction, reaction)
bgt.connect(reaction, B_junction)
bgt.connect(B_junction, B_store)
362/14:
for param_index, (component, parameter_name) in model.params.items():
    if parameter_name in ("T", "R"):
        bgt.set_param(model, param_index, 1)
    elif component is reaction:
        bgt.set_param(model, param_index, None)
362/15: bgt.draw(model)
363/1:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
363/2:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
363/3:
bgt.connect(A_store, A_junction)
bgt.connect(A_junction, reaction)
bgt.connect(reaction, B_junction)
bgt.connect(B_junction, B_store)
363/4:
for param_index, (component, parameter_name) in model.params.items():
    if parameter_name in ("T", "R"):
        bgt.set_param(model, param_index, 1)
    elif component is reaction:
        bgt.set_param(model, param_index, None)
363/5: bgt.draw(model)
363/6: bgt.draw(model)
363/7:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
363/8:
def enzyme_catalysed_reaction(name):
    """
    This function produces a bond graph model of an basic enzyme catalysed
    reaction of the from `S + E  = E + P` where the substrate and product
    are exposed as external ports.

    Args:
        name (str): The name of the enzyme

    Returns:
        `BondGraph`: The resulting model
    """

    cat_model = bgt.new(name=name)

    # Construct the external ports.
    substrate = bgt.new("SS", name="S")
    product = bgt.new("SS", name="P")

    # Here we build the reaction, again with the rate as a control variable.
    # Again, we assume parameterised have be normalised with respect to
    # pressure and temperature.
    cat_reaction = bgt.new("Re", name="Re", library="BioChem", value={'r':None, 'R':1, 'T':1})

    # We choose 'k' to be 1 for demonstration.
    enzyme = bgt.new("Ce", name="E", library="BioChem", value={'k':1, 'R':1, 'T':1})

    # Substrate + Enzyme flux conservation law
    SE = bgt.new('1')
    # Product + Enzyme flux conservation law
    PE = bgt.new('1')

    # Conservation of enzyme law.
    law_E = bgt.new("0")

    bgt.add(cat_model, substrate, product, enzyme, SE, PE, law_E, cat_reaction)

    connections = [
        (substrate, SE),
        (law_E, SE),
        (law_E, enzyme),
        (SE, cat_reaction),
        (cat_reaction, PE),
        (PE, law_E),
        (PE, product)
    ]
    for tail, head in connections:
        bgt.connect(tail, head)

    bgt.expose(substrate, 'S')
    bgt.expose(product, 'P')

    return cat_model
363/9: bgt.draw(model)
364/1:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
364/2:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
364/3:
bgt.connect(A_store, A_junction)
bgt.connect(A_junction, reaction)
bgt.connect(reaction, B_junction)
bgt.connect(B_junction, B_store)
364/4:
for param_index, (component, parameter_name) in model.params.items():
    if parameter_name in ("T", "R"):
        bgt.set_param(model, param_index, 1)
    elif component is reaction:
        bgt.set_param(model, param_index, None)
364/5:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
364/6: bgt.draw(model)
364/7:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
364/8:
def enzyme_catalysed_reaction(name):
    """
    This function produces a bond graph model of an basic enzyme catalysed
    reaction of the from `S + E  = E + P` where the substrate and product
    are exposed as external ports.

    Args:
        name (str): The name of the enzyme

    Returns:
        `BondGraph`: The resulting model
    """

    cat_model = bgt.new(name=name)

    # Construct the external ports.
    substrate = bgt.new("SS", name="S")
    product = bgt.new("SS", name="P")

    # Here we build the reaction, again with the rate as a control variable.
    # Again, we assume parameterised have be normalised with respect to
    # pressure and temperature.
    cat_reaction = bgt.new("Re", name="Re", library="BioChem", value={'r':None, 'R':1, 'T':1})

    # We choose 'k' to be 1 for demonstration.
    enzyme = bgt.new("Ce", name="E", library="BioChem", value={'k':1, 'R':1, 'T':1})

    # Substrate + Enzyme flux conservation law
    SE = bgt.new('1')
    # Product + Enzyme flux conservation law
    PE = bgt.new('1')

    # Conservation of enzyme law.
    law_E = bgt.new("0")

    bgt.add(cat_model, substrate, product, enzyme, SE, PE, law_E, cat_reaction)

    connections = [
        (substrate, SE),
        (law_E, SE),
        (law_E, enzyme),
        (SE, cat_reaction),
        (cat_reaction, PE),
        (PE, law_E),
        (PE, product)
    ]
    for tail, head in connections:
        bgt.connect(tail, head)

    bgt.expose(substrate, 'S')
    bgt.expose(product, 'P')

    return cat_model
364/9: bgt.draw(model)
365/1:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
365/2:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
365/3:
bgt.connect(A_store, A_junction)
bgt.connect(A_junction, reaction)
bgt.connect(reaction, B_junction)
bgt.connect(B_junction, B_store)
365/4:
for param_index, (component, parameter_name) in model.params.items():
    if parameter_name in ("T", "R"):
        bgt.set_param(model, param_index, 1)
    elif component is reaction:
        bgt.set_param(model, param_index, None)
365/5:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
365/6:
import matplotlib.pyplot as plt
x0 = {"x_0":1, "x_1":1}
t_span = [0,5]
fig = plt.figure()
ax = plt.gca()
ax.set_title("One Step Reaction")

for c, kappa in [('r', 0.1), ('b', 1), ('g', 10)]:
    t, x = bgt.simulate(model, x0=x0, timespan=t_span, control_vars={"u_0":kappa})
    plt.plot(t,x[:,0], c+':')
    plt.plot(t,x[:,1], c)
365/7:
def enzyme_catalysed_reaction(name):
    """
    This function produces a bond graph model of an basic enzyme catalysed
    reaction of the from `S + E  = E + P` where the substrate and product
    are exposed as external ports.

    Args:
        name (str): The name of the enzyme

    Returns:
        `BondGraph`: The resulting model
    """

    cat_model = bgt.new(name=name)

    # Construct the external ports.
    substrate = bgt.new("SS", name="S")
    product = bgt.new("SS", name="P")

    # Here we build the reaction, again with the rate as a control variable.
    # Again, we assume parameterised have be normalised with respect to
    # pressure and temperature.
    cat_reaction = bgt.new("Re", name="Re", library="BioChem", value={'r':None, 'R':1, 'T':1})

    # We choose 'k' to be 1 for demonstration.
    enzyme = bgt.new("Ce", name="E", library="BioChem", value={'k':1, 'R':1, 'T':1})

    # Substrate + Enzyme flux conservation law
    SE = bgt.new('1')
    # Product + Enzyme flux conservation law
    PE = bgt.new('1')

    # Conservation of enzyme law.
    law_E = bgt.new("0")

    bgt.add(cat_model, substrate, product, enzyme, SE, PE, law_E, cat_reaction)

    connections = [
        (substrate, SE),
        (law_E, SE),
        (law_E, enzyme),
        (SE, cat_reaction),
        (cat_reaction, PE),
        (PE, law_E),
        (PE, product)
    ]
    for tail, head in connections:
        bgt.connect(tail, head)

    bgt.expose(substrate, 'S')
    bgt.expose(product, 'P')

    return cat_model
365/8:
E1 = enzyme_catalysed_reaction("E1")
bgt.draw(E1)
365/9:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
365/10:
A_store = bgt.new("Ce", name="A", library="BioChem", value={'k':10})
B_store= bgt.new("Ce", name="B", library="BioChem", value={'k':1})
A_junction = bgt.new("0")
B_junction = bgt.new("0")
reaction = bgt.new("Re", library="BioChem")

bgt.add(model, A_store, B_store,A_junction, B_junction, reaction)
365/11:
bgt.connect(A_store, A_junction)
bgt.connect(A_junction, reaction)
bgt.connect(reaction, B_junction)
bgt.connect(B_junction, B_store)
365/12:
for param_index, (component, parameter_name) in model.params.items():
    if parameter_name in ("T", "R"):
        bgt.set_param(model, param_index, 1)
    elif component is reaction:
        bgt.set_param(model, param_index, None)
371/1:
import BondGraphTools as bgt
model = bgt.new(name="Reaction")
372/1:


## Maths library
import numpy as np
import scipy
## BG tools
import BondGraphTools as bgt

## BG stoichiometric utilities
import stoich as st

## Stoichiometric conversion
import CobraExtract as Extract
import stoichBondGraph as stbg

## Potentials
import phiData

## Faraday constant
import scipy.constants as con
F = con.physical_constants['Faraday constant'][0]

## Display
import IPython.display as disp

import copy

## Allow output from within functions
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

import importlib as imp

## Units etc
factor = 1
units = ['mV','kJ']

## Control output
quiet = True
computePhi = True
showMu = True
372/2:


import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
376/1:
## Maths library
import numpy as np
import scipy
## BG tools
import BondGraphTools as bgt

## BG stoichiometric utilities
import stoich as st

## Stoichiometric conversion
import CobraExtract as Extract
import stoichBondGraph as stbg

## Potentials
import phiData

## Faraday constant
import scipy.constants as con
F = con.physical_constants['Faraday constant'][0]

## Display
import IPython.display as disp

import copy

## Allow output from within functions
from IPython.core.interactiveshell import InteractiveShell
InteractiveShell.ast_node_interactivity = "all"

import importlib as imp

## Units etc
factor = 1
units = ['mV','kJ']

## Control output
quiet = True
computePhi = True
showMu = True
376/2:


import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
376/3:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
376/4:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
379/1:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
379/2:
import importlib.util
import sys
spec = importlib.util.spec_from_file_location("stoich", "git/GawPanCra21/stoich.py")
foo = importlib.util.module_from_spec(spec)
sys.modules["module.name"] = foo
spec.loader.exec_module(foo)
foo.MyClass()
379/3:
import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py & mock.py
sys.path
379/4:
import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py & mock.py
sys.path

sys.path.append("C:\\Users\\prins\\git\\GawPanCra")
379/5:
import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py & mock.py
sys.path

sys.path.append("C:\\Users\\prins\\git\\GawPanCra21")
379/6:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
379/7:
import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py & mock.py
sys.path

sys.path.append("C:\\Users\\prins\\git\\GawPanCra21")
sys.path
379/8:
import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py & mock.py
sys.path.append("C:\\Users\\prins\\git\\GawPanCra21")
sys.path
383/1:
import sys
# the mock-0.3.1 dir contains testcase.py, testutils.py & mock.py
sys.path.append("C:\\Users\\prins\\git\\GawPanCra21")
sys.path
383/2:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
383/3: importlib.import_module(git/GawPanCra21/stoich.py)
383/4:
import importlib
importlib.import_module(git/GawPanCra21/stoich.py)
383/5:
import importlib
importlib.import_module('C:\\Users\\prins\\git\\GawPanCra21\\stoich.py')
383/6:
import importlib
importlib.import_module('git/GawPanCra21/stoich.py')
383/7: sys.path.pop()
383/8:
import sys
sys.path.append('/git/GawPanCra21/stoich.py')
# Considering your module contains a function called my_func, you could import it:
from my_module import my_func
# Or you could import the module as a whole,
import my_module
389/1:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
392/1:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
392/2: import cobra
392/3: import cobra.test
392/4:
import cobra

dir cobra
392/5:
import cobra

dir(cobra)
392/6:
import cobra

dir(cobra.io)
392/7: import cobra.test
392/8: import cobra.util
392/9:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
392/10: import cobra.tests
392/11:
import cobra
dir(cobra)
392/12:
import BondGraphTools as bgt
import numpy as np
import IPython.display as disp

## Stoichiometric analysis
import stoich as st

## Export stoichiometry as bond graph
import stoichBondGraph as stbg

## Modular bond graphs
import modularBondGraph as mbg

## Extract stoichiometry from a CobraPy model
import CobraExtract as Extract

## Control outputs
quiet = True
chemformula = True
392/13:
import numpy as np
#import pandas as pd
import copy
import cobra
import cobra.test
import cobra.util
392/14:
import numpy as np
#import pandas as pd
import copy
import cobra
import cobra.io
import cobra.util
392/15: dir(cobra)
405/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
405/2:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
414/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
414/2:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
414/3:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
414/4:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
414/5:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
summary(model)
414/6:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
model.summary()
414/7:  pfba(model)
414/8: model.pfba()
414/9:
with model:
    add_loopless(model)
    solution = model.optimize()
print("loopless solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
414/10:
from cobra.flux_analysis.loopless import add_loopless, loopless_solution
from cobra.flux_analysis import pfba
model.pfba()
414/11:
from cobra.flux_analysis.loopless import add_loopless, loopless_solution
from cobra.flux_analysis import pfba
pfba(model)
414/12:
with model:
    add_loopless(model)
    solution = model.optimize()
print("loopless solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
416/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
416/2:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
416/3:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
416/4:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
416/5:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
model.summary()
416/6:
from cobra.flux_analysis.loopless import add_loopless, loopless_solution
from cobra.flux_analysis import pfba
pfba(model)
416/7:
with model:
    add_loopless(model)
    solution = model.optimize()
print("loopless solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
417/1:
with model:
    add_loopless(model)
    solution = model.optimize()
print("loopless solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
418/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
418/2:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
418/3:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
418/4:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
418/5:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
model.summary()
418/6:
from cobra.flux_analysis.loopless import add_loopless, loopless_solution
from cobra.flux_analysis import pfba
pfba(model)
418/7:
with model:
    add_loopless(model)
    solution = model.optimize()
print("loopless solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
422/1:
with model:
    add_loopless(model)
    solution = model.optimize()
print("loopless solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
424/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
424/2:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
424/3:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
424/4:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
424/5:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
model.summary()
424/6:
from cobra.flux_analysis.loopless import add_loopless, loopless_solution
from cobra.flux_analysis import pfba
424/7:
with model:
    add_loopless(model)
    solution = model.optimize()
print("loopless solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
426/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
426/2:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
427/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
427/2:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
427/3:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
427/4:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
427/5:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
model.summary()
427/6:
from cobra.flux_analysis.loopless import add_loopless, loopless_solution
from cobra.flux_analysis import pfba
427/7:

    
solution = add_loopless(model).optimize()
print("loopless solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
428/1:
from pathlib import Path
import pandas as pd
import numpy as np
import os
import cobra
from cobra.io import load_matlab_model, save_matlab_model
428/2:
# load model and set boundary reactions

# load model
Recon3DModel_301_patch = load_matlab_model(Path.cwd() / 'data' / 'Recon3D_model' / 'Recon3DModel_301_patch.mat') # load Recon3D model
model = Recon3DModel_301_patch.copy() # copy Recon3D model

# LOAD FUNCTION
def set_bounds_rxns(model,reaction_bounds,mult):
    # set bounds of a multiple reactions from panda data frame
    # reaction_bounds: a panda data frame with three columns (rxn_IDs, lb, ub)
    # mult: multiplier for the bounds to e.g. set ratio between EX reaction bounds (linked to DMEM composition) and internal reaction bounds 
    for i in range(len(reaction_bounds)):
        try: 
            model.reactions.get_by_id(reaction_bounds.iloc[i,0]).bounds = reaction_bounds.iloc[i,1]*mult,reaction_bounds.iloc[i,2]*mult 
        except KeyError: continue # because there are some mistakes in the Reaction names (have to be fixed)
    return model

# remove 'irrelevant' reactions that create spurious fluxes by setting boundaries to 0
rxns_to_delete =  ['r0355', 'DXTRNt', 'GLDBRAN', 'GLPASE2']
for rxn_id in rxns_to_delete:
    model.reactions.get_by_id(rxn_id).bounds = (0,0)
mets_in_rxns_to_delete =  ['ggn[c]', 'HC02203[c]', 'HC02205[c]', 'HC02207[c]', 'prostge2[c]']
for i in mets_in_rxns_to_delete:
    rxns = list(model.metabolites.get_by_id(i).reactions)
    for rxn in rxns:
        rxn.bounds = (0,0)

# create a copy of the model to close        
model_closed = model.copy() # copy Recon3D model

# create lists of reactions to close
rxns = [x.id for x in model_closed.reactions]
rxns_to_close_lb = list(filter(lambda x: 'DM_' in x or 'sink_' in x or 'EX_' in x or  'biomass' in x, rxns))
rxns_to_close_ub = list(filter(lambda x: 'DM_' in x or 'sink_' in x, rxns))

# close lower boundaries of all boundary reactions
for rxn_id in rxns_to_close_lb:
    model_closed.reactions.get_by_id(rxn_id).lower_bound = 0

# close upper boundaries of demand and sink reactions
for rxn_id in rxns_to_close_ub:
    model_closed.reactions.get_by_id(rxn_id).upper_bound = 0

# open lower boundaries of the closed model to let DMEM metabolites in
model_DMEM = model_closed.copy()
reactionBounds = pd.read_excel(Path.cwd() / 'data' / 'reaction_bounds' / 'Opening_reactions2.xlsx')
model_DMEM = set_bounds_rxns(model_closed,reactionBounds,1/10)
428/3:
# SysROT (deal with missing values)

# load gene expression from file with gene IDs in col called 'gene' 
geneExpression = pd.read_excel(Path.cwd() / 'data' / 'gene_expression' / 'mean_gene_expression.xlsx' )

# load SysGO classification
sysGO = pd.read_excel(Path.cwd() / 'data' / 'sysGO' / 'SysGO.xlsx' )

# select info for SysROT and merge gene expression data and SysROT table based on gene info (key columns with gene IDs)
sysROT = sysGO[["gene", "Process (1)", "Process (2)", "Process (3)", "Tissue specific expression"]]
sysROT = pd.merge(sysROT, geneExpression, how = 'inner')

# function for filling values using groupby data frames of the processes (P)
def fill_nan(sysROT, P):
    if tse == 'Detected in all':
        P_i = sysROT.loc[i, P.index.name] 
        mean_P = P.loc[P_i,con]['mean']
        sysROT.loc[i,con] = mean_P
    else:
        P_i = sysROT.loc[i, P.index.name] 
        min_P = P.loc[P_i,con]['min']
        sysROT.loc[i,con] = min_P
    return sysROT

# fill nan values
conditions = sysROT.select_dtypes(include=np.number).columns.tolist() # select column names that contain numbers
for con in conditions:
    # for each condition create tables with min and mean values per process
    P1 = sysROT.groupby(["Process (1)"]).agg({con:['mean', 'min']}) 
    P2 = sysROT.groupby(["Process (2)"]).agg({con:['mean', 'min']})
    P3 = sysROT.groupby(["Process (3)"]).agg({con:['mean', 'min']})
    for i in sysROT.index: 
        tse = sysROT.loc[i,'Tissue specific expression']
        while pd.isna(sysROT.loc[i, con]): 
            if tse == 'Not detected':
                sysROT.loc[i,con] = 0
            else:
                fill_nan(sysROT, P1)
                fill_nan(sysROT, P2)
                fill_nan(sysROT, P3)
                break
428/4:
# normalise to total expression and kcat

# load kcat file and add values to sysROT data frame, fill missing kcat values with median kcat
kcat = pd.read_excel(Path.cwd() / 'data' / 'kcat' /  'EnerSysGO kinetic data.xlsx')
sysROT = pd.merge(sysROT, kcat[['gene', 'kcat']], how = 'outer') # add kcat to sysROT table
sysROT['kcat'] = sysROT['kcat'].fillna(sysROT['kcat'].median()) # fill nan kcat values with median kcat (= 1)
# normalise gene expression to sum of all gene expression per sample and for kcat 
for con in conditions:
    if '_pct' not in con:
        sysROT[con+'_pct'] = sysROT[con]/sum(sysROT[con])*100
        sysROT[con+'_pct*kcat'] = sysROT[con+'_pct'].multiply(sysROT['kcat'],axis="index")
428/5:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model.optimize()
model.summary()
428/6:
# run models

# set objective function
model_closed.objective = 'DM_atp_c_' # set objective
model_closed.reactions.get_by_id('DM_atp_c_').bounds=(-1000,1000)
model_closed.optimize()
model_closed.summary()
428/7:
from cobra.flux_analysis.loopless import add_loopless, loopless_solution
from cobra.flux_analysis import pfba
428/8:
solution = pfba(model)
print("parsimonious solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
428/9:
solution = pfba(model_closed)
print("parsimonious solution: status = " + solution.status)
print("loopless solution flux: v3 = %.1f" % solution.fluxes["v3"])
428/10:  pfba(model_closed)
428/11:  pfba(model_closed).status
428/12:  pfba(model_closed).fluxes
428/13: add_loopless(model)
438/1:
import riptide

my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
443/1:
import riptide

my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
443/2:
import riptide
import cobra

my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
448/1:
import riptide
import cobra

my_model = cobra.io.read_sbml_model('tests/genre.sbml')
449/1:
import riptide

my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
449/2:
import riptide
import cobra
my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
450/1:
import riptide
import cobra
my_model = cobra.io.read_sbml_model('tests/genre.sbml')
450/2:
transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates
450/3:
transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates
450/4: riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
452/1:
import riptide
import cobra
my_model = cobra.io.read_sbml_model('tests/genre.sbml')
454/1:
import riptide
import cobra
my_model = cobra.io.read_sbml_model('tests/genre.sbml')
455/1:
import riptide
import cobra
my_model = cobra.io.read_sbml_model('tests/genre.sbml')
455/2: transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
455/3: transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates
455/4: riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
458/1:
import riptide

my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
458/2:
import riptide
import cobra 

my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
458/3:
import riptide
import cobra 
import symengine 
my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
459/1:
import riptide

my_model = cobra.io.read_sbml_model('tests/genre.sbml')

transcript_abundances_1 = riptide.read_transcription_file('tests/transcriptome1.tsv')
transcript_abundances_2 = riptide.read_transcription_file('tests/transcriptome2.tsv') # has replicates

riptide_object_1_a = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1)
riptide_object_1_b = riptide.contextualize(model=my_model, transcriptome=transcript_abundances_1, tasks=['rxn1'], exclude=['rxn2','rxn3'])

riptide.save_output(riptide_obj=riptide_object_1_a, path='~/Desktop/example_riptide_output')
460/1: import riptide
460/2:
import riptide
import symengine
460/3:
import riptide
import pandas
460/4: import riptide
462/1:
import cobra.test

from mass import MassMetabolite, MassModel, MassReaction
462/2:
# Get some COBRA objects
cobra_model = cobra.test.create_test_model("textbook")
cobra_metabolite = cobra_model.metabolites.get_by_id("atp_c")
cobra_reaction = cobra_model.reactions.get_by_id("PGI")
462/3:
mass_metabolite = MassMetabolite(cobra_metabolite)
mass_metabolite
462/4:
for metabolite in [cobra_metabolite, mass_metabolite]:
    print("Number of Reactions: {0}; Model: {1}".format(len(metabolite.reactions), metabolite.model))
462/5:
for metabolite in [cobra_metabolite, mass_metabolite]:
    print("Number of Reactions: {2}; Model: {1}".format(len(metabolite.reactions), metabolite.model))
462/6:
for metabolite in [cobra_metabolite, mass_metabolite]:
    print("Number of Reactions: {0}; Model: {1}".format(len(metabolite.reactions), metabolite.model))
462/7:
for attr in ["id", "name", "formula", "charge", "compartment"]:
    print("Identical '{0}': {1}".format(
        attr, getattr(cobra_metabolite, attr) == getattr(mass_metabolite, attr)))
462/8:
mass_reaction = MassReaction(cobra_reaction)
mass_reaction
462/9:
for metabolite in mass_reaction.metabolites:
    print(metabolite, type(metabolite))
462/10:
print(cobra_reaction.genes)
print(mass_reaction.genes)
462/11:
print(cobra_reaction.model)
print(mass_reaction.model)
462/12:
for attr in ["id", "name", "subsystem", "bounds", "compartments", "gene_reaction_rule"]:
    print("Identical '{0}': {1}".format(
        attr, getattr(cobra_reaction, attr) == getattr(mass_reaction, attr)))
462/13:
mass_model = MassModel(cobra_model)
mass_model
463/1:
import cobra.test

from mass import MassMetabolite, MassModel, MassReaction
463/2:
# Get some COBRA objects
cobra_model = cobra.test.create_test_model("textbook")
cobra_metabolite = cobra_model.metabolites.get_by_id("atp_c")
cobra_reaction = cobra_model.reactions.get_by_id("PGI")
463/3:
mass_metabolite = MassMetabolite(cobra_metabolite)
mass_metabolite
463/4:
for metabolite in [cobra_metabolite, mass_metabolite]:
    print("Number of Reactions: {0}; Model: {1}".format(len(metabolite.reactions), metabolite.model))
463/5:
for attr in ["id", "name", "formula", "charge", "compartment"]:
    print("Identical '{0}': {1}".format(
        attr, getattr(cobra_metabolite, attr) == getattr(mass_metabolite, attr)))
463/6:
mass_reaction = MassReaction(cobra_reaction)
mass_reaction
463/7:
for metabolite in mass_reaction.metabolites:
    print(metabolite, type(metabolite))
463/8:
print(cobra_reaction.genes)
print(mass_reaction.genes)
463/9:
print(cobra_reaction.model)
print(mass_reaction.model)
463/10:
for attr in ["id", "name", "subsystem", "bounds", "compartments", "gene_reaction_rule"]:
    print("Identical '{0}': {1}".format(
        attr, getattr(cobra_reaction, attr) == getattr(mass_reaction, attr)))
463/11:
mass_model = MassModel(cobra_model)
mass_model
463/12:
print("All MassMetabolites: {0}".format(
    all([isinstance(met, MassMetabolite)
         for met in mass_model.metabolites])))
print("All MassReactions: {0}".format(
    all([isinstance(rxn, MassReaction)
         for rxn in mass_model.reactions])))
463/13:
print(cobra_reaction.reaction)
print(cobra_reaction.bounds)
print(cobra_reaction.reversibility)
463/14:
for header, bounds in zip(["Both Directions", "Forward Direction", "Reverse Direction"],
                          [(-1000, 1000), (0, 1000), (-1000, 0)]):

    print("\n".join((header, "-" * len(header))))
    cobra_reaction.bounds = bounds
    print(cobra_reaction.reaction)
    print(cobra_reaction.bounds)
    print("Reversibility: {0}\n".format(cobra_reaction.reversibility))
463/15:
for header, bounds in zip(["Forward Direction (Flux)", "Reverse Direction (Flux)", "Both Directions (Flux)"],
                          [(0, 1000), (-1000, 0), (-1000, 1000)]):

    print("\n".join((header, "-" * len(header))))
    mass_reaction.bounds = bounds
    print(mass_reaction.reaction)
    print(mass_reaction.bounds)
    print("Reversibility: {0}".format(mass_reaction.reversibility))
    print("Reversible (Kinetic): {0}".format(mass_reaction.reversible))
    print("Rate: {0}\n".format(mass_reaction.rate))
463/16:
for header, reversible in zip(["Both Directions (Kinetics)", "Forward Direction (Kinetics)"], [True, False]):
    print("\n".join((header, "-" * len(header))))
    mass_reaction.reversible = reversible
    print(mass_reaction.reaction)
    print(mass_reaction.bounds)
    print("Reversibility: {0}".format(mass_reaction.reversibility))
    print("Reversible (Kinetic): {0}".format(mass_reaction.reversible))
    print("Rate: {0}\n".format(mass_reaction.rate))
463/17:
mass_reaction_rev = mass_reaction.reverse_stoichiometry(inplace=False)
print(mass_reaction_rev.reaction)
print(mass_reaction_rev.bounds)
print("Reversibility: {0}".format(mass_reaction_rev.reversibility))
print("Reversible (Kinetic): {0}".format(mass_reaction_rev.reversible))
print("Rate: {0}\n".format(mass_reaction_rev.rate))
463/18:
cobra_model = cobra.test.create_test_model("textbook")
cobra_model.optimize()
cobra_reaction = cobra_model.reactions.get_by_id("PGI")
cobra_reaction.flux
463/19:
cobra_model = cobra.test.create_test_model("textbook")
mass_model = MassModel(cobra_model)
mass_model.optimize()
mass_reaction = mass_model.reactions.get_by_id("PGI")
mass_reaction.flux
463/20: print(mass_reaction.steady_state_flux)
463/21:
mass_model.set_steady_state_fluxes_from_solver()
# Display for first 10 reactions
for reaction in mass_model.reactions[:10]:
    print(reaction.id, reaction.steady_state_flux)
465/1:
import sympy as sym

from mass import (
    MassConfiguration, MassMetabolite, MassModel, MassReaction, Simulation)
from mass.example_data import create_example_model
from mass.visualization import plot_time_profile
model = create_example_model("MultiCompartment")
465/2: model.compartments
465/3: model.compartments = {}
465/4:
model.compartments = {"l": "the large compartment"}
print(model.compartments)

model.compartments = {"m": "the medium compartment", "s": "the small compartment"}
print(model.compartments)
465/5:
def volumes_filter(udef):
    if list(filter(lambda u: u.kind in ["liter","litre"], udef.list_of_units)):
        return True
    return False
print(model.units.query(volumes_filter))
465/6:
mass_config = MassConfiguration()
print(mass_config.exclude_compartment_volumes_in_rates)
465/7: print(model.reactions.get_by_id("R2_X").rate)
465/8:
mass_config.exclude_compartment_volumes_in_rates = False
print(model.reactions.get_by_id("R2_X").rate)
465/9:
for param in model.reactions.get_by_id("R_Ytr").rate.atoms(sym.Symbol):
    if str(param).find("volume") != -1:
        print(param)
465/10:
x1_b = model.reactions.get_by_id("SK_x1_l").boundary_metabolite
x1_b
465/11: print(model.reactions.get_by_id("R_Ytr").boundary_metabolite)
465/12:
model.boundary_conditions[x1_b] = 2
model.boundary_conditions
465/13:
print("Before: {0}\n{1}".format(mass_config.boundary_compartment, model.boundary_metabolites))
mass_config.boundary_compartment = {"xt": "External compartment"}
print("\nAfter: {0}\n{1}".format(mass_config.boundary_compartment, model.boundary_metabolites))
465/14:
for r in model.sinks:
    print("{0}: {1}".format(r.id, r.get_mass_action_rate()))
model.compartments = {"xt": "External compartment"}
model.compartments
465/15:
for r in model.reactions.get_by_any(["SK_x1_l", "SK_y1_m", "SK_z1_s"]):
    model.add_custom_rate(r, custom_rate=r.kf_str)
    print("{0}: {1}".format(r.id, r.rate))
465/16:
def volume_filter(parameter):
    if str(parameter).startswith("volume"):
        return True
    return False

for vol_id in filter(volume_filter, model.custom_parameters):
    print("{0}: {1}".format(vol_id, model.custom_parameters[vol_id]))
465/17:
# Set the large compartment volume to 15 
model.custom_parameters["volume_l"] = 15

# Double current medium compartment volume
model.custom_parameters["volume_m"] = model.custom_parameters["volume_m"] * 2

# 10% decrease to current small compartment volume
model.custom_parameters["volume_s"] = model.custom_parameters["volume_s"] * (1 + (-10/100))

for vol_id in filter(volume_filter, model.custom_parameters):
    print("{0}: {1}".format(vol_id, model.custom_parameters[vol_id]))
465/18:
# Ensure compartments are active and boundary compartment is reset
mass_config.exclude_compartment_volumes_in_rates = False
mass_config.boundary_compartment = {'b': 'boundary'}

# Start with a fresh model, checking to ensure compartment volumes are reset
model = create_example_model("MultiCompartment")
for vol_id in filter(volume_filter, model.custom_parameters):
    print("{0}: {1}".format(vol_id, model.custom_parameters[vol_id]))
465/19:
simulation = Simulation(model, verbose=True)
conc_sol = simulation.simulate(model, time=(0, 1000))[0]
plot_time_profile(conc_sol, plot_function="loglog", legend="right outside")
467/1:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
467/2:
from cobra import Configuration

config = Configuration()
config.solver = "gurobi"
config
467/3:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
467/4:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
467/5:
from corda import test_model

mod = test_model()
len(mod.reactions)
467/6: mod.reactions[59].reaction
467/7:
conf = {}
for r in mod.reactions: conf[r.id] = -1
conf["r60"] = 3
467/8:
from corda import CORDA

opt = CORDA(mod, conf)
opt.build()
print(opt)
467/9: print([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
467/10:
opt = CORDA(mod, conf, met_prod="pep")
opt.build()
print(opt)
467/11:
rec = opt.cobra_model("plus_pep")
use = rec.metabolites.pep.reactions
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
for r in use: print(r.reaction)
467/12:
opt = CORDA(mod, conf, met_prod="pep", n=1)
opt.build()

rec_min = opt.cobra_model("plus_pep_nored")
print("used", len(rec_min.reactions), "reactions")
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
use = rec_min.metabolites.pep.reactions
for r in use: print(r.reaction)
468/1:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
469/1:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
469/2:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
467/13:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
469/3:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config

from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
470/1:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
470/2:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
470/3:
from corda import test_model

mod = test_model()
len(mod.reactions)
470/4: mod.reactions[59].reaction
470/5:
conf = {}
for r in mod.reactions: conf[r.id] = -1
conf["r60"] = 3
470/6:
from corda import CORDA

opt = CORDA(mod, conf)
opt.build()
print(opt)
470/7: print([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
470/8:
opt = CORDA(mod, conf, met_prod="pep")
opt.build()
print(opt)
470/9:
rec = opt.cobra_model("plus_pep")
use = rec.metabolites.pep.reactions
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
for r in use: print(r.reaction)
470/10:
opt = CORDA(mod, conf, met_prod="pep", n=1)
opt.build()

rec_min = opt.cobra_model("plus_pep_nored")
print("used", len(rec_min.reactions), "reactions")
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
use = rec_min.metabolites.pep.reactions
for r in use: print(r.reaction)
469/4:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
from corda import reaction_confidence
from cobra import Reaction
469/5:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
469/6:
from corda import reaction_confidence
from cobra import Reaction
470/11:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
469/7:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
470/12:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
469/8:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
469/9:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
470/13:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
471/1:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
471/2:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
471/3:
from corda import test_model

mod = test_model()
len(mod.reactions)
471/4: mod.reactions[59].reaction
471/5:
conf = {}
for r in mod.reactions: conf[r.id] = -1
conf["r60"] = 3
471/6:
from corda import CORDA

opt = CORDA(mod, conf)
opt.build()
print(opt)
471/7: print([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
471/8:
opt = CORDA(mod, conf, met_prod="pep")
opt.build()
print(opt)
471/9:
rec = opt.cobra_model("plus_pep")
use = rec.metabolites.pep.reactions
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
for r in use: print(r.reaction)
471/10:
opt = CORDA(mod, conf, met_prod="pep", n=1)
opt.build()

rec_min = opt.cobra_model("plus_pep_nored")
print("used", len(rec_min.reactions), "reactions")
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
use = rec_min.metabolites.pep.reactions
for r in use: print(r.reaction)
469/10:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
472/1:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
472/2:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
471/11:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene 5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene 5 gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
471/12:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene5 gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
471/13:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
471/14:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene3"

reaction_confidence(rxn, gene_conf)
471/15:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5"

reaction_confidence(rxn, gene_conf)
471/16:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene 1"

reaction_confidence(rxn, gene_conf)
471/17:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene1"

reaction_confidence(rxn, gene_conf)
472/3: from corda import CORDA
472/4:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
472/5:
from corda import CORDA
from corda import reaction_confidence
472/6:
from corda import CORDA
from corda import reaction_confidence
472/7:
from corda import CORDA
from corda import reaction_confidence
472/8:
from cobra import Configuration

from cobra import Recon3d

config = Configuration()
config.solver = "glpk"
config
472/9:
from cobra import Configuration

from cobra import Recon3D.xml

config = Configuration()
config.solver = "glpk"
config
473/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
472/10:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
474/1:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
474/2:
from cobra import Configuration
config = Configuration()
config.solver = "glpk"
config
474/3:
from corda import CORDA
from corda import reaction_confidence
474/4:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
time Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
474/5:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
Recon3DModel_301 = load_matlab_model(filePath) # load Recon3D model (this takes really long!!)
473/2:
from pathlib import Path
import cobra
from cobra.io import load_matlab_model, save_matlab_model
import logging

modelName = 'Recon3DModel_301.mat' # filename Recon3D model

folderPath = Path('.') / 'Recon3D_model' 
folderPath = folderPath.resolve() # filepath Recon3D model
filePath = Path('.') / 'Recon3D_model' / modelName
filePath = filePath.resolve() # filepath Recon3D model
473/3: filePath
474/6:

from corda import reaction_confidence
475/1:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
475/2:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene1"

reaction_confidence(rxn, gene_conf)
475/3:
from corda import test_model

mod = test_model()
len(mod.reactions)
475/4: mod.reactions[59].reaction
475/5:
conf = {}
for r in mod.reactions: conf[r.id] = -1
conf["r60"] = 3
475/6:
from corda import CORDA

opt = CORDA(mod, conf)
opt.build()
print(opt)
475/7: print([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
475/8:
opt = CORDA(mod, conf, met_prod="pep")
opt.build()
print(opt)
475/9:
rec = opt.cobra_model("plus_pep")
use = rec.metabolites.pep.reactions
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
for r in use: print(r.reaction)
475/10:
opt = CORDA(mod, conf, met_prod="pep", n=1)
opt.build()

rec_min = opt.cobra_model("plus_pep_nored")
print("used", len(rec_min.reactions), "reactions")
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
use = rec_min.metabolites.pep.reactions
for r in use: print(r.reaction)
476/1:
from cobra import Configuration
config = Configuration()
config.solver = "glpk"
config
476/2:

from corda import reaction_confidence
477/1:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene1"

reaction_confidence(rxn, gene_conf)
478/1:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
478/2:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene1"

reaction_confidence(rxn, gene_conf)
476/3: from cobra import Reaction
476/4: from corda import reaction_confidence
476/5: import corda
479/1:
from cobra import Configuration
config = Configuration()
config.solver = "glpk"
config
479/2: from cobra import Reaction
479/3: import corda
479/4: from corda import reaction_confidence
483/1:
from cobra import Configuration
config = Configuration()
config.solver = "glpk"
config
483/2: from cobra import Reaction
483/3: import corda
483/4: from corda import reaction_confidence
483/5:

from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
484/1:
from cobra import Configuration
config = Configuration()
config.solver = "glpk"
config
484/2: from cobra import Reaction
484/3: import corda
484/4: from corda import reaction_confidence
484/5:

from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4)"

reaction_confidence(rxn, gene_conf)
484/6:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
484/7:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene1"

reaction_confidence(rxn, gene_conf)
484/8: mod.reactions[59].reaction
484/9:
from corda import test_model

mod = test_model()
len(mod.reactions)
484/10: mod.reactions[59].reaction
484/11:
conf = {}
for r in mod.reactions: conf[r.id] = -1
conf["r60"] = 3
484/12:
from corda import CORDA

opt = CORDA(mod, conf)
opt.build()
print(opt)
484/13: mod
484/14: time Recon3DModel_301 = load_matlab_model('C:/Users/prins/git/COBRA_project_SP/Recon3D_model/Recon3DModel_301.mat') # load Recon3D model (this takes really long!!)
484/15:
from cobra.io import load_matlab_model, save_matlab_model
time Recon3DModel_301 = load_matlab_model('C:/Users/prins/git/COBRA_project_SP/Recon3D_model/Recon3DModel_301.mat') # load Recon3D model (this takes really long!!)
484/16:
from cobra.io import load_matlab_model, save_matlab_model
 Recon3DModel_301 = load_matlab_model('C:/Users/prins/git/COBRA_project_SP/Recon3D_model/Recon3DModel_301.mat') # load Recon3D model (this takes really long!!)
484/17:
from cobra.io import load_matlab_model, save_matlab_model
Recon3DModel_301 = load_matlab_model('C:/Users/prins/git/COBRA_project_SP/Recon3D_model/Recon3DModel_301.mat') # load Recon3D model (this takes really long!!)
484/18:
from cobra.io import load_matlab_model, save_matlab_model
Recon3DModel_301 = load_matlab_model('C:/Users/prins/git/COBRA_project_SP/Recon3DModel_301.mat') # load Recon3D model (this takes really long!!)
484/19:
from cobra.io import load_matlab_model, save_matlab_model
Recon3DModel_301 = load_matlab_model('git/COBRA_project_SP/data/Recon3D_model/Recon3DModel_301_patch.mat') # load Recon3D model (this takes really long!!)
484/20:
from cobra.io import load_matlab_model, save_matlab_model
Recon3DModel_301 = load_matlab_model('C:/Users/prins/git/COBRA_project_SP/data/Recon3D_model/Recon3DModel_301_patch.mat') # load Recon3D model (this takes really long!!)
484/21:
from cobra.io import load_matlab_model, save_matlab_model
Recon3DModel_301 = load_matlab_model('C:/Users/prins/git/COBRA_project_SP/data/Recon3D_model/Recon3DModel_301_patch.mat') # load Recon3D model (this takes really long!!)
484/22:
opt = CORDA(Recon3DModel_301, conf)
opt.build()
print(opt)
484/23:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
484/24:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf
484/25:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.reactions[1]
484/26:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.reactions[1].stoichiometry
484/27:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.reactions[1].stochiometry
484/28:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.reactions[1]
484/29:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

dir(Recon3DModel_301.reactions[1])
484/30:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

dir(Recon3DModel_301.reactions[1].metabolites)
484/31:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.reactions[1].metabolites
484/32:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.reactions[1].metabolites.get
484/33:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.reactions[1].metabolites
484/34:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

model.metabolites.get_by_id("atp[c]")
484/35:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
484/36:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites.get_by_id("atp[m]")
484/37:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites.get_by_name("Adenosine Triphosphate")
484/38:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites.get_by_id("Adenosine Triphosphate")
484/39:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites.get_by_id("atp[c]")
484/40:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites[1]
484/41:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites[1].name
484/42: Recon3DModel_301.metabolitesp[1].name
484/43: Recon3DModel_301.metabolites[1].name
484/44:
Recon3DModel_301.metabolites[1].name
Recon3DModel_301.metabolites.get_by_id("atp[c]")
484/45:
Recon3DModel_301.metabolites[1].name
Recon3DModel_301.metabolites.get_by_id("atp[c]").reactions
484/46:
Recon3DModel_301.metabolites[1].name
Recon3DModel_301.metabolites.get_by_id("atp[l]").reactions
484/47:
Recon3DModel_301.metabolites[1].name
list(Recon3DModel_301.metabolites.get_by_id("atp[l]").reactions)
484/48:
Recon3DModel_301.metabolites[1].name
list(Recon3DModel_301.metabolites.get_by_id("atp[l]").reactions)[1]
484/49:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites.get_by_id("atp[c]")

for m in Recon3DModel_301.metabolites:
    if m.name == 'Adenosine Triphosphate':
        for r in m.reactions: conf[r.id] = 3
484/50:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")
Recon3DModel_301.metabolites.get_by_id("atp[c]")

for m in Recon3DModel_301.metabolites:
    if m.name == 'Adenosine Triphosphate':
        for r in m.reactions: conf[r.id] = 3

conf
484/51: Recon3DModel_301.metabolites.get_by_id("1MNCAMti")
484/52: Recon3DModel_301.reactions.get_by_id("1MNCAMti")
484/53:
conf = {}
for r in Recon3DModel_301.reactions: conf[r.id] = -1
conf

Recon3DModel_301.metabolites.get_by_id("atp[c]")


for m in Recon3DModel_301.metabolites:
    if m.name == 'Adenosine Triphosphate':
        for r in m.reactions: conf[r.id] = 3
484/54:
opt = CORDA(Recon3DModel_301, conf)
opt.build()
print(opt)
484/55: opt
484/56: print([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
484/57: opt.model
484/58: opt.Recon3DModel_301
484/59: opt.model
484/60: import escher
484/61: opt.model.reactions[1]
484/62: opt.model.reactions[2]
484/63: opt.model.reactions[4]
484/64: opt.model.reactions[6]
484/65: opt.model.reactions[67]
484/66: from cobra.io import save_json_model
484/67:
from cobra.io import save_json_model
save_json_model(opt.model, "Recon3DModel_301_ATPreactions.json")
484/68:
from cobra.io import save_json_model
save_json_model(opt.model, "Recon3DModel_301_ATPreactions.json")
484/69:
from cobra.io import save_json_model
save_json_model(opt.model, "Recon3DModel_301_ATPreactions.json")
save_json_model(Recon3DModel_301, "Recon3DModel_301.json")
484/70: ([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
484/71: Recon3DModel_301
484/72: benchmark(Recon3DModel_301)
484/73:
from corda import benchmark
benchmark(Recon3DModel_301)
484/74: opt
484/75: dir(opt)
484/76: print(opt)
484/77: opt
484/78: dir(opt)
484/79: opt.redundancies()
484/80: opt.support()
484/81: dir(opt)
484/82:
dir(opt)
opt.included()
484/83:
dir(opt)
opt.model()
484/84:
dir(opt)
opt.model
484/85:
dir(opt)
opt.redundancies
484/86:
dir(opt)
opt.included
484/87:
dir(opt)
length(opt.included)
484/88:
dir(opt)
opt.included
484/89:
dir(opt)
dir(opt.included)
484/90:
dir(opt)
opt.cobra_model
484/91:
dir(opt)
opt.cobra_model.model
484/92:
dir(opt)
opt.cobra_model
484/93:
dir(opt)
dir(opt.cobra_model)
484/94:
dir(opt)
opt.cobra_model
484/95:
from corda import test_model

mod = test_model()
len(mod.reactions)
484/96: mod
484/97:
conf = {}
for r in mod.reactions: conf[r.id] = -1
conf["r60"] = 3
484/98:
from corda import CORDA

opt = CORDA(mod, conf)
opt.build()
print(opt)
484/99: opt.mod
484/100: opt
484/101: opt.model
484/102: opt_model=opt.build()
484/103: opt
484/104: dir(opt)
484/105: opt.tflux
484/106: opt.redundancies
484/107: opt.included
484/108: print([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
484/109: ([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
492/1:
import pandas as pd
df = pd.read_excel('C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
492/2:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
493/1:
import pandas as pd
df = pd.read_excel('C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
493/2:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
493/3:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
df
493/4: df.MeanExpression_SchwannCells_1__VoigtEtAl2019_
493/5: df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean()
493/6: df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median()
493/7:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
493/8:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.summary())
493/9:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
493/10: matplotlib.pyplot.boxplot(df)
493/11:
import matplotlib
matplotlib.pyplot.boxplot(df)
501/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
df
501/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
501/3:
import matplotlib
matplotlib.pyplot.boxplot(df)
501/4:
import matplotlib
 import matplotlib.pyplot
matplotlib.pyplot.boxplot(df)
501/5:
import matplotlib
import matplotlib.pyplot
matplotlib.pyplot.boxplot(df)
501/6:
import matplotlib
import matplotlib.pyplot
matplotlib.pyplot.boxplot(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_)
501/7:
import matplotlib
import matplotlib.pyplot
import numpy as np
matplotlib.pyplot.boxplot(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_)
np.df.MeanExpression_SchwannCells_1__VoigtEtAl2019_
501/8:
import matplotlib
import matplotlib.pyplot
matplotlib.pyplot.boxplot(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_)
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_
501/9:
import matplotlib
import matplotlib.pyplot
matplotlib.pyplot.boxplot(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_)
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.type()
501/10:
import matplotlib
import matplotlib.pyplot
matplotlib.pyplot.boxplot(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_)
type(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_)
501/11:
import matplotlib
import matplotlib.pyplot
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot()
501/12:
import matplotlib
import matplotlib.pyplot
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot().box
501/13:
import matplotlib
import matplotlib.pyplot
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot().box()
501/14:
import matplotlib
import matplotlib.pyplot
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box()
501/15:
import matplotlib
import matplotlib.pyplot
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.log.plot.box()
501/16:
import matplotlib
import matplotlib.pyplot
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box()
501/17:
import matplotlib
import matplotlib.pyplot
df.plot.box()
501/18:
import matplotlib
import matplotlib.pyplot
df.plot.box()
plt.xticks(rotation=90)
501/19:
import matplotlib
import matplotlib.pyplot
plt = df.plot.box()
plt.xticks(rotation=90)
501/20:
import matplotlib
import matplotlib.pyplot
df.plot.box()
plt.xticks(x, labels, rotation='vertical')
501/21:
import matplotlib
import matplotlib.pyplot
dir(df.plot.box())
501/22:
import matplotlib
import matplotlib.pyplot
dir(df.plot.box().loglog)
501/23:
import matplotlib
import matplotlib.pyplot
(df.plot.box().loglog)
501/24:
import matplotlib
import matplotlib.pyplot
(df.plot.box().loglog)
matplotlib(x, labels, rotation='vertical')
501/25:
import matplotlib
import matplotlib.pyplot
(df.plot.box().loglog)
matplotlib.xlabels(x, labels, rotation='vertical')
501/26:
import matplotlib
import matplotlib.pyplot
(df.plot.box().loglog)
matplotlib.xticks(x, labels, rotation='vertical')
501/27:
import matplotlib
import matplotlib.pyplot
import matplotlib.xticks
(df.plot.box().loglog)
matplotlib.xticks(x, labels, rotation='vertical')
501/28:
import matplotlib
import matplotlib.pyplot
(df.plot.box().loglog)
matplotlib.pyplot.xticks(x, labels, rotation='vertical')
501/29:
import matplotlib
import matplotlib.pyplot
(df.plot.box().loglog)
matplotlib.pyplot.xticks(labels, rotation='vertical')
501/30:
import matplotlib
import matplotlib.pyplot
(df.plot.box().loglog)
matplotlib.pyplot.xticks(rotation='vertical')
501/31:
import matplotlib
import matplotlib.pyplot
(df.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')
501/32: type(df)
501/33:
type(df)
import numpy as np
df['lognorm'] = np.log(df)
501/34:
type(df)
import numpy as np
df
501/35:
type(df)
import numpy as np
df+.001
501/36:
type(df)
import numpy as np
df
501/37:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')
501/38:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')
np.df.MeanExpression_SchwannCells_1__VoigtEtAl2019_
501/39:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')
df.MeanExpression_SchwannCells_1__VoigtEtAl2019_
501/40:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')
type(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_)
501/41:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')

df = pd.DataFrame(np.random.uniform(-1,1,(10,1)))
df['norm'] = (1+df[0])/2 # (-1,1] -> (0,1]
df['lognorm'] = np.log(df['norm'])
501/42:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')

df = pd.DataFrame(np.random.uniform(-1,1,(10,1)))
df['norm'] = (1+df[0])/2 # (-1,1] -> (0,1]
df['lognorm'] = np.log(df['norm'])
df
501/43:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')

df = pd.DataFrame(np.random.uniform(-1,1,(10,1)))
df['norm'] = (1+df[0])/2 # (-1,1] -> (0,1]
df['lognorm'] = np.log(df['norm'])
501/44:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')
501/45:

df = pd.DataFrame(np.random.uniform(-1,1,(10,1)))
df['norm'] = (1+df[0])/2 # (-1,1] -> (0,1]
df['lognorm'] = np.log(df['norm'])
501/46:

df = pd.DataFrame(np.random.uniform(-1,1,(10,1)))
df['norm'] = (1+df[0])/2 # (-1,1] -> (0,1]
df['lognorm'] = np.log(df['norm'])
df
502/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
df
502/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
502/3:
type(df)
import numpy as np
df
502/4:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')
502/5:

df2 = pd.DataFrame(np.random.uniform(-1,1,(10,1)))
df2['norm'] = (1+df2[0])/2 # (-1,1] -> (0,1]
df2['lognorm'] = np.log(df2['norm'])
df2
502/6:
df2 = pd.DataFrame(np.random.uniform(-1,1,(10,1)))
df2['norm'] = (1+df2[0])/2 # (-1,1] -> (0,1]
df2['lognorm'] = np.log(df2['norm'])
df2

(df2.plot.box())
matplotlib.pyplot.xticks(rotation='vertical')
502/7: df[0]
502/8: (1+df[0])/2
502/9: (1+df[0])/2)
502/10: (1+df2[0])/2
502/11: df2[0]
502/12: df2
502/13: df2[0]
502/14:
import matplotlib
import matplotlib.pyplot
(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.plot.box())
df['norm_MeanExpression_SchwannCells_1__VoigtEtAl2019_'] = (1+df['MeanExpression_SchwannCells_1__VoigtEtAl2019_'])/2 # (-1,1] -> (0,1]
df2['lognorm'] = np.log(df2['norm'])
df2
matplotlib.pyplot.xticks(rotation='vertical')
502/15: df
502/16: df[2:]
502/17: df[,2:]
502/18: df[2:]
502/19: df[][2:]
502/20: df.head
502/21: df.head()
502/22: df.iloc(1,1)
502/23: df.iloc[1][2]
502/24: df.iloc[1][2:]
502/25: df.iloc[:][2:]
502/26: df.iloc[:][3:]
502/27: df.iloc[2:][1]
502/28: df.iloc[2:3][1]
502/29: df.iloc[2:3][1:3]
502/30: df.iloc[1][:]
502/31: df.iloc[0][:]
502/32: df.columns
502/33: df.columns[3:]
502/34: df.columns[2:]
502/35: df.columns[1:]
502/36: df.columns[2:]
502/37:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
502/38:
type(df)
import numpy as np
df.conditions[1]
502/39:
type(df)
import numpy as np
df[conditions[1]]
502/40:
type(df)
import numpy as np
df[conditions[1]]
conditions[1]
502/41: [df[c] for c in conditions]
502/42: [df[c]+.000001 for c in conditions]
502/43: [df[c]+.0000000001 for c in conditions]
502/44: [df[c] for c in conditions]
502/45:
[df[c] for c in conditions]
df[conditions[0]]
502/46:
[df[c] for c in conditions]
df[conditions[0]]+1
502/47:
[df[c] for c in conditions]
df[conditions[0]]+.1
502/48:
[df[c] for c in conditions]
df[conditions[0]]+.000001
502/49: [df[c]+.000001 for c in conditions]
502/50: df_norm = [df[c]+.000001 for c in conditions]
502/51:
df_norm = [df[c]+.000001 for c in conditions]
df_norm
502/52:
df_norm = [df[c]+.000001 for c in conditions]
df_norm[1]
502/53:
df_norm = [df[c]+.000001 for c in conditions]
df_norm[2]
502/54:
df_norm = [df[c]+.000001 for c in conditions]
df_norm[2].log()
502/55:
df_norm = [df[c]+.000001 for c in conditions]
df_norm[2]
502/56:
df_norm = [df[c]+.000001 for c in conditions]
np.df_norm[2]
502/57:
df_norm = [df[c]+.000001 for c in conditions]
df_norm[2]
502/58:
df_norm = [df[c]+.000001 for c in conditions]
type(df_norm[2])
502/59:
df_norm = [df[c]+.000001 for c in conditions]
np.log(df_norm[2])
502/60:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = np.log(df_norm[2])
matplotlib.pyplot.xticks(rotation='vertical')
(df.df_log.plot.box())
502/61:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = np.log(df_norm[2])
df.df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
502/62:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = np.log(df_norm[2])
df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
502/63:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = [np.log(df_norm[c]) for c in conditions]
df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
502/64: df_norm[conditions[1]]
502/65: df_norm
502/66: df_norm[1]
502/67: conditions
502/68: conditions[1]
502/69: df_norm[conditions[1]]
502/70: df[conditions[1]]
502/71: type(df)
502/72: type(df_norm)
502/73:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = [np.log(df_norm[c]) for c in conditions]
pd.DataFrame(df_log)
df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
502/74:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = [np.log(df_norm[c]) for c in conditions]
pd.DataFrame(df_log,conditions)
df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
502/75:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = [np.log(df_norm[c]) for c in conditions]
pd.DataFrame(df_log,columns = conditions)
df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
502/76:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = [np.log(df_norm[c]) for c in conditions]
pd.DataFrame(df_norm)
df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
502/77:
df_norm = [df[c]+.000001 for c in conditions]
df_log  = [np.log(df_norm[c]) for c in conditions]

df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
502/78:
type(df_norm)
pd.DataFrame(df_norm)
502/79:
type(df_norm)
pd.DataFrame(df_norm')
502/80:
type(df_norm)
pd.DataFrame(df_norm)
502/81:
type(df_norm)
pd.DataFrame(df_norm)
df_norm[1]
502/82:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
502/83: df_norm = [df[c+'_norm']+.000001 for c in conditions]
502/84:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
[df[c+'_norm']=df[c]+.000001 for c in conditions]
502/85:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
[df[c+'_norm']==df[c]+.000001 for c in conditions]
502/86:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
[df[c]+.000001 for c in conditions]
502/87:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
[df=df[c]+.000001 for c in conditions]
502/88:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
[df:=df[c]+.000001 for c in conditions]
502/89:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
[df[c]+.000001 for c in conditions]
502/90:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
[df[c]+.000001 for c in conditions]
503/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
503/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
503/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
503/4:
type(df_norm)
pd.DataFrame(df_norm)
df_norm
[df[c]+.000001 for c in conditions]
503/5:
for c in conditions:
    df[c+'_nonzero']=df[c]+.000001
503/6:
for c in conditions:
    df[c+'_nonzero']=df[c]+.000001
df
503/7: df[conditions[1]+'_nonzero']
503/8: df[conditions[1]+'_nonzero'].log()
504/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
504/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
504/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
504/4:
for c in conditions:
    df[c+'_nonzero']=df[c]+.000001
    df[c+'_log']=df[+'_nonzero']
df
504/5:
for c in conditions:
    df[c+'_nonzero']=df[c]+.000001
df
505/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
505/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
505/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
505/4:
for c in conditions:
    df[c+'_nonzero']=df[c]+.000001
    df[c+'_log']=np.log(df[c+'_nonzero'])
df
505/5:
for conditions:
    
df_norm = [df[c+'_norm']+.000001 for c in conditions]
df_log  = [np.log(df_norm[c]) for c in conditions]

df_log.plot.box()
matplotlib.pyplot.xticks(rotation='vertical')
505/6:
for c in conditions:
    df[c+'_log'].plot.box()
    matplotlib.pyplot.xticks(rotation='vertical')
505/7:
for c in conditions:
    df[c+'_log'].plot.box()
    matplotlib.pyplot.xticks(rotation='vertical')
505/8:
# First create some toy data:
x = np.linspace(0, 2*np.pi, 400)
y = np.sin(x**2)

# Create just a figure and only one subplot
fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_title('Simple plot')

# Create two subplots and unpack the output array immediately
f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
ax1.plot(x, y)
ax1.set_title('Sharing Y axis')
ax2.scatter(x, y)

# Create four polar axes and access them through the returned array
fig, axs = plt.subplots(2, 2, subplot_kw=dict(projection="polar"))
axs[0, 0].plot(x, y)
axs[1, 1].scatter(x, y)

# Share a X axis with each column of subplots
plt.subplots(2, 2, sharex='col')

# Share a Y axis with each row of subplots
plt.subplots(2, 2, sharey='row')

# Share both X and Y axes with all subplots
plt.subplots(2, 2, sharex='all', sharey='all')

# Note that this is the same as
plt.subplots(2, 2, sharex=True, sharey=True)

# Create figure number 10 with a single subplot
# and clears it if it already exists.
fig, ax = plt.subplots(num=10, clear=True)
505/9:
import matplotlib.pyplot as plt
# First create some toy data:
x = np.linspace(0, 2*np.pi, 400)
y = np.sin(x**2)

# Create just a figure and only one subplot
fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_title('Simple plot')

# Create two subplots and unpack the output array immediately
f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
ax1.plot(x, y)
ax1.set_title('Sharing Y axis')
ax2.scatter(x, y)

# Create four polar axes and access them through the returned array
fig, axs = plt.subplots(2, 2, subplot_kw=dict(projection="polar"))
axs[0, 0].plot(x, y)
axs[1, 1].scatter(x, y)

# Share a X axis with each column of subplots
plt.subplots(2, 2, sharex='col')

# Share a Y axis with each row of subplots
plt.subplots(2, 2, sharey='row')

# Share both X and Y axes with all subplots
plt.subplots(2, 2, sharex='all', sharey='all')

# Note that this is the same as
plt.subplots(2, 2, sharex=True, sharey=True)

# Create figure number 10 with a single subplot
# and clears it if it already exists.
fig, ax = plt.subplots(num=10, clear=True)
505/10:
import matplotlib.pyplot as plt
for c in conditions:
    df[c+'_log'].plot.box()
    fig, plt.xticks(rotation='vertical')
505/11:
import matplotlib.pyplot as plt
for c in conditions:
    fig, df[c+'_log'].plot.box()
    plt.xticks(rotation='vertical')
505/12:
import matplotlib.pyplot as plt
for c in conditions:
    fig, plt.df[c+'_log'].plot.box()
    plt.xticks(rotation='vertical')
505/13:
import matplotlib.pyplot as plt
for c in conditions:
    fig, df[c+'_log'].plot.box()
    plt.xticks(rotation='vertical')
505/14:
import matplotlib.pyplot as plt
for c in conditions:
    df[c+'_log'].plot.box()
    plt.xticks(rotation='vertical')
505/15:
import matplotlib.pyplot 
for c in conditions:
    df[c+'_log'].plot.box()
    matplotlib.pyplot.xticks(rotation='vertical')
506/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
506/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
506/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
506/4:
for c in conditions:
    df[c+'_nonzero']=df[c]+.000001
    df[c+'_log']=np.log(df[c+'_nonzero'])
df
506/5:
import matplotlib.pyplot 
for c in conditions:
    df[c+'_log'].plot.box()
    matplotlib.pyplot.xticks(rotation='vertical')
506/6:
import matplotlib.pyplot 
for c in conditions:
    df[c+'_log'].plot.box()
506/7: df[conditions[0]+'_log'].plot.box()
506/8:
for c in conditions:
    df[c+'_log'].plot.box()
506/9:
for c in conditions:
    fig,df[c+'_log'].plot.box()
506/10:
for c in conditions:
    df[c+'_log'].plot.box()
    plt.subplots()
506/11:
import matplotlib.pyplot  as plt
for c in conditions:
    df[c+'_log'].plot.box()
    plt.subplots()
506/12:
import matplotlib.pyplot  as plt

fig, axs = plt.subplots(nrows=3, ncols=2)
for c in conditions:
    df[c+'_log'].plot.box()
    plt.subplots()
506/13:
import matplotlib.pyplot  as plt

fig, axs = plt.subplots(nrows=3, ncols=2)
subplot_n = 0
for c in conditions:
    df[c+'_log'].plot.box()
    plt.subplots(subplot_n)
    subplot_n+1
506/14:
import matplotlib.pyplot  as plt

fig, axs = plt.subplots(nrows=3, ncols=2)
subplot_n = 0
for c in conditions:
    df[c+'_log'].plot.box()
    plt.subplots(subplot_n)
    subplot_n= subplot_n+1
506/15:
import matplotlib.pyplot  as plt

fig, axs = plt.subplots(nrows=10, ncols=1)
subplot_n = 0
for c in conditions:
    df[c+'_log'].plot.box()
    plt.subplots(subplot_n)
    subplot_n= subplot_n+1
506/16:
import matplotlib.pyplot  as plt

fig, axs = plt.subplots(nrows=10, ncols=1)
subplot_n = 0
for c in conditions:
    df[c+'_log'].plot.box()
    plt.subplots(subplot_n,1)
    subplot_n= subplot_n+1
506/17:
import matplotlib.pyplot  as plt

fig, axs = plt.subplots(nrows=1, ncols=10)
subplot_n = 0
for c in conditions:
    df[c+'_log'].plot.box()
    plt.subplots(subplot_n,1)
    subplot_n= subplot_n+1
506/18:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, ticker in enumerate(tickers):
    # add a new subplot iteratively
    ax = plt.subplot(3, 2, n + 1)

    # filter df and plot ticker on the new subplot axis
    df[df["ticker"] == ticker].plot(ax=ax)

    # chart formatting
    ax.set_title(ticker.upper())
    ax.get_legend().remove()
    ax.set_xlabel("")
506/19:
# library to get stock data
import ffn

# load daily stock prices for selected stocks from ffn
tickers = ["aapl", "msft", "tsla", "nvda", "intc"]
prices = ffn.get(tickers, start="2017-01-01")

# convert data into a 'long' table for this plotting exercise
df = prices.melt(ignore_index=False, var_name="ticker", value_name="closing_price")
df.head()


plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, ticker in enumerate(tickers):
    # add a new subplot iteratively
    ax = plt.subplot(3, 2, n + 1)

    # filter df and plot ticker on the new subplot axis
    df[df["ticker"] == ticker].plot(ax=ax)

    # chart formatting
    ax.set_title(ticker.upper())
    ax.get_legend().remove()
    ax.set_xlabel("")
506/20: n, ticker in enumerate(tickers)
506/21:
for n, ticker in enumerate(tickers):
    n
506/22:
for n, conditions in enumerate(tickers):
    n
506/23:
for n, conditions in enumerate(conditions):
    n
506/24:
for n, conditions in enumerate(conditions):
    n
    conditions
506/25:
for n, conditions in enumerate(conditions):
    print(n)
506/26:
for n, conditions in enumerate(conditions):
    print(n)
    print(conditions)
506/27:  enumerate(conditions)
506/28: list(enumerate(conditions))
506/29: print(enumerate(conditions))
506/30: conditions
506/31: conditions = df.columns[2:]
506/32:
conditions = df.columns[2:]
conditons
506/33:
conditions = df.columns[2:]
conditions
506/34: conditions = df.columns[2:]
506/35:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    # add a new subplot iteratively
    ax = plt.subplot(3, 2, n + 1)

    # filter df and plot ticker on the new subplot axis
    df[df[] == c].plot(ax=ax)

    # chart formatting
    ax.set_title(ticker.upper())
    ax.get_legend().remove()
    ax.set_xlabel("")
506/36:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    # add a new subplot iteratively
    ax = plt.subplot(3, 2, n + 1)

    # filter df and plot ticker on the new subplot axis
    df[df[c]].plot(ax=ax)
506/37:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    # add a new subplot iteratively
    ax = plt.subplot(3, 2, n + 1)

    # filter df and plot ticker on the new subplot axis
    df[c].plot(ax=ax)
506/38:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    # add a new subplot iteratively
    ax = plt.subplot(3, 2, n + 1)

    # filter df and plot ticker on the new subplot axis
    df[c].plot()
506/39:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    # add a new subplot iteratively
    ax = plt.subplot(3, 2, n + 1)

    # filter df and plot ticker on the new subplot axis
    df[c].plot.box()
506/40:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    # add a new subplot iteratively
    ax = plt.subplot(2, 12, n + 1)

    # filter df and plot ticker on the new subplot axis
    df[c].plot.box()
506/41:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=0.5)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    ax = plt.subplot(2, 12, n + 1)
    df[c].plot.box()
    plt.xticks(rotation='vertical')
506/42:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=1)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    ax = plt.subplot(2, 12, n + 1)
    df[c].plot.box()
    plt.xticks(rotation='vertical')
506/43:
plt.figure(figsize=(15, 12))
plt.subplots_adjust(hspace=1)
plt.suptitle("Daily closing prices", fontsize=18, y=0.95)

# loop through the length of tickers and keep track of index
for n, c in enumerate(conditions):
    ax = plt.subplot(2, 12, n + 1)
    df[c].plot.box()
    plt.xticks(rotation='vertical')
    
df.groupby(conditions).plot()
506/44: conditions
507/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
507/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
507/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
507/4:
for c in conditions:
    df_non_zero[c]=df[c]+.000001
    df_log[c]=np.log(df_non_zero[c+'_nonzero'])
df
507/5:
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.000001
    df_log[c]=np.log(df_non_zero[c+'_nonzero'])
df
507/6:
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.000001
    df_log[c]=np.log(df_non_zero[c])
df
507/7:
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.000001
    df_log[c]=np.log(df_non_zero[c])
df_log
507/8:
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot().box
507/9:
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
507/10:
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
507/11:
import matplotlib.pyplot  as plt

df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
507/12:
df.plot.box()
plt.xticks(rotation='vertical')
507/13:
df_log.plot.box()
plt.xticks(rotation='vertical')
plt.xlim([25, 50])
507/14:
df_log.plot.box()
plt.xticks(rotation='vertical')
plt.xlim([50])
507/15:
df_log.plot.box()
plt.xticks(rotation='vertical')
plt.xlim([0,50])
507/16:
df.plot.box()
plt.xticks(rotation='vertical')
plt.xlim([100,21])
507/17:
df.plot.box()
plt.xticks(rotation='vertical')
plt.xlim([100])
507/18:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([100])
507/19:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([0,100])
507/20:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,100])
507/21:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,20])
507/22:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
507/23: df_log.mean()
507/24: df_log.median()
507/25: df_log.summary()
507/26: df_log.describe()
507/27: df_log
507/28: df_log.power()
507/29: dir(df_log)
507/30: df_log.pow()
507/31: df_log.pow(10)
507/32: df_log.describe.pow(10)
507/33: df_log.median.pow(10)
507/34: df_log.median()
507/35: df_log.median().power()
507/36: df_log.median().power(10)
507/37: df_log.median
507/38: df_log.describe()
507/39: df_log.describe(median)
507/40: df_log.describe.median()
507/41: df_log.describe.mean()
507/42: df_log.mean()
507/43: df_log.describe(percentiles=.25)
507/44: df_log.describe(percentiles=.25)
507/45: df_log.describe(percentiles=[.25])
507/46: df_log.mean().pow()
507/47: df_log.mean().pow(10)
507/48: df_log.describe(percentiles=[.25])
507/49: dir(df_log.describe())
507/50: df_log.describe()
507/51: df.describe()
508/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
508/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
508/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
508/4:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
508/5:
df.plot.box()
plt.xticks(rotation='vertical')
508/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
508/7: dir(df_log.describe())
508/8: df.describe()
508/9: df_log.describe()
508/10:
df_log.describe()
10-16.118096
508/11:
df_log.describe()
log10(-16.118096)
508/12: df_log.describe()
508/13: df_log.describe()[count]
508/14: df_log.describe()['count']
508/15: df_log.describe().iloc[1,1]
508/16: df_log.describe().iloc[1,:]
508/17: df_log.describe().iloc[2,:]
508/18: df_log.describe().iloc[3,:]
508/19: df_log.describe()
508/20: df
508/21: df.loc[~(df==0).all(axis=1)]
508/22:
df.loc[~(df==0).all(axis=1)]
df
508/23: df.loc[~(df=<0.00001).all(axis=1)]
508/24: df.loc[(df=<0.00001).all(axis=1)]
508/25: df.loc[~(df==0).all(axis=1)]
508/26: df[df < .0001]
508/27:
for c in conditions:
    df[c][df[c] < .0001]
508/28:
for c in conditions:
    print(df[c][df[c] < .0001])
508/29:
for c in conditions:
    print(df[c][df[c] < .0001]=np.nan)
508/30:
for c in conditions:
    print(df[c][df[c] < .0001]==np.nan)
508/31:
for c in conditions:
    df[c][df[c] < .0001]=np.nan
508/32:
for c in conditions:
    df[c] = df[c].where(lambda x: x <= .00001, np.nan)
508/33: df
508/34: df.describe()
508/35:
for c in conditions:
    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
508/36: df.describe()
509/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
509/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
509/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
509/4:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
509/5:
df.plot.box()
plt.xticks(rotation='vertical')
509/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
509/7: df_log.describe()
509/8: df.describe()
509/9: df_log.describe().iloc[3,:]
509/10: df.loc[~(df==0).all(axis=1)]
509/11:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
509/12: df.describe()
509/13:
df_test = df
for c in conditions:
    df_test[imputed_data_x < 1] = np.nan
509/14:
df_test = df
for c in conditions:
    df_test[df_test < 1] = np.nan
509/15:
df_test = df
for c in conditions:
    df_test[c][df_test[c] < 1] = np.nan
509/16:
df_test = df
for c in conditions:
    df_test[c][df_test[c] < 1] = np.nan
    
df_test.describe()
509/17:
df_test = df
for c in conditions:
    df_test[c][df_test[c] < .0001] = np.nan
    
df_test.describe()
509/18:
df_test = df
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
    
df_test.describe()
509/19: df
510/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
510/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
510/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
510/4:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
510/5:
df.plot.box()
plt.xticks(rotation='vertical')
510/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
510/7: df_log.describe()
510/8: df.describe()
510/9: df_log.describe().iloc[3,:]
510/10: df.loc[~(df==0).all(axis=1)]
510/11:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
510/12: df.describe()
510/13:
df_test = df
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
    
df_test.describe()
510/14: df
511/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
511/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
511/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
511/4:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
511/5:
df.plot.box()
plt.xticks(rotation='vertical')
511/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
511/7: df_log.describe()
511/8: df.describe()
511/9: df_log.describe().iloc[3,:]
511/10: df.loc[~(df==0).all(axis=1)]
511/11:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
511/12: df.describe()
511/13: df
511/14:
df_test = df
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
    
df_test.describe()
511/15: df
511/16: df.describe()
514/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
516/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
516/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
516/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
516/4:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
516/5:
df.plot.box()
plt.xticks(rotation='vertical')
516/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
516/7: df_log.describe()
516/8: df.describe()
516/9: df_log.describe().iloc[3,:]
516/10: df.loc[~(df==0).all(axis=1)]
516/11:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
516/12: df.describe()
516/13: df
516/14:
df_test = df
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
    
df_test.describe()
516/15: df.describe()
516/16:   df_test[c][df_test[c] < .00001]
516/17: df_test[c][df_test[c] < .00001]
516/18: list(df_test[c][df_test[c] < .00001] )
517/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
517/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
517/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
517/4:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
517/5:
df.plot.box()
plt.xticks(rotation='vertical')
517/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
517/7: df_log.describe()
517/8: df.describe()
517/9: df_log.describe().iloc[3,:]
517/10: df.loc[~(df==0).all(axis=1)]
517/11:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
517/12: df.describe()
517/13: df
517/14:
c = conditions[0]
list(df_test[c][df_test[c] < .00001] )
517/15:
c = conditions[0]
df_test = df
list(df_test[c][df_test[c] < .00001] )
517/16:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001]
517/17: np.nan
517/18:
c = conditions[0]
df_test = df
index(df_test[c][df_test[c] < .00001])
517/19:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001
517/20:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001]
517/21:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001]= 3
517/22:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
517/23:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c][df_test[c] < .00001]
517/24:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c][df_test[c] = np.nan ]
517/25:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c][df_test[c] == np.nan ]
517/26:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c]
517/27:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c]
df[c]
517/28:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c]
517/29:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c]
df[c]
517/30:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c]
df[c]
517/31:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
df_test[c]
517/32:
c = conditions[0]
df_test = df
df_test[c][df_test[c] < .00001] = np.nan
type(df)
518/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
518/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
518/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
518/4:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
518/5:
df.plot.box()
plt.xticks(rotation='vertical')
518/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
518/7: df_log.describe()
518/8: df.describe()
518/9: df_log.describe().iloc[3,:]
518/10: df.loc[~(df==0).all(axis=1)]
518/11:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
518/12: df.describe()
518/13: df
518/14: np.nan
518/15:
c = conditions[0]
df_test = df.copy(deep=True)
df_test[c][df_test[c] < .00001] = np.nan
df
518/16:
df_test = df
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
df_test.describe()
518/17: df.describe()
518/18:
c = conditions[0]
df_test = df.copy(deep=True)
df_test[c][df_test[c] < .00001] = np.nan
df_test
518/19:
c = conditions[0]
df_test = df.copy(deep=True)
df_test[c][df_test[c] < .00001] = np.nan
518/20:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
518/21:
import matplotlib.pyplot  as plt
df_log=pd.DataFrame()
for c in conditions:
    df_log[c]=np.log(df_test[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
518/22:
# Import the libraries
import matplotlib.pyplot as plt

# matplotlib histogram
plt.hist(df_test, color = 'blue', edgecolor = 'black',
         bins = int(180/5))
518/23:
# Import the libraries
import matplotlib.pyplot as plt

# matplotlib histogram
plt.hist(df_test,
         bins = int(180/5))
518/24:
# Import the libraries
import matplotlib.pyplot as plt

# matplotlib histogram
plt.hist(df_test, bins = int(180/5))
518/25:
# Import the libraries
import matplotlib.pyplot as plt

# matplotlib histogram
plt.hist(df_test, bins = int(180/5))
plt.show()
518/26: df_test
518/27:
# Import the libraries
import matplotlib.pyplot as plt

# matplotlib histogram
df_test.set(style="whitegrid")  fig,axs = plt.subplots(3,2, figsize = (8,10))df_test.histplot(data=df, x="Age", kde=True, color="skyblue", ax=axs[0, 0])
df_test.histplot(data=df, x="SystolicBP", kde=True, color="olive", ax=axs[0, 1])
df_test.histplot(data=df, x="DiastolicBP", kde=True, color="gold", ax=axs[1, 0])
df_test.histplot(data=df, x="BS", kde=True, color="teal", ax=axs[1, 1])
df_test.histplot(data=df, x="BodyTemp", kde=True, color="teal", ax=axs[2, 0])
df_test.histplot(data=df, x="HeartRate", kde=True, color="blue", ax=axs[2, 1])
df_test.histplot(data=df, x="RiskLevel", kde=True, color="purple", ax=axs[3,0])fig.tight_layout()
518/28:
# Import the libraries
import matplotlib.pyplot as plt

# matplotlib histogram
df_test.set(style="whitegrid")  fig,axs = plt.subplots(3,2, figsize = (8,10))
df_test.histplot(data=df, x="Age", kde=True, color="skyblue", ax=axs[0, 0])
df_test.histplot(data=df, x="SystolicBP", kde=True, color="olive", ax=axs[0, 1])
df_test.histplot(data=df, x="DiastolicBP", kde=True, color="gold", ax=axs[1, 0])
df_test.histplot(data=df, x="BS", kde=True, color="teal", ax=axs[1, 1])
df_test.histplot(data=df, x="BodyTemp", kde=True, color="teal", ax=axs[2, 0])
df_test.histplot(data=df, x="HeartRate", kde=True, color="blue", ax=axs[2, 1])
df_test.histplot(data=df, x="RiskLevel", kde=True, color="purple", ax=axs[3,0])fig.tight_layout()
518/29:
# Import the libraries
import matplotlib.pyplot as plt

# matplotlib histogram
df_test.set(style="whitegrid")  
fig,axs = plt.subplots(3,2, figsize = (8,10))
df_test.histplot(data=df, x="Age", kde=True, color="skyblue", ax=axs[0, 0])
df_test.histplot(data=df, x="SystolicBP", kde=True, color="olive", ax=axs[0, 1])
df_test.histplot(data=df, x="DiastolicBP", kde=True, color="gold", ax=axs[1, 0])
df_test.histplot(data=df, x="BS", kde=True, color="teal", ax=axs[1, 1])
df_test.histplot(data=df, x="BodyTemp", kde=True, color="teal", ax=axs[2, 0])
df_test.histplot(data=df, x="HeartRate", kde=True, color="blue", ax=axs[2, 1])
df_test.histplot(data=df, x="RiskLevel", kde=True, color="purple", ax=axs[3,0])fig.tight_layout()
518/30:
df_test.plot.box()
plt.xticks(rotation='vertical')
518/31:
df_test.plot.box()
plt.xticks(rotation='vertical')
dir(df_test.plot.box())
518/32:
df_test.plot.box().semilogy
plt.xticks(rotation='vertical')
dir(df_test.plot.box())
518/33:
df_test.plot.box().semilogy
plt.xticks(rotation='vertical')
518/34:
df_test.plot.box().semilogy
plt.xticks(rotation='vertical')
518/35:
df_test.plot.box()
ax.set_yscale('log')
plt.xticks(rotation='vertical')
518/36:
df_test.plot.box()
plt.set_yscale('log')
plt.xticks(rotation='vertical')
518/37:
df_test.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
518/38: counts, bins = np.histogram(df_test)
518/39:
df.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
519/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
519/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
519/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
519/4:
df.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
519/5:
import matplotlib.pyplot  as plt
df.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
520/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
520/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
520/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
520/4:
import matplotlib.pyplot  as plt
df.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
520/5:
import matplotlib.pyplot  as plt
df_non_zero =pd.DataFrame()
df_log = pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
520/6:
df.plot.box()
plt.xticks(rotation='vertical')
520/7:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
520/8: df_log.describe()
520/9: df.describe()
520/10: df_log.describe().iloc[3,:]
520/11: df.loc[~(df==0).all(axis=1)]
520/12:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
520/13: df.describe()
520/14: df
520/15: np.nan
520/16:
c = conditions[0]
df_test = df.copy(deep=True)
df_test[c][df_test[c] < .00001] = np.nan
520/17:
df_test = df.copy(deep=True)
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
df_test.describe()
520/18: df.describe()
520/19:
import matplotlib.pyplot  as plt
df_log=pd.DataFrame()
for c in conditions:
    df_log[c]=np.log(df_test[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
520/20:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
520/21:
df_test.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
520/22:
df.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
520/23:
import matplotlib.pyplot  as plt
df_non_zero =pd.DataFrame()
df_log = pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
520/24:
import matplotlib.pyplot  as plt
df_non_zero =pd.DataFrame()
df_log = pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
520/25:
df.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
520/26:
df.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
plt.ylim([0.00001,10000])
520/27:
df.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
plt.ylim([0.00000000000000001,10000])
520/28:
df.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
plt.ylim([0.0000000000000000000000000000000001,10000])
520/29:
df.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
plt.ylim([0.000001,10000])
520/30:
df.plot.box()
plt.xticks(rotation='vertical')
520/31:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the *bins* keyword argument.
axs[0].hist(dist1, bins=n_bins)
axs[1].hist(dist2, bins=n_bins)
520/32:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

# Create a random number generator with a fixed seed for reproducibility
rng = np.random.default_rng(19680801)

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the *bins* keyword argument.
axs[0].hist(dist1, bins=n_bins)
axs[1].hist(dist2, bins=n_bins)
520/33: conditions
520/34:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)
count = -1
for c in conditions:
    count = count +1
    axs[count].hist(df_test[c], bins=n_bins)
520/35: df_test[0]
520/36: df_test['MeanExpression_RetinalGanglionCells__LiangEtAl_2019_']
520/37: type(df_test['MeanExpression_RetinalGanglionCells__LiangEtAl_2019_'])
520/38: dir(df_test['MeanExpression_RetinalGanglionCells__LiangEtAl_2019_'])
520/39:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)
count = -1
for c in conditions:
    count = count +1
    axs[count].hist(df_test[c].values, bins=n_bins)
520/40:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)
count = -1
for c in conditions:
    count = count +1
    axs[count].hist(df_test[c].values, bins=n_bins)
520/41:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)
520/42:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)

count = -1
for c in conditions:
    count = count +1
    axs[count].hist(df_test[c].values, bins=n_bins)
520/43:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)

count = -1
for c in conditions:
    count = count +1
    axs[0].hist(df_test[c].values, bins=n_bins)
520/44:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the *bins* keyword argument.
axs[0].hist(dist1, bins=n_bins)
axs[1].hist(dist2, bins=n_bins)

dist1
520/45:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)


dist1
520/46:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

dist1
520/47:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

dist1
dist2
520/48:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the *bins* keyword argument.
axs[0].hist(dist1, bins=n_bins)
axs[1].hist(dist2, bins=n_bins)

dist1

c=conditions[0]
df_test[c].values
520/49:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the *bins* keyword argument.
axs[0].hist(df_test[c].values, bins=n_bins)
axs[1].hist(dist2, bins=n_bins)

dist1

c=conditions[0]
df_test[c].values
520/50:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)

count = -1
for c in conditions:
    count = count +1
    axs[c].hist(df_test[c].values, bins=n_bins)
520/51:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)

count = -1
for c in conditions:
    axs[0].hist(df_test[c].values, bins=n_bins)
520/52:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)

count = -1
for c in conditions:
    axs[0].hist(df_test[c].values, bins=n_bins)
520/53:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)

count = -1
for c in conditions:
    axs[0].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
520/54:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)


    
type(df_test[c].values)
520/55:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)

count = -1
for c in conditions:
    axs[0].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/56:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)

    
type(df_test[c].values)
df_test[c].values
520/57:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the *bins* keyword argument.
axs[0].hist(df_test[c].values, bins=n_bins)
axs[1].hist(dist2, bins=n_bins)

dist1

c=conditions[0]
type(df_test[c].values)
520/58:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[0].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/59:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(10, 2, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/60:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/61:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(1, 20, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/62:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(2, 20, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/63:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(2, 5, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/64:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 20

fig, axs = plt.subplots(1, 5, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/65:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 2000

fig, axs = plt.subplots(1, 5, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/66:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 100

fig, axs = plt.subplots(1, 5, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/67:
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import colors
from matplotlib.ticker import PercentFormatter

N_points = 100000
n_bins = 1

fig, axs = plt.subplots(1, 5, sharey=True, tight_layout=True)


count = -1
for c in conditions:
    count=count+1
    axs[count].hist(df_test[c].values, bins=n_bins)
    
type(df_test[c].values)
df_test[c].values
520/68:
N_points = 100000
n_bins = 20

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the *bins* keyword argument.
axs[0].hist(df_test[c].values, bins=n_bins)


dist1

c=conditions[0]
type(df_test[c].values)
520/69:
N_points = 100000
n_bins = 200

# Generate two normal distributions
dist1 = rng.standard_normal(N_points)
dist2 = 0.4 * rng.standard_normal(N_points) + 5

fig, axs = plt.subplots(1, 2, sharey=True, tight_layout=True)

# We can set the number of bins with the *bins* keyword argument.
axs[0].hist(df_test[c].values, bins=n_bins)


dist1

c=conditions[0]
type(df_test[c].values)
520/70: df.plot.hist(bins=12, alpha=0.5)
520/71: df.plot.hist(bins=120, alpha=0.5)
520/72: df.plot.hist(bins=120, alpha=0.5, xlim=(0,100))
520/73: df.plot.hist(bins=1000, alpha=0.5, xlim=(0,100))
520/74: df.plot.hist(bins=1000, alpha=0.5, xlim=(0,100), log=True)
520/75:
plot = df.plot.hist(bins=1000, alpha=0.5, xlim=(0,100), log=True)
plot.legend(bbox_to_anchor=(1.1, 1.05))
520/76:
plot = df.plot.hist(bins=1000, alpha=0.5, xlim=(0,100), log=True)
plot.legend(bbox_to_anchor=(1.1, 1.05))
plot.show()
520/77:
plot = df.plot.hist(bins=10000, alpha=0.5, xlim=(0,1000), log=True)
plot.legend(bbox_to_anchor=(0, 1.05))
520/78:
df_test.plot.box()
plt.xticks(rotation='vertical')
520/79: df_test.describe()
520/80: df_test[c]
520/81: dir(df_test[c].values)
520/82: dir(df_test[c])
520/83: df.time_diff.quantile([0.25,0.5,0.75])
520/84: df_test.time_diff.quantile([0.25,0.5,0.75])
520/85: df_test.quantile([0.25,0.5,0.75])
520/86: df_test.quantile([0.20,0.5,0.75])
520/87: df_test.quantile([0.25,0.5,0.75])
520/88: df_test
520/89: df_descretised = df.copy(deep=True)
520/90:
df_descretised = df.copy(deep=True)

df_descretised
520/91:
df_descretised = df.copy(deep=True)

type(df_descretised)
520/92:
df_discretized = df.copy(deep=True)

df_discretized[df_discretized < .00001] = -1
df_discretized.fillna(0) 
df_discretized
520/93:
df_discretized = df.copy(deep=True)

df_discretized[df_discretized<0.00001] = -1
df_discretized.fillna(0) 
df_discretized
520/94: df_discretized[df_discretized<0.00001]
520/95: df_discretized[df_discretized[3]<0.00001]
520/96: df_discretized[3][df_discretized[3]<0.00001]
520/97: df_discretized[3]
520/98: df_discretized['MeanExpression_SchwannCells_1__VoigtEtAl2019_']
520/99: df_discretized['MeanExpression_SchwannCells_1__VoigtEtAl2019_']>0.00001
520/100: df_discretized['MeanExpression_SchwannCells_1__VoigtEtAl2019_']<0.00001
520/101: df_discretized
520/102: type(df_discretized)
520/103:
df_discretized = df.copy(deep=True)

for c in conditions:
    df_test.quantile([0.25,0.75])
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0)
520/104: df_test.quantile([0.25,0.75])
520/105: df_test[c].quantile([0.25,0.75])
520/106: df_test[c].quantile([0.25,0.75]).values
520/107: df_test[c].quantile([0.25,0.75]).values[1]
520/108: df_test[c].quantile([0.25,0.75]).values[0]
520/109: df_discretized[c][df_discretized[c]<0.00001]
520/110:
q25 = df_discretized[c].quantile([0.25])
df_discretized[c][df_discretized[c]<q25]
520/111: q25 = df_discretized[c].quantile([0.25])
520/112:
q25 = df_discretized[c].quantile([0.25])
q25
520/113:
q25 = df_discretized[c].quantile([0.25]).values
df_discretized[c][df_discretized[c]<q25]
520/114:
q25 = df_discretized[c].quantile([0.25]).values
q25
520/115:
q25 = df_discretized[c].quantile([0.25]).values
q25[0]
520/116:
q25 = df_discretized[c].quantile([0.25]).values[0]
q25[0]
520/117: q25 = df_discretized[c].quantile([0.25]).values[0]
520/118:
q25 = df_discretized[c].quantile([0.25]).values[0]
q25
520/119:
q25 = df_discretized[c].quantile([0.25]).values[0]
df_discretized[c][df_discretized[c]<q25]
520/120:
q25 = df_discretized[c].quantile([0.25]).values[0]
df_discretized[c][0<df_discretized[c]<q25]
520/121:
q25 = df_discretized[c].quantile([0.25]).values[0]
df_discretized[c][df_discretized[c]<q25]
520/122:
q25 = df_discretized[c].quantile([0.25]).values[0]
df_discretized[c][df_discretized[c]<q25&df_discretized[c]>0]
520/123:
q25 = df_discretized[c].quantile([0.25]).values[0]
df_discretized[c][df_discretized[c]<q25 & df_discretized[c]>0]
520/124:
q25 = df_discretized[c].quantile([0.25]).values[0]
df_discretized[c][df_discretized[c]<=q25]
520/125:
q25 = df_discretized[c].quantile([0.25]).values[0]
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
520/126:
q25 = df_discretized[c].quantile([0.25]).values[0]
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
df_discretized[c][(df_discretized[c]<=q25) ]
520/127:  df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
520/128: idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
520/129:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx1
520/130:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx_1
520/131:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
dir(idx_1)
520/132:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
dir(idx_1).loc
520/133:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx_1.loc
520/134:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
list(idx_1.loc)
520/135:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx_1.loc.list()
520/136:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx_1.where
520/137:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx_1.iloc
520/138:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx_1.iloc = 4000
520/139:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
type(idx_1.iloc)
520/140:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
type(idx_1)
520/141:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx_1.idx
520/142:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
type(idx_1)
520/143:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
idx_1.axes
520/144:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>q75) = -20
    df_discretized[c][(df_discretized[c]<=q75) = -30
df_discretized
520/145: idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
520/146:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
520/147:
idx_1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
df_discretized
520/148:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25) = -20
    df_discretized[c][(df_discretized[c]>q75) = -30
df_discretized
520/149:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25) = -20
    df_discretized[c][(df_discretized[c]>q75) = -30
df_discretized
520/150: df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
520/151:
df_discretized = df.copy(deep=True)

df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
520/152:
df_discretized = df.copy(deep=True)
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
520/153:
df_discretized = df.copy(deep=True)
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] == 1
520/154:
df_discretized = df.copy(deep=True)
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = 1
520/155:
df_discretized = df.copy(deep=True)
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = 1
df_discretized
520/156:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25) = -20
    df_discretized[c][(df_discretized[c]>q75) = -30
df_discretized
520/157:
type(df_discretized)
 df_discretized[c][(df_discretized[c]<=q25)]
520/158:
type(df_discretized)
df_discretized[c][(df_discretized[c]<=q25)]
520/159:
type(df_discretized)
df_discretized[c][(df_discretized[c]<=q25)].replace(10)
520/160:
type(df_discretized)
df_discretized[c][(df_discretized[c]<=q25)]
520/161:
type(df_discretized)
df_discretized[c][(df_discretized[c]<=q25)]=10
520/162:
type(df_discretized)
df_discretized[c][(df_discretized[c]<=q25)]
520/163:
type(df_discretized)
df_discretized[c][(df_discretized[c]<=q75)]
520/164:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25) = -20
    df_discretized[c][(df_discretized[c]>q75) = -30
df_discretized
520/165:
for c in conditions[0]:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
520/166:
c = conditions[0]
df_discretized = df.copy(deep=True)

q25 = df_discretized[c].quantile([0.25]).values[0]
q75 = df_discretized[c].quantile([0.75]).values[0]
df_discretized[c][df_discretized[c]<0.00001] = -1
df_discretized[c].fillna(0) 
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
520/167:
c = conditions[0]
df_discretized = df.copy(deep=True)

q25 = df_discretized[c].quantile([0.25]).values[0]
q75 = df_discretized[c].quantile([0.75]).values[0]
df_discretized[c][df_discretized[c]<0.00001] = -1
520/168:
c = conditions[0]
df_discretized = df.copy(deep=True)

q25 = df_discretized[c].quantile([0.25]).values[0]
q75 = df_discretized[c].quantile([0.75]).values[0]
df_discretized[c][df_discretized[c]<0.00001]
520/169:
c = conditions[0]
df_discretized = df.copy(deep=True)

q25 = df_discretized[c].quantile([0.25]).values[0]
q75 = df_discretized[c].quantile([0.75]).values[0]
df_discretized[c][df_discretized[c]<0.00001] = -1
520/170:
c = conditions[0]
df_discretized = df.copy(deep=True)

q25 = df_discretized[c].quantile([0.25]).values[0]
q75 = df_discretized[c].quantile([0.75]).values[0]
df_discretized[c].loc<0.00001] = -1
520/171:
c = conditions[0]
df_discretized = df.copy(deep=True)

q25 = df_discretized[c].quantile([0.25]).values[0]
q75 = df_discretized[c].quantile([0.75]).values[0]
df_discretized[c].loc<0.00001
522/1:
c = conditions[0]
df_discretized = df.copy(deep=True)

q25 = df_discretized[c].quantile([0.25]).values[0]
q75 = df_discretized[c].quantile([0.75]).values[0]
df_discretized[c].loc[:, (<.01)]
522/2:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
df_discretized
525/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
525/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
525/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
525/4:
import matplotlib.pyplot  as plt
df_non_zero =pd.DataFrame()
df_log = pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
525/5:
df.plot.box()
plt.xticks(rotation='vertical')
525/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
plt.ylim([0.000001,10000])
525/7:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
525/8: df_log.describe()
525/9: df.describe()
525/10: df_log.describe().iloc[3,:]
525/11: df.loc[~(df==0).all(axis=1)]
525/12:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
525/13: df.describe()
525/14: df
525/15: np.nan
525/16:
c = conditions[0]
df_test = df.copy(deep=True)
df_test[c][df_test[c] < .00001] = np.nan
525/17:
df_test = df.copy(deep=True)
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
df_test.describe()
525/18: df.describe()
525/19:
import matplotlib.pyplot  as plt
df_log=pd.DataFrame()
for c in conditions:
    df_log[c]=np.log(df_test[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
525/20:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
525/21:
df_test.plot.box()
plt.xticks(rotation='vertical')
525/22:
df_test.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
525/23: conditions
525/24: df_test.describe()
525/25:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
df_discretized
525/26:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
df_discretized
525/27:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    idxnc = -1
df_discretized
525/28:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    idxnc = -1
    idx1 = 1
    idx2 = 2
    idx3 = 3
df_discretized
525/29:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    idxnc = -1
    idx1 = 1
    idx2 = 2
    idx3 = 3
df_discretized
525/30:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[idxnc] = -1
    df_discretized[idx1] = 1
    idx2 = 2
    idx3 = 3
df_discretized
525/31:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    idxnc = -1
    idx1 = 1
    idx2 = 2
    idx3 = 3
idx1
525/32:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    idxnc = -1
    idx1 = 1
    idx2 = 2
    idx3 = 3
idx1
525/33:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    idxnc = -1
    idx1 = 1
    idx2 = 2
    idx3 = 3
idx1                   
idx2
525/34:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    df_discretized[c].fillna(0) 
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
idx1                   
idx2
525/35:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
type(idx2)
525/36:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
type(idx2.loc[])
525/37:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
type(idx2.loc)
525/38:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
(idx2.loc)
525/39:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
df_discretized[c].loc[df_discretized[c] <=q25]
525/40:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
df_discretized[c].loc[df_discretized[c] <=q25] = -1
525/41:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
df_discretized[c].loc[df_discretized[c] <=q25] = -1
df_discretized[c].loc[df_discretized[c]
525/42:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
df_discretized[c].loc[df_discretized[c] <=q25] = -1
df_discretized[c]
525/43:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
df_discretized[c].loc[df_discretized[c] <=q25, c] = -1
df_discretized[c]
525/44:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
idx1                   
df_discretized[c].iloc[df_discretized[c] <=q25, c] = -1
df_discretized[c]
525/45:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 22000, 'Fee'] = 1
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=22000 ,'0', inplace=True)
print(df)
525/46:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 22000, 'Fee'] = 1
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=22000 ,'3', inplace=True)
print(df)
525/47:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 22000, 'Fee'] = 1
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=22000 ,'3', inplace=True)
print(df)
525/48:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 22000, 'Fee'] = 1
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=2000 ,'3', inplace=True)
print(df)
525/49:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 22000, 'Fee'] = 1
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=200 ,'3', inplace=True)
print(df)
525/50:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 22000, 'Fee'] = 1
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=200 ,'2', inplace=True)
print(df)
525/51:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 2000, 'Fee'] = 1
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=200 ,'2', inplace=True)
print(df)
525/52:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 2000, 'Fee'] = -100000
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=200 ,'2', inplace=True)
print(df)
525/53:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 2000, 'Fee'] 
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=200 ,'2', inplace=True)
print(df)
525/54:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 2000, 'Fee'] 
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=200 ,'2', inplace=True)
print(df)
df2
525/55:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0)
525/56:
df_discretized = df.copy(deep=True)
c = conditions[0]
df_discretized[c][df_discretized[c]<0.00001]
525/57:
df_discretized = df.copy(deep=True)
c = conditions[0]
[df_discretized[c]<0.00001]
525/58:
df_discretized = df.copy(deep=True)
c = conditions[0]
[df_discretized[c]<0.00001]
526/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
526/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
526/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
526/4:
import matplotlib.pyplot  as plt
df_non_zero =pd.DataFrame()
df_log = pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
526/5:
df.plot.box()
plt.xticks(rotation='vertical')
526/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
plt.ylim([0.000001,10000])
526/7:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
526/8: df_log.describe()
526/9: df.describe()
526/10: df_log.describe().iloc[3,:]
526/11: df.loc[~(df==0).all(axis=1)]
526/12:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
526/13: df.describe()
526/14: df
526/15: np.nan
526/16:
c = conditions[0]
df_test = df.copy(deep=True)
df_test[c][df_test[c] < .00001] = np.nan
526/17:
df_test = df.copy(deep=True)
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
df_test.describe()
526/18: df.describe()
526/19:
import matplotlib.pyplot  as plt
df_log=pd.DataFrame()
for c in conditions:
    df_log[c]=np.log(df_test[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
526/20:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
526/21:
df_test.plot.box()
plt.xticks(rotation='vertical')
526/22:
df_test.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
526/23: conditions
526/24: df_test.describe()
526/25:
df_discretized = df.copy(deep=True)
c = conditions[0]
[df_discretized[c]<0.00001]
526/26:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0)
526/27:
# Below are complete examples to replace values of columns in pandas.
import pandas as pd
import numpy as np
technologies = {
    'Courses':["Spark","PySpark","Python","pandas"],
    'Fee' :[20000,25000,22000,30000],
    'Duration':['30days','40days','35days','50days'],
    'Discount':[1000,2300,1200,2000]
              }
index_labels=['r1','r2','r3','r4']
df = pd.DataFrame(technologies,index=index_labels)
print(df)

# Replace values of columns by using DataFrame.loc[] property.
df2=df.loc[df['Fee'] > 2000, 'Fee'] 
print(df2)

# Using DataFrame.astype() Replace values based on condition.
df['Fee'] = (df['Fee'] > 22000).astype(int)
print(df)

# Replace values of Given column by using np.where() function.
df['Fee'] = np.where(df['Fee'] > 22000, 1, df['Fee'])
print(df)

# Using DataFrame.mask() function.
df['Fee'].mask(df['Fee'] >=200 ,'2', inplace=True)
print(df)
df2
526/28:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    idxnc = df_discretized[c][df_discretized[c]<0.00001]
    idx1 = df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)]
    idx2 = df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)]
    idx3 = df_discretized[c][(df_discretized[c]>q75)]
    df_discretized[c].fillna(0) 
df_discretized
527/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
527/2:
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.median())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.mean())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.min())
print(df.MeanExpression_SchwannCells_1__VoigtEtAl2019_.max())
527/3:
import numpy as np
[df[c] for c in conditions]
df[conditions[1]]
conditions[1]
527/4:
import matplotlib.pyplot  as plt
df_non_zero =pd.DataFrame()
df_log = pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
527/5:
df.plot.box()
plt.xticks(rotation='vertical')
527/6:
df.plot.box()
plt.xticks(rotation='vertical')
plt.yscale("log")
plt.ylim([0.000001,10000])
527/7:
df.plot.box()
plt.xticks(rotation='vertical')
plt.ylim([-1,15])
527/8: df_log.describe()
527/9: df.describe()
527/10: df_log.describe().iloc[3,:]
527/11: df.loc[~(df==0).all(axis=1)]
527/12:
#for c in conditions:
#    df[c] = df[c].where(lambda x: x >= .00001, np.nan)
527/13: df.describe()
527/14: df
527/15: np.nan
527/16:
c = conditions[0]
df_test = df.copy(deep=True)
df_test[c][df_test[c] < .00001] = np.nan
527/17:
df_test = df.copy(deep=True)
for c in conditions:
    df_test[c][df_test[c] < .00001] = np.nan
df_test.describe()
527/18: df.describe()
527/19:
import matplotlib.pyplot  as plt
df_log=pd.DataFrame()
for c in conditions:
    df_log[c]=np.log(df_test[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
527/20:
import matplotlib.pyplot  as plt
df_non_zero=pd.DataFrame()
df_log=pd.DataFrame()
for c in conditions:
    df_non_zero[c]=df[c]+.0000001
    df_log[c]=np.log(df_non_zero[c])
df_log.plot.box()
plt.xticks(rotation='vertical')
527/21:
df_test.plot.box()
plt.xticks(rotation='vertical')
527/22:
df_test.plot.box()
plt.yscale("log")
plt.xticks(rotation='vertical')
527/23: conditions
527/24: df_test.describe()
527/25:
c = conditions[0]
df_discretized = df.copy(deep=True)

q25 = df_discretized[c].quantile([0.25]).values[0]
q75 = df_discretized[c].quantile([0.75]).values[0]
df_discretized[c].loc<0.00001
527/26:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25) = -20
    df_discretized[c][(df_discretized[c]>q75) = -30
df_discretized
527/27:
df_discretized = df.copy(deep=True)

c=conditions[0]
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
527/28:
df_discretized = df.copy(deep=True)

c=conditions[0]
df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
df_discretized
527/29:
df_discretized = df.copy(deep=True)
data=df_discretized[c]
c=conditions[0]
data[(data<=q25) & (data>0)] = -10
df_discretized
527/30:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25) = -20
    df_discretized[c][(df_discretized[c]>q75) = -30
df_discretized
527/31:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
527/32:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25) = -20
527/33:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20
527/34:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20
    df_discretized[c][(df_discretized[c]>q75)] = -30
df_discretized
527/35:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c].fillna(0) 
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20
    df_discretized[c][(df_discretized[c]>q75)] = -30
df_discretized==-30
527/36:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negaytive confidence (NC)
    df_discretized[c].fillna(0) # unknown (0)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = 'HC'
df_discretized==-30
527/37:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c].fillna(0) # unknown (0)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
df_discretized[df_discretized==-10]-1
df_discretized[df_discretized==-20]-2
df_discretized[df_discretized==-30]-3
527/38:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c].fillna(0) # unknown (0)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
df_discretized[df_discretized==-10]=-1
df_discretized[df_discretized==-20]=-2
df_discretized[df_discretized==-30]=-3
527/39:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c].fillna(0) # unknown (0)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
527/40:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c].fillna(0) # unknown (0)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized
527/41:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20    
    df_discretized[c].fillna(0)
527/42:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c].fillna(0) # unknown (0)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized.fillna(0)
527/43:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized = df_discretized[c].fillna(0) # unknown (0)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized.fillna(0)
527/44:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized.fillna(0)
527/45:
for c in conditions:
    {df_discretized.Ensembl,df_discretized[c]}
527/46:
for c in conditions:
    dict1 = dict([(i,[x]) for i, x in zip(df_discretized.Courses, df_discretized[c])])
527/47:
for c in conditions:
    dict1 = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
527/48:
for c in conditions:
    dict1 = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])]
dict1
527/49:
for c in conditions:
    dict1 = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
dict1
527/50:
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized = df_discretized.fillna(0)
527/51:
for c in conditions:
    dict1 = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
dict1
527/52:
for c in conditions:
    dict1 = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
    dict1
527/53:
for c in conditions:
    dict1 = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
dict1
528/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)
for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20    

df_discretized = df_discretized.fillna(0)
528/2:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)
for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20    

df_discretized = df_discretized.fillna(0) 
df_discretized
528/3:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized = df_discretized.fillna(0)
528/4:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized = df_discretized.fillna(0)

df_discretized
524/1:
from corda import test_model

mod = test_model()
len(mod.reactions)
524/2:
from corda import test_model

mod = test_model()
len(mod.reactions)
mod
528/5:
from cobra.io import load_matlab_model, save_matlab_model
mod = load_matlab_model('C:/Users/prins/git/Human-GEM/model/Human-GEM.mat') # load HUMAN1 model (this takes really long!!)
528/6: mod
528/7:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
524/3:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2, "gene6":464} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene1"

reaction_confidence(rxn, gene_conf)
528/8:
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
528/9:
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
gene_conf_dict
528/10:
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
mod.rxns
528/11:
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
mod.reactions
528/12:
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
mod.reactions[0]
528/13:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])

for rxn in mod.reactions:
    rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene1"
    reaction_confidence(rxn, gene_conf_dict)
529/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized = df_discretized.fillna(0)
529/2:
from cobra.io import load_matlab_model, save_matlab_model
mod = load_matlab_model('C:/Users/prins/git/Human-GEM/model/Human-GEM.mat') # load HUMAN1 model (this takes really long!!)
529/3:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
gene_conf_dict
529/4:
for rxn in mod.reactions[1]:
    reaction_confidence(rxn, gene_conf_dict)
reaction_confidence
529/5: reaction_confidence(mod.reactions[1], gene_conf_dict)
529/6:
rxn = mod.reactions[1]
conf = reaction_confidence(rxn, gene_conf_dict)
529/7:
rxn = mod.reactions[1]
conf = reaction_confidence(rxn, gene_conf_dict)
conf
529/8:
rxn = mod.reactions[4]
conf = reaction_confidence(rxn, gene_conf_dict)
conf
529/9:
rxn = mod.reactions[7]
conf = reaction_confidence(rxn, gene_conf_dict)
conf
529/10:
rxn = mod.reactions[1]
conf = reaction_confidence(rxn, gene_conf_dict)
conf
529/11:
rxn = mod.reactions[2]
conf = reaction_confidence(rxn, gene_conf_dict)
conf
529/12:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
conf
529/13:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
mod.reactions
529/14:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
rxn
529/15:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
rxn.id
529/16:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
rxn.id

mod.reactions
529/17:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id, mod.reactions}
529/18:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(rxn.id, mod.reactions
529/19:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(rxn.id, mod.reactions)
529/20:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(rxn.id: mod.reactions)
530/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=-1
    df_discretized[c][df_discretized[c]==-20]=-2
    df_discretized[c][df_discretized[c]==-30]=-3
df_discretized = df_discretized.fillna(0)
530/2:
from cobra.io import load_matlab_model, save_matlab_model
mod = load_matlab_model('C:/Users/prins/git/Human-GEM/model/Human-GEM.mat') # load HUMAN1 model (this takes really long!!)
530/3:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
530/4:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(rxn.id: mod.reactions)
530/5:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(zip(rxn.id, mod.reactions))
530/6:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(zip(rxn.id, conf))
530/7:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict([rxn.id, conf])
530/8:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(rxn.id, conf)
530/9:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(rxn.id)
conf
530/10:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
rxn.id
conf
530/11:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(rxn.id=conf)
530/12:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
dict(rxn.id==conf)
530/13:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}
530/14:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}
type(conf)
530/15:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}
dir(conf)
530/16:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}
dir(conf[0])
530/17:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}
type(conf[0])
530/18:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}
type(conf[0])
530/19:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}
530/20: conf = reaction_confidence(md.reactions, gene_conf_dict)
530/21: conf = reaction_confidence(md.reactions, gene_conf_dict)
530/22: conf = reaction_confidence(mod.reactions, gene_conf_dict)
530/23:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}
[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]
530/24:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
gene_conf_dict.head()
530/25:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
head(gene_conf_dict)
530/26:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
dir(gene_conf_dict)
530/27:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,[x]) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
530/28:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]
530/29:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

for rxn in mod.reactions:
    conf = reaction_confidence(rxn, gene_conf_dict)
    {rxn.id:conf[0]}
530/30:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

for rxn in mod.reactions:
    conf = reaction_confidence(rxn, gene_conf_dict)
530/31:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

rxn
530/32:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

conf
530/33:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    rxn.id
530/34:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    rxn.id.print()
530/35:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    list(rxn.id)
530/36:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = list(rxn.id)
l
530/37:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = rxn.id.append()
l
530/38:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = rxn.id
    l2 = l.append()
l2
530/39:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = list(rxn.id)
    l2 = l.append()
l2
530/40:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = list(rxn.id)
   # l2 = l.append()
l
530/41:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = rxn.id
   # l2 = l.append()
l
530/42:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
   # l2 = l.append()
l
530/43:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
    l2 = l.append()
l2
530/44:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
    l2 = l2.append(l)
l2
530/45:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
    l2 = []
    l2 = l2.append(l)
l2
530/46:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
    l2 = []
    l2 = l2.append(l)
l2
530/47:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
    l2 = []
    l2 = l2.append(l)
l
530/48:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
    l2 = []
    l2 = l2.append(l)
l2
530/49:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
    l2 = []
    l2 = l2.append(l)
type(l2)
530/50:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

for rxn in mod.reactions:
    l = [rxn.id]
    l2 = ['']
    l2 = l2.append(l)
type(l2)
530/51:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

l2 = []
for rxn in mod.reactions:
    l = [rxn.id]
    l2 = l2.append(l)
type(l2)
530/52:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

l2 = ['']
for rxn in mod.reactions:
    l = [rxn.id]
    l2 = l2.append(l)
type(l2)
530/53:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

l2 = []
for rxn in mod.reactions:
    l = [rxn.id]
    l2 = l2 + l
type(l2)
530/54:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

l2 = []
for rxn in mod.reactions:
    l = [rxn.id]
    l2 = l2 + l
l2
530/55:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

l_id = []
for rxn in mod.reactions:
    l_id_i = [rxn.id]
    l_id = l_id + l_id_i
l_id
530/56:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)

l_id = []
l_conf = []
for rxn in mod.reactions:
    l_id_i = [rxn.id]
    l_id = l_id + l_id_i
    l_conf_i = reaction_confidence(rxn, gene_conf_dict)
    l_conf = l_conf + l_conf_i
l_id
530/57:
rxn = mod.reactions[3]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)
530/58:
rxn = mod.reactions[4]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)
530/59:
rxn = mod.reactions[6]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)
530/60:
rxn = mod.reactions[600]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)
530/61:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)
530/62:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[6000]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)
530/63:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

#for rxn in mod.reactions:
#    conf = reaction_confidence(rxn, gene_conf_dict)
530/64:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

for rxn in mod.reactions:
    conf = reaction_confidence(rxn, gene_conf_dict)
530/65: mod.reactions[0:10]
530/66:

l_id = []
l_conf = []
for rxn in mod.reactions[0:10]:
    l_id_i = [rxn.id]
    l_id = l_id + l_id_i
    l_conf_i = reaction_confidence(rxn, gene_conf_dict)
    l_conf = l_conf + l_conf_i
    
l_id
530/67:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
530/68:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

# [reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
530/69:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]
530/70:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]
530/71:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]
530/72:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]]
530/73:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]
530/74:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
m= mod.reactions[0:10]
[reaction_confidence(rxn, gene_conf_dict) for rxn in m]
530/75:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
m= mod.reactions[0:10]
[reaction_confidence(rxn, gene_conf_dict) for rxn in m]
530/76:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
m= mod.reactions[0:10]
[reaction_confidence(rxn, gene_conf_dict) for rxn in m]
530/77:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
m= mod.reactions[0:10]
[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in m]
530/78:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 
m= 
[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:10]]
530/79:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:10]]
530/80:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:100]]
530/81:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:50]]
530/82:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:40]]
530/83:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:30]]
530/84:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:20]]
530/85:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:15]]
530/86:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:11]]
530/87:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:12]]
530/88:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
530/89:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:14]]
530/90:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
530/91:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
mod.reactions[14]
530/92:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[14], gene_conf_dict)
530/93:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:14]]
reaction_confidence(mod.reactions[14], gene_conf_dict)
530/94:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[14]]
reaction_confidence(mod.reactions[14], gene_conf_dict)
530/95:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[14:15]]
reaction_confidence(mod.reactions[14], gene_conf_dict)
530/96:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[13:15]]
reaction_confidence(mod.reactions[14], gene_conf_dict)
530/97:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[13:14]]
reaction_confidence(mod.reactions[14], gene_conf_dict)
530/98:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[14], gene_conf_dict)
530/99:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[13], gene_conf_dict)
530/100:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[12], gene_conf_dict)
530/101:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[12], gene_conf_dict)
mod.reactions[13]
530/102:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[12], gene_conf_dict)
reaction_confidence(mod.reactions[13],gene_conf_dict)
530/103:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[12], gene_conf_dict)
mod.reactions[13]
530/104:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[12], gene_conf_dict)
mod.reactions[13]
gene_conf_dict
530/105:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
530/106:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf[0]}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict)[0] for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[12], gene_conf_dict)
mod.reactions[13]
gene_conf_dict
530/107:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
gene_conf_dict
530/108:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
530/109:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}
530/110:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[12], gene_conf_dict)
mod.reactions[13]
gene_conf_dict
530/111:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:10]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[13], gene_conf_dict)
mod.reactions[13]
530/112:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:20]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[13], gene_conf_dict)
mod.reactions[13]
530/113:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:10]]

for rxn in mod.reactions[0:20]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[13], gene_conf_dict)
conf
530/114:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:30]]

for rxn in mod.reactions[0:20]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[13], gene_conf_dict)
conf
530/115:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}



for rxn in mod.reactions[0:20]:
    conf = reaction_confidence(rxn, gene_conf_dict)
conf
 

[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:13]]
reaction_confidence(mod.reactions[13], gene_conf_dict)
[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions[0:30]]
530/116:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}


[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]
530/117:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=1
    df_discretized[c][df_discretized[c]==-20]=2
    df_discretized[c][df_discretized[c]==-30]=3
df_discretized = df_discretized.fillna(0)
530/118:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])])
530/119:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}
530/120:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}


[reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions]
530/121:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}

[{rxn.id:reaction_confidence(rxn, gene_conf_dict)} for rxn in mod.reactions]
530/122:
rxn = mod.reactions[6000]
conf = reaction_confidence(rxn, gene_conf_dict)
{rxn.id:conf}

{rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions}
531/1:
from cobra import Configuration

config = Configuration()
config.solver = "glpk"
config
531/2:
from corda import reaction_confidence
from cobra import Reaction

gene_conf = {"gene1": 1, "gene2": 3, "gene4": -1,"gene5":2, "gene6":464} # missing entries are automatically assigned zeroes
rxn = Reaction("my_reaction")
rxn.gene_reaction_rule = "gene1 and gene2 or (gene3 and gene4) or gene5 and gene1"

reaction_confidence(rxn, gene_conf)
531/3:
from corda import test_model

mod = test_model()
len(mod.reactions)
531/4: mod.reactions[59].reaction
531/5:
conf = {}
for r in mod.reactions: conf[r.id] = -1
conf["r60"] = 3
531/6:
from corda import CORDA

opt = CORDA(mod, conf)
opt.build()
print(opt)
531/7: print([opt.model.reactions.get_by_id(k).reaction for k, used in opt.included.items() if used])
531/8:
opt = CORDA(mod, conf, met_prod="pep")
opt.build()
print(opt)
531/9:
rec = opt.cobra_model("plus_pep")
use = rec.metabolites.pep.reactions
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
for r in use: print(r.reaction)
531/10:
opt = CORDA(mod, conf, met_prod="pep", n=1)
opt.build()

rec_min = opt.cobra_model("plus_pep_nored")
print("used", len(rec_min.reactions), "reactions")
print("# of redundant pathway for pep =", opt.redundancies["EX_CORDA_0"])
use = rec_min.metabolites.pep.reactions
for r in use: print(r.reaction)
531/11:
conf = {}
for r in mod.reactions: conf[r.id] = -1
conf["r60"] = 3
conf
530/123:
from corda import reaction_confidence
c = conditions [0]
gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
530/124:
from cobra import Configuration
from corda import CORDA

config = Configuration()
config.solver = "glpk"
opt = CORDA(mod, rxn_conf_dict)
opt.build()
print(opt)
530/125: opt
530/126: opt.append(opt)
530/127: opt
530/128: dir(opt)
530/129: opt.cobra_model
530/130: dir(opt.cobra_model)
530/131: opt
530/132: opt.model
530/133: dir(opt.model)
530/134: dir(opt)
530/135:
dir(opt)
opt.included
530/136: dir(opt)
530/137:
dir(opt)
opt.built
530/138:
dir(opt)
opt.build
530/139: cobra_model
530/140: mod.cobra_model
530/141: opt.cobra_model
530/142: dir(opt.cobra_model)
530/143: dir(opt.model)
530/144: dir(opt)
530/145:
dir(opt)
opt.associated
530/146:
dir(opt)
opt.build
530/147:
dir(opt)
opt
530/148:
dir(opt)
opt.cobra_model
530/149:
dir(opt)
opt.model
530/150:
dir(opt)
opt.cobra_model
530/151:
dir(opt)
opt.cobra_model()
530/152: opt.model
530/153: opt.cobra_model
530/154: opt.model
530/155: opt.model.name
530/156: opt.model
530/157: dir(opt.model)
530/158: opt.model
530/159: dir(opt.model)
530/160: opt.model.name
530/161: mod
530/162: mod.name
530/163: mod.name()
530/164: mod
530/165: opt.model.name = 'mod'
530/166:
opt.model.name = 'mod'
opt.model
530/167:
opt.model.name = 'mod'
opt.model.name
530/168:
opt.model.name = 'mod'
opt.model
530/169:
opt.model.name = 'mod'
opt.model.id
530/170:
opt.model.id = 'mod'
opt.model.id
530/171:
opt.model.id = 'mod'
opt.model
530/172:
var_holder = {}
 
for i in range(10):
    var_holder['my_var_' + str(i)] = "iterationNumber=="+str(i)
 
locals().update(var_holder)
 
print(my_var_0)
530/173:
var_holder = {}
 
for i in range(10):
    var_holder['my_var_' + str(i)] = "iterationNumber=="+str(i)
    locals().update(var_holder)
    print(my_var_0)
530/174:
var_holder = {}
for i in range(10):
    variableNameToChange+i="iterationNumber=="+str(i)
for i in range(10):
    var_holder['my_var_' + str(i)] = "iterationNumber=="+str(i)
    locals().update(var_holder)
    print(my_var_0)
530/175:
var_holder = {}

for i in range(10):
    var_holder['my_var_' + str(i)] = "iterationNumber=="+str(i)
    locals().update(var_holder)
print(my_var_0)
530/176:
var_holder = {}

for i in range(10):
    var_holder['my_var_' + str(i)] = "iterationNumber=="+str(i)
locals().update(var_holder)
print(my_var_0)
530/177:
var_holder = {}

for i in range(10):
    var_holder['my_var_' + str(i)] = "iterationNumber=="+str(i)
530/178:
var_holder = {}

for i in range(10):
    var_holder['my_var_' + i] = "iterationNumber=="+str(i)
530/179:
var_holder = {}

for i in range(10):
    var_holder['my_var_' + i]
530/180:
    variables = {} 
    break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
    name = “variable” 
    i = 0  
    name = name + str(i) #this will be your variable name. 
    while True: 
        value = 10 #value to assign 
        variables.update( 
                      {name:value}) 
        if break_condition == True: 
            break
530/181:
variables = {} 
break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
name = “variable” 
i = 0  
name = name + str(i) #this will be your variable name. 
while True: 
    value = 10 #value to assign 
    variables.update({name:value}) 
    if break_condition == True: 
        break
530/182:
variables = {''} 
break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
name = “variable” 
i = 0  
name = name + str(i) #this will be your variable name. 
while True: 
    value = 10 #value to assign 
    variables.update({name:value}) 
    if break_condition == True: 
        break
530/183:
variables = []
break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
name = “variable” 
i = 0  
name = name + str(i) #this will be your variable name. 
while True: 
    value = 10 #value to assign 
    variables.update({name:value}) 
    if break_condition == True: 
        break
530/184:
variables = []
break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
name = 'variable' 
i = 0  
name = name + str(i) #this will be your variable name. 
while True: 
    value = 10 #value to assign 
    variables.update({name:value}) 
    if break_condition == True: 
        break
530/185:
variables = []
break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
name = ['variable'] 
i = 0  
name = name + str(i) #this will be your variable name. 
while True: 
    value = 10 #value to assign 
    variables.update({name:value}) 
    if break_condition == True: 
        break
530/186:
variables = []
break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
name = str(variablename)
i = 0  
name = name + str(i) #this will be your variable name. 
while True: 
    value = 10 #value to assign 
    variables.update({name:value}) 
    if break_condition == True: 
        break
530/187:
variables = []
break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
name = str(variablename)
 
name = name + str(i) #this will be your variable name. 
while True: 
    value = 10 #value to assign 
    variables.update({name:value}) 
    if break_condition == True: 
        break
530/188:
variables = []
break_condition= True # Dont forget to add break condition to while loop if you dont want your system to go crazy. 
name = str(variablename)
name = name + str(i) #this will be your variable name. 
while True: 
    value = 10 #value to assign 
    variables.update({name:value}) 
    if break_condition == True: 
        break
530/189:
# Dynamic_Variable_Name can be
# anything the user wants
Dynamic_Variable_Name = "geek"
 
# The value 2020 is assigned
# to "geek" variable
globals()[Dynamic_Variable_Name] = 2020
 
# Display variable
print(geek)
530/190:
# Dynamic_Variable_Name can be
# anything the user wants
Dynamic_Variable_Name='geek'
 
# The value 2020 is assigned
# to "geek" variable
globals()[Dynamic_Variable_Name]=2020
 
# Display variable
print(geek)
530/191:
Dynamic_Variable_Name='geek'
 
# The value 2020 is assigned
# to "geek" variable
globals()[Dynamic_Variable_Name]=2020
 
# Display variable
print(geek)
530/192:
Dynamic_Variable_Name='geek'
globals()[Dynamic_Variable_Name]=2020
print(geek)
530/193:
Dynamic_Variable_Name='geek'
globals()[Dynamic_Variable_Name]=2020
print(geek)
Dynamic_Variable_Name
530/194:
for i in range(9):
     exec('string%s = Hello' % i)
530/195:
for i in range(10)
    vars()[i] = 2020
530/196:
for i in range(10):
    vars()[i] = 2020
530/197:
for i in range(10):
    vars()[i] = 2020
1
530/198:
for i in range(10):
    vars()['var'i] = 2020
1
530/199:
for i in range(10):
    vars()['var'+i] = 2020
1
530/200:
for i in range(10):
    vars()['var'+i] = 2020
var1
530/201: opt.cobra_model
530/202: opt.model
530/203: m = opt.model(cobra_model)
530/204: m = opt.model.cobra_model()
530/205: opt.model
530/206: m=opt.cobramodel()
530/207: m=opt.cobra_model()
530/208: {'model1':m}
530/209: d={'model1':m}
530/210:
d={'model1':m}
d
530/211:
d={'model1':m}
d('model1')
530/212:
d={'model1':m}
d.values
530/213:
d={'model1':m}
d.values
530/214:
d={'model1':m}
d.values[0]
530/215:
d={'model1':m}
d
530/216:
d={'model1':m}
d[1]
530/217:
d={'model1':m,'model2':m}
d[1]
530/218:
d={'model1':m,'model2':m}
d
530/219:
d={'model1':m,'model2':m}
d(1)
530/220:
d={'model1':m,'model2':m}
d['model1']
530/221:
d={'model1':m,'model2':m}
d['model2']
530/222:
d={1:m,2:m}
d[1]
530/223:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config.solver = "glpk"
i=0
models={} # empty dict
for c in conditons:
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    i = i + 1
    models[i]=mod_c
530/224:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config.solver = "glpk"
i=0
models={} # empty dict
for c in conditions:
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    i = i + 1
    models[i]=mod_c
532/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=1
    df_discretized[c][df_discretized[c]==-20]=2
    df_discretized[c][df_discretized[c]==-30]=3
df_discretized = df_discretized.fillna(0)
532/2:
from cobra.io import load_matlab_model, save_matlab_model
mod = load_matlab_model('C:/Users/prins/git/Human-GEM/model/Human-GEM.mat') # load HUMAN1 model (this takes really long!!)
532/3:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config.solver = "glpk"
i=0
models={} # empty dict
for c in conditions:
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    models[i]=mod_c
    i = i + 1
533/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=1
    df_discretized[c][df_discretized[c]==-20]=2
    df_discretized[c][df_discretized[c]==-30]=3
df_discretized = df_discretized.fillna(0)
533/2:
from cobra.io import load_matlab_model, save_matlab_model
mod = load_matlab_model('C:/Users/prins/git/Human-GEM/model/Human-GEM.mat') # load HUMAN1 model (this takes really long!!)
533/3:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config = Configuration()
config.solver = "glpk"
i=0
models={} # empty dict
for c in conditions:
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    models[i]=mod_c
    i = i + 1
539/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=1
    df_discretized[c][df_discretized[c]==-20]=2
    df_discretized[c][df_discretized[c]==-30]=3
df_discretized = df_discretized.fillna(0)
539/2:
from cobra.io import load_matlab_model, save_matlab_model
mod = load_matlab_model('C:/Users/prins/git/Human-GEM/model/Human-GEM.mat') # load HUMAN1 model (this takes really long!!)
539/3:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config = Configuration()
config.solver = "glpk"
i=0
models={} # empty dict
for c in conditions:
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    models[i]=mod_c
    i = i + 1
543/1:
import pandas as pd
df = pd.read_excel(r'C:\Users\prins\git\Human1_RPE_PR\RPE_PR data\expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=1
    df_discretized[c][df_discretized[c]==-20]=2
    df_discretized[c][df_discretized[c]==-30]=3
df_discretized = df_discretized.fillna(0)
543/2:
from cobra.io import load_matlab_model, save_matlab_model
mod = load_matlab_model('C:/Users/prins/git/Human-GEM/model/Human-GEM.mat') # load HUMAN1 model (this takes really long!!)
543/3: conditions
543/4:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config = Configuration()
config.solver = "glpk"
models={} # empty dict

c = 'MeanExpression_RPE__VoigtEtAl2019_'
mod_RPE = context_specific_model(mod,c)

def context_specific_model(mod, condition): 
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    return  mod_c
543/5:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config = Configuration()
config.solver = "glpk"

def context_specific_model(mod, condition): 
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    return  mod_c

c = 'MeanExpression_RPE__VoigtEtAl2019_'
mod_RPE = context_specific_model(mod,c)
543/6: save_matlab_model(mod_RPE, "mod_RPE.mat")
543/7: save_matlab_model(mod_RPE, "C:/Users/prins/mod_RPE.mat")
543/8:
save_matlab_model(mod_RPE, "C:/Users/prins/mod_RPE.mat")

mod1 = load_matlab_model("C:/Users/prins/mod_RPE.mat")
543/9: mod1
543/10:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config = Configuration()
config.solver = "glpk"

def context_specific_model(mod, condition): 
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    return  mod_c

c = 'MeanExpression_RodPhotoreceptors__LiangEtAl_2019_'
mod_PRrod = context_specific_model(mod,c)
save_matlab_model(mod_RPE, "C:/Users/prins/mod_PRrod.mat")
mod1 = load_matlab_model("C:/Users/prins/mod_PRrod.mat")
543/11:
from corda import reaction_confidence
from cobra import Configuration
from corda import CORDA
config = Configuration()
config.solver = "glpk"

def context_specific_model(mod, condition): 
    mod_c = mod.copy() # make deep copy of basis model 'mod' (Human1) for every condition
    mod_c.id = c
    gene_conf_dict = dict([(i,x) for i, x in zip(df_discretized.Ensembl, df_discretized[c])]) # gene confidences dictionary
    rxn_conf_dict = {rxn.id:reaction_confidence(rxn, gene_conf_dict) for rxn in mod.reactions} # reaction confidence dictionary
    mod_CORDA = CORDA(mod, rxn_conf_dict) 
    mod_CORDA.build()
    print(c)
    print(mod_CORDA)
    mod_c = mod_CORDA.cobra_model()
    return  mod_c

c = 'MeanExpression_RodPhotoreceptors__LiangEtAl_2019_'
mod_PRrod = context_specific_model(mod,c)
save_matlab_model(mod_PRrod, "C:/Users/prins/mod_PRrod.mat")
mod_PRrod = load_matlab_model("C:/Users/prins/mod_PRrod.mat")
552/1:
import pandas as pd
df = pd.read_excel('C:/Users/Stella/Documents/GitHub/context_specific_GEMs/RPE_PR data/expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=1
    df_discretized[c][df_discretized[c]==-20]=2
    df_discretized[c][df_discretized[c]==-30]=3
df_discretized = df_discretized.fillna(0)
552/2:
import pandas as pd
df = pd.read_excel('C:/Users/Stella/Documents/git/Human1_RPE_PR/RPE_PR data/expression_data.xlsx')
conditions = df.columns[2:]
df_discretized = df.copy(deep=True)

for c in conditions:
    q25 = df_discretized[c].quantile([0.25]).values[0]
    q75 = df_discretized[c].quantile([0.75]).values[0]
    df_discretized[c][df_discretized[c]<0.00001] = -1 # negative confidence (NC)
    df_discretized[c][(df_discretized[c]<=q25) & (df_discretized[c]>0)] = -10 # 1 'LC'
    df_discretized[c][(df_discretized[c]<=q75) & (df_discretized[c]>q25)] = -20 #  2 'MC'
    df_discretized[c][(df_discretized[c]>q75)] = -30 # 3'HC'
    df_discretized[c][df_discretized[c]==-10]=1
    df_discretized[c][df_discretized[c]==-20]=2
    df_discretized[c][df_discretized[c]==-30]=3
df_discretized = df_discretized.fillna(0)
   1: history -g -f anyfilename
